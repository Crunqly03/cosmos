[{"C:\\Users\\90532\\Desktop\\sss\\src\\index.tsx":"1","C:\\Users\\90532\\Desktop\\sss\\src\\Providers.tsx":"2","C:\\Users\\90532\\Desktop\\sss\\src\\App.tsx":"3","C:\\Users\\90532\\Desktop\\sss\\src\\views\\NotFound.tsx":"4","C:\\Users\\90532\\Desktop\\sss\\src\\style\\Global.tsx":"5","C:\\Users\\90532\\Desktop\\sss\\src\\components\\PageLoader.tsx":"6","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\ApplyForIfos.tsx":"7","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Nft\\components\\NftGlobalNotification.tsx":"8","C:\\Users\\90532\\Desktop\\sss\\src\\state\\hooks.ts":"9","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\index.ts":"10","C:\\Users\\90532\\Desktop\\sss\\src\\views\\CallOption\\index.ts":"11","C:\\Users\\90532\\Desktop\\sss\\src\\views\\DelegateFarm\\index.ts":"12","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\index.ts":"13","C:\\Users\\90532\\Desktop\\sss\\src\\utils\\getRpcUrl.ts":"14","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\index.tsx":"15","C:\\Users\\90532\\Desktop\\sss\\src\\components\\Menu\\index.tsx":"16","C:\\Users\\90532\\Desktop\\sss\\src\\contexts\\RefreshContext.tsx":"17","C:\\Users\\90532\\Desktop\\sss\\src\\contexts\\BlockContext.tsx":"18","C:\\Users\\90532\\Desktop\\sss\\src\\contexts\\ThemeContext.tsx":"19","C:\\Users\\90532\\Desktop\\sss\\src\\contexts\\Localisation\\languageContext.tsx":"20","C:\\Users\\90532\\Desktop\\sss\\src\\components\\layout\\LeafContainers.tsx":"21","C:\\Users\\90532\\Desktop\\sss\\src\\components\\layout\\Page.tsx":"22","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\components\\Details.tsx":"23","C:\\Users\\90532\\Desktop\\sss\\src\\state\\index.ts":"24","C:\\Users\\90532\\Desktop\\sss\\src\\state\\actions.ts":"25","C:\\Users\\90532\\Desktop\\sss\\src\\config\\constants\\types.ts":"26","C:\\Users\\90532\\Desktop\\sss\\src\\components\\Menu\\config.ts":"27","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\Farms.tsx":"28","C:\\Users\\90532\\Desktop\\sss\\src\\views\\CallOption\\CallOption.tsx":"29","C:\\Users\\90532\\Desktop\\sss\\src\\views\\DelegateFarm\\DelegateFarm.tsx":"30","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\Home.tsx":"31","C:\\Users\\90532\\Desktop\\sss\\src\\hooks\\useI18n.ts":"32","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\components\\Hero.tsx":"33","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\PastIfo.tsx":"34","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\CurrentIfo.tsx":"35","C:\\Users\\90532\\Desktop\\sss\\src\\components\\layout\\Container.tsx":"36","C:\\Users\\90532\\Desktop\\sss\\src\\hooks\\useRefresh.ts":"37","C:\\Users\\90532\\Desktop\\sss\\src\\hooks\\useTheme.ts":"38","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\helpers.tsx":"39","C:\\Users\\90532\\Desktop\\sss\\src\\utils\\web3.ts":"40","C:\\Users\\90532\\Desktop\\sss\\src\\contexts\\Localisation\\translationsContext.ts":"41","C:\\Users\\90532\\Desktop\\sss\\src\\config\\localisation\\languageCodes.ts":"42","C:\\Users\\90532\\Desktop\\sss\\src\\utils\\translateTextHelpers.ts":"43","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\components\\IfoTabButtons\\index.tsx":"44","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\Divider.tsx":"45","C:\\Users\\90532\\Desktop\\sss\\src\\views\\DelegateFarm\\components\\Divider.tsx":"46","C:\\Users\\90532\\Desktop\\sss\\src\\views\\DelegateFarm\\components\\FarmCard\\FarmCard.tsx":"47","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\components\\slideimage.tsx":"48","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\components\\Announcements.tsx":"49","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\components\\Partners.tsx":"50","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\components\\CakeStats.tsx":"51","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\components\\TopSliderCard.tsx":"52","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\components\\IfoCards.tsx":"53","C:\\Users\\90532\\Desktop\\sss\\src\\components\\Partials\\MainFooter.tsx":"54","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\CakeVaultCard\\FarmCard.tsx":"55","C:\\Users\\90532\\Desktop\\sss\\src\\config\\index.ts":"56","C:\\Users\\90532\\Desktop\\sss\\src\\state\\pools\\index.ts":"57","C:\\Users\\90532\\Desktop\\sss\\src\\state\\farms\\index.ts":"58","C:\\Users\\90532\\Desktop\\sss\\src\\utils\\formatBalance.ts":"59","C:\\Users\\90532\\Desktop\\sss\\src\\hooks\\useTokenBalance.ts":"60","C:\\Users\\90532\\Desktop\\sss\\src\\components\\Partials\\TopSocial.tsx":"61","C:\\Users\\90532\\Desktop\\sss\\src\\hooks\\useContract.ts":"62","C:\\Users\\90532\\Desktop\\sss\\src\\utils\\addressHelpers.ts":"63","C:\\Users\\90532\\Desktop\\sss\\src\\hooks\\useAllEarnings.ts":"64","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\components\\IfoCard\\index.tsx":"65","C:\\Users\\90532\\Desktop\\sss\\src\\components\\layout\\Flex.tsx":"66","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\components\\FarmingCard.tsx":"67","C:\\Users\\90532\\Desktop\\sss\\src\\views\\DelegateFarm\\components\\FarmCard\\ApyButton.tsx":"68","C:\\Users\\90532\\Desktop\\sss\\src\\views\\DelegateFarm\\components\\FarmCard\\CardActionsContainer.tsx":"69","C:\\Users\\90532\\Desktop\\sss\\src\\views\\DelegateFarm\\components\\FarmCard\\CardHeading.tsx":"70","C:\\Users\\90532\\Desktop\\sss\\src\\views\\DelegateFarm\\components\\FarmCard\\DetailsSection.tsx":"71","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\FarmTabButtons\\index.tsx":"72","C:\\Users\\90532\\Desktop\\sss\\src\\components\\ExpandableSectionButton\\ClaimButton.tsx":"73","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\CakeVaultCard\\ApyButton.tsx":"74","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\CakeVaultCard\\CardHeading.tsx":"75","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\CakeVaultCard\\CardActionsContainer.tsx":"76","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\CakeVaultCard\\DetailsSection.tsx":"77","C:\\Users\\90532\\Desktop\\sss\\src\\state\\farms\\fetchVaultPublic.ts":"78","C:\\Users\\90532\\Desktop\\sss\\src\\state\\farms\\fetchVaultUser.ts":"79","C:\\Users\\90532\\Desktop\\sss\\src\\state\\farms\\fetchFarmUser.ts":"80","C:\\Users\\90532\\Desktop\\sss\\src\\state\\farms\\fetchFarms.ts":"81","C:\\Users\\90532\\Desktop\\sss\\src\\state\\pools\\fetchPoolsUser.ts":"82","C:\\Users\\90532\\Desktop\\sss\\src\\state\\pools\\fetchPools.ts":"83","C:\\Users\\90532\\Desktop\\sss\\src\\config\\constants\\index.ts":"84","C:\\Users\\90532\\Desktop\\sss\\src\\hooks\\useFarmsWithBalance.ts":"85","C:\\Users\\90532\\Desktop\\sss\\src\\components\\TokenInput\\index.ts":"86","C:\\Users\\90532\\Desktop\\sss\\src\\utils\\steemUtils.ts":"87","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\components\\CardValue.tsx":"88","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\components\\IfoCard\\IfoCardContribute.tsx":"89","C:\\Users\\90532\\Desktop\\sss\\src\\views\\DelegateFarm\\components\\FarmCard\\HarvestAction.tsx":"90","C:\\Users\\90532\\Desktop\\sss\\src\\views\\DelegateFarm\\components\\FarmCard\\ApyCalculatorModal.tsx":"91","C:\\Users\\90532\\Desktop\\sss\\src\\config\\constants\\farms.ts":"92","C:\\Users\\90532\\Desktop\\sss\\src\\config\\constants\\pools.ts":"93","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\CakeVaultCard\\ApyCalculatorModal.tsx":"94","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\CakeVaultCard\\UnstakingFeeCountdownRow.tsx":"95","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\CakeVaultCard\\HarvestAction.tsx":"96","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\CakeVaultCard\\StakeAction.tsx":"97","C:\\Users\\90532\\Desktop\\sss\\src\\config\\constants\\ifo.ts":"98","C:\\Users\\90532\\Desktop\\sss\\src\\utils\\erc20.ts":"99","C:\\Users\\90532\\Desktop\\sss\\src\\components\\ExpandableSectionButton\\index.ts":"100","C:\\Users\\90532\\Desktop\\sss\\src\\config\\constants\\contracts.ts":"101","C:\\Users\\90532\\Desktop\\sss\\src\\utils\\getLiquidityUrlPathParts.ts":"102","C:\\Users\\90532\\Desktop\\sss\\src\\components\\TokenInput\\TokenInput.tsx":"103","C:\\Users\\90532\\Desktop\\sss\\src\\components\\UnlockButton.tsx":"104","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\components\\IfoCard\\ContributeModal.tsx":"105","C:\\Users\\90532\\Desktop\\sss\\src\\utils\\multicall.ts":"106","C:\\Users\\90532\\Desktop\\sss\\src\\utils\\bigNumber.ts":"107","C:\\Users\\90532\\Desktop\\sss\\src\\components\\Tags.tsx":"108","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\components\\IfoCard\\LabelButton.tsx":"109","C:\\Users\\90532\\Desktop\\sss\\src\\hooks\\useStake.ts":"110","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\CakeVaultCard\\WithdrawalFeeTimer.tsx":"111","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\WithdrawModal.tsx":"112","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\DepositModal.tsx":"113","C:\\Users\\90532\\Desktop\\sss\\src\\components\\ExpandableSectionButton\\ExpandableSectionButton.tsx":"114","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\components\\IfoCard\\IfoCardTime.tsx":"115","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\components\\IfoCard\\IfoCardDetails.tsx":"116","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\components\\IfoCard\\IfoCardDescription.tsx":"117","C:\\Users\\90532\\Desktop\\sss\\src\\components\\Input\\index.ts":"118","C:\\Users\\90532\\Desktop\\sss\\src\\config\\constants\\delegateFarms.ts":"119","C:\\Users\\90532\\Desktop\\sss\\src\\utils\\compoundApyHelpers.ts":"120","C:\\Users\\90532\\Desktop\\sss\\src\\hooks\\useHarvest.ts":"121","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\components\\IfoCard\\IfoCardProgress.tsx":"122","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\components\\IfoCard\\IfoCardHeader.tsx":"123","C:\\Users\\90532\\Desktop\\sss\\src\\hooks\\useAllowance.ts":"124","C:\\Users\\90532\\Desktop\\sss\\src\\hooks\\useApprove.ts":"125","C:\\Users\\90532\\Desktop\\sss\\src\\hooks\\useUnstake.ts":"126","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\hooks\\useWithdrawalFeeTimer.ts":"127","C:\\Users\\90532\\Desktop\\sss\\src\\hooks\\useBlock.ts":"128","C:\\Users\\90532\\Desktop\\sss\\src\\hooks\\useWeb3.ts":"129","C:\\Users\\90532\\Desktop\\sss\\src\\components\\Input\\Input.tsx":"130","C:\\Users\\90532\\Desktop\\sss\\src\\components\\Partials\\Socials.tsx":"131","C:\\Users\\90532\\Desktop\\sss\\src\\components\\Input\\BalanceInput.tsx":"132","C:\\Users\\90532\\Desktop\\sss\\src\\utils\\callHelpers.ts":"133","C:\\Users\\90532\\Desktop\\sss\\src\\utils\\getTimePeriods.ts":"134","C:\\Users\\90532\\Desktop\\sss\\src\\components\\ModalActions\\index.ts":"135","C:\\Users\\90532\\Desktop\\sss\\src\\components\\ModalActions\\ModalActions.tsx":"136","C:\\Users\\90532\\Desktop\\sss\\src\\components\\Spacer\\index.ts":"137","C:\\Users\\90532\\Desktop\\sss\\src\\components\\Spacer\\Spacer.tsx":"138","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\components\\FarmStakingCard.tsx":"139","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\components\\CakeHarvestBalance.tsx":"140","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\components\\CakeWalletBalance.tsx":"141","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\components\\Statistics.tsx":"142","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\components\\TrendPost.tsx":"143","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\components\\OurProducts.tsx":"144","C:\\Users\\90532\\Desktop\\sss\\src\\components\\layout\\SecondLeaf.tsx":"145","C:\\Users\\90532\\Desktop\\sss\\src\\views\\HourGlass\\index.ts":"146","C:\\Users\\90532\\Desktop\\sss\\src\\views\\HourGlass\\HourGlass.tsx":"147","C:\\Users\\90532\\Desktop\\sss\\src\\views\\HourGlass\\imaginateSlider.tsx":"148","C:\\Users\\90532\\Desktop\\sss\\src\\components\\SlideInput\\SlideInput.tsx":"149","C:\\Users\\90532\\Desktop\\sss\\src\\components\\CustomInput\\CustomInput.tsx":"150","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\CakeVaultCard\\EstimateButton.tsx":"151","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\FarmCard\\ApyButton.tsx":"152","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\CakeVaultCard\\EstimateModal.tsx":"153","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\FarmCard\\ApyCalculatorModal.tsx":"154","C:\\Users\\90532\\Desktop\\sss\\src\\views\\CallOption\\ClaimedButtons\\index.tsx":"155"},{"size":300,"mtime":1640424446986,"results":"156","hashOfConfig":"157"},{"size":1392,"mtime":1640424446965,"results":"158","hashOfConfig":"157"},{"size":3494,"mtime":1641463899532,"results":"159","hashOfConfig":"157"},{"size":849,"mtime":1640424447035,"results":"160","hashOfConfig":"157"},{"size":5786,"mtime":1642061367613,"results":"161","hashOfConfig":"157"},{"size":471,"mtime":1640424446968,"results":"162","hashOfConfig":"157"},{"size":5039,"mtime":1640424447018,"results":"163","hashOfConfig":"157"},{"size":3011,"mtime":1640424447031,"results":"164","hashOfConfig":"157"},{"size":12719,"mtime":1640424446988,"results":"165","hashOfConfig":"157"},{"size":35,"mtime":1640424447012,"results":"166","hashOfConfig":"157"},{"size":40,"mtime":1640424446993,"results":"167","hashOfConfig":"157"},{"size":42,"mtime":1640424446996,"results":"168","hashOfConfig":"157"},{"size":34,"mtime":1640424447017,"results":"169","hashOfConfig":"157"},{"size":329,"mtime":1640424446991,"results":"170","hashOfConfig":"157"},{"size":674,"mtime":1640424447021,"results":"171","hashOfConfig":"157"},{"size":1155,"mtime":1640424446968,"results":"172","hashOfConfig":"157"},{"size":942,"mtime":1640424446980,"results":"173","hashOfConfig":"157"},{"size":772,"mtime":1640424446979,"results":"174","hashOfConfig":"157"},{"size":938,"mtime":1640424446980,"results":"175","hashOfConfig":"157"},{"size":3151,"mtime":1640424446979,"results":"176","hashOfConfig":"157"},{"size":352,"mtime":1641221934044,"results":"177","hashOfConfig":"157"},{"size":693,"mtime":1640690927213,"results":"178","hashOfConfig":"157"},{"size":2340,"mtime":1641204895271,"results":"179","hashOfConfig":"157"},{"size":286,"mtime":1640424446988,"results":"180","hashOfConfig":"157"},{"size":332,"mtime":1640424446987,"results":"181","hashOfConfig":"157"},{"size":2644,"mtime":1640424446978,"results":"182","hashOfConfig":"157"},{"size":2790,"mtime":1642147723173,"results":"183","hashOfConfig":"157"},{"size":6005,"mtime":1641985069273,"results":"184","hashOfConfig":"157"},{"size":14866,"mtime":1642159115619,"results":"185","hashOfConfig":"157"},{"size":5402,"mtime":1640424446994,"results":"186","hashOfConfig":"157"},{"size":2580,"mtime":1641547904398,"results":"187","hashOfConfig":"157"},{"size":566,"mtime":1640424446983,"results":"188","hashOfConfig":"157"},{"size":901,"mtime":1641201052849,"results":"189","hashOfConfig":"157"},{"size":478,"mtime":1640424447018,"results":"190","hashOfConfig":"157"},{"size":7873,"mtime":1641218969136,"results":"191","hashOfConfig":"157"},{"size":319,"mtime":1640691023213,"results":"192","hashOfConfig":"157"},{"size":260,"mtime":1640424446984,"results":"193","hashOfConfig":"157"},{"size":371,"mtime":1640424446984,"results":"194","hashOfConfig":"157"},{"size":6457,"mtime":1641463899540,"results":"195","hashOfConfig":"157"},{"size":770,"mtime":1640424446993,"results":"196","hashOfConfig":"157"},{"size":404,"mtime":1640424446980,"results":"197","hashOfConfig":"157"},{"size":2053,"mtime":1640424446979,"results":"198","hashOfConfig":"157"},{"size":1614,"mtime":1640424446993,"results":"199","hashOfConfig":"157"},{"size":786,"mtime":1641207313447,"results":"200","hashOfConfig":"157"},{"size":172,"mtime":1641803496961,"results":"201","hashOfConfig":"157"},{"size":159,"mtime":1640424446994,"results":"202","hashOfConfig":"157"},{"size":6496,"mtime":1640424446995,"results":"203","hashOfConfig":"157"},{"size":2331,"mtime":1641551050275,"results":"204","hashOfConfig":"157"},{"size":650,"mtime":1640691693923,"results":"205","hashOfConfig":"157"},{"size":3256,"mtime":1641651969223,"results":"206","hashOfConfig":"157"},{"size":435,"mtime":1640702106948,"results":"207","hashOfConfig":"157"},{"size":3105,"mtime":1641550726314,"results":"208","hashOfConfig":"157"},{"size":573,"mtime":1640424447021,"results":"209","hashOfConfig":"157"},{"size":5074,"mtime":1641805235592,"results":"210","hashOfConfig":"157"},{"size":12049,"mtime":1641807691816,"results":"211","hashOfConfig":"157"},{"size":295,"mtime":1640424446979,"results":"212","hashOfConfig":"157"},{"size":4333,"mtime":1640424446989,"results":"213","hashOfConfig":"157"},{"size":4537,"mtime":1640424446988,"results":"214","hashOfConfig":"157"},{"size":500,"mtime":1640424446991,"results":"215","hashOfConfig":"157"},{"size":2602,"mtime":1641463899536,"results":"216","hashOfConfig":"157"},{"size":2253,"mtime":1641805212794,"results":"217","hashOfConfig":"157"},{"size":4205,"mtime":1640424446983,"results":"218","hashOfConfig":"157"},{"size":1026,"mtime":1640424446990,"results":"219","hashOfConfig":"157"},{"size":1001,"mtime":1640424446981,"results":"220","hashOfConfig":"157"},{"size":5747,"mtime":1640424447020,"results":"221","hashOfConfig":"157"},{"size":776,"mtime":1640424446972,"results":"222","hashOfConfig":"157"},{"size":2537,"mtime":1640424447014,"results":"223","hashOfConfig":"157"},{"size":1051,"mtime":1640424446994,"results":"224","hashOfConfig":"157"},{"size":6384,"mtime":1641465078316,"results":"225","hashOfConfig":"157"},{"size":1372,"mtime":1640424446995,"results":"226","hashOfConfig":"157"},{"size":2233,"mtime":1640424446995,"results":"227","hashOfConfig":"157"},{"size":1326,"mtime":1641887128532,"results":"228","hashOfConfig":"157"},{"size":935,"mtime":1641818888721,"results":"229","hashOfConfig":"157"},{"size":1051,"mtime":1640424446997,"results":"230","hashOfConfig":"231"},{"size":1450,"mtime":1641807918215,"results":"232","hashOfConfig":"157"},{"size":5318,"mtime":1641805100481,"results":"233","hashOfConfig":"157"},{"size":2884,"mtime":1640424446998,"results":"234","hashOfConfig":"157"},{"size":3906,"mtime":1640424446987,"results":"235","hashOfConfig":"157"},{"size":1401,"mtime":1640424446987,"results":"236","hashOfConfig":"157"},{"size":2537,"mtime":1640424446987,"results":"237","hashOfConfig":"157"},{"size":4889,"mtime":1641463899537,"results":"238","hashOfConfig":"157"},{"size":3601,"mtime":1640424446988,"results":"239","hashOfConfig":"157"},{"size":3790,"mtime":1640424446988,"results":"240","hashOfConfig":"157"},{"size":279,"mtime":1640424446978,"results":"241","hashOfConfig":"157"},{"size":1339,"mtime":1640424446983,"results":"242","hashOfConfig":"157"},{"size":40,"mtime":1640424446970,"results":"243","hashOfConfig":"157"},{"size":2054,"mtime":1640424446992,"results":"244","hashOfConfig":"157"},{"size":896,"mtime":1640597291966,"results":"245","hashOfConfig":"157"},{"size":5606,"mtime":1640424447019,"results":"246","hashOfConfig":"157"},{"size":1836,"mtime":1640424446996,"results":"247","hashOfConfig":"157"},{"size":4733,"mtime":1640424446994,"results":"248","hashOfConfig":"157"},{"size":29477,"mtime":1640424446977,"results":"249","hashOfConfig":"157"},{"size":2279,"mtime":1640424446978,"results":"250","hashOfConfig":"157"},{"size":4794,"mtime":1640424446997,"results":"251","hashOfConfig":"231"},{"size":1828,"mtime":1640424446998,"results":"252","hashOfConfig":"157"},{"size":2043,"mtime":1640424446998,"results":"253","hashOfConfig":"157"},{"size":3163,"mtime":1641465795639,"results":"254","hashOfConfig":"157"},{"size":5246,"mtime":1640424446978,"results":"255","hashOfConfig":"157"},{"size":1105,"mtime":1640424446990,"results":"256","hashOfConfig":"157"},{"size":53,"mtime":1640424446966,"results":"257","hashOfConfig":"157"},{"size":2473,"mtime":1640424446977,"results":"258","hashOfConfig":"157"},{"size":584,"mtime":1640424446991,"results":"259","hashOfConfig":"157"},{"size":2351,"mtime":1641484429020,"results":"260","hashOfConfig":"157"},{"size":545,"mtime":1640424446971,"results":"261","hashOfConfig":"157"},{"size":2040,"mtime":1640424447019,"results":"262","hashOfConfig":"157"},{"size":964,"mtime":1640424446992,"results":"263","hashOfConfig":"157"},{"size":502,"mtime":1640424446990,"results":"264","hashOfConfig":"157"},{"size":985,"mtime":1641804163965,"results":"265","hashOfConfig":"157"},{"size":1094,"mtime":1640424447020,"results":"266","hashOfConfig":"157"},{"size":3638,"mtime":1640424446984,"results":"267","hashOfConfig":"157"},{"size":447,"mtime":1640424446999,"results":"268","hashOfConfig":"157"},{"size":2680,"mtime":1641476964011,"results":"269","hashOfConfig":"157"},{"size":2061,"mtime":1641463899540,"results":"270","hashOfConfig":"157"},{"size":938,"mtime":1640424446966,"results":"271","hashOfConfig":"157"},{"size":1679,"mtime":1640424447020,"results":"272","hashOfConfig":"157"},{"size":2296,"mtime":1640424447020,"results":"273","hashOfConfig":"157"},{"size":1567,"mtime":1640424447019,"results":"274","hashOfConfig":"157"},{"size":78,"mtime":1640424446967,"results":"275","hashOfConfig":"157"},{"size":410,"mtime":1640424446977,"results":"276","hashOfConfig":"157"},{"size":1316,"mtime":1640424446990,"results":"277","hashOfConfig":"157"},{"size":3399,"mtime":1640424446983,"results":"278","hashOfConfig":"157"},{"size":464,"mtime":1640424447020,"results":"279","hashOfConfig":"157"},{"size":964,"mtime":1640424447020,"results":"280","hashOfConfig":"157"},{"size":1627,"mtime":1640424446982,"results":"281","hashOfConfig":"157"},{"size":6855,"mtime":1640424446982,"results":"282","hashOfConfig":"157"},{"size":3733,"mtime":1640424446985,"results":"283","hashOfConfig":"157"},{"size":1246,"mtime":1640424447012,"results":"284","hashOfConfig":"157"},{"size":214,"mtime":1640424446982,"results":"285","hashOfConfig":"157"},{"size":1023,"mtime":1640424446986,"results":"286","hashOfConfig":"157"},{"size":1989,"mtime":1641463899533,"results":"287","hashOfConfig":"157"},{"size":2184,"mtime":1641805199638,"results":"288","hashOfConfig":"157"},{"size":1629,"mtime":1641482894279,"results":"289","hashOfConfig":"157"},{"size":6691,"mtime":1640424446990,"results":"290","hashOfConfig":"157"},{"size":1290,"mtime":1640424446992,"results":"291","hashOfConfig":"157"},{"size":42,"mtime":1640424446968,"results":"292","hashOfConfig":"157"},{"size":797,"mtime":1641482768734,"results":"293","hashOfConfig":"157"},{"size":36,"mtime":1640424446969,"results":"294","hashOfConfig":"157"},{"size":722,"mtime":1640424446969,"results":"295","hashOfConfig":"157"},{"size":5332,"mtime":1640424447014,"results":"296","hashOfConfig":"231"},{"size":678,"mtime":1640424447013,"results":"297","hashOfConfig":"231"},{"size":767,"mtime":1640424447013,"results":"298","hashOfConfig":"231"},{"size":6232,"mtime":1641463899541,"results":"299","hashOfConfig":"157"},{"size":5546,"mtime":1641463899541,"results":"300","hashOfConfig":"157"},{"size":4263,"mtime":1640709095306,"results":"301","hashOfConfig":"157"},{"size":350,"mtime":1641222523043,"results":"302","hashOfConfig":"157"},{"size":39,"mtime":1641463899542,"results":"303","hashOfConfig":"157"},{"size":12298,"mtime":1641889489217,"results":"304","hashOfConfig":"157"},{"size":2060,"mtime":1641463899542,"results":"305","hashOfConfig":"157"},{"size":1185,"mtime":1641463899535,"results":"306","hashOfConfig":"157"},{"size":2055,"mtime":1641463899533,"results":"307","hashOfConfig":"157"},{"size":921,"mtime":1641463899538,"results":"308","hashOfConfig":"157"},{"size":1051,"mtime":1640424447005,"results":"309","hashOfConfig":"157"},{"size":9451,"mtime":1641463899539,"results":"310","hashOfConfig":"157"},{"size":4733,"mtime":1640424447005,"results":"311","hashOfConfig":"157"},{"size":1160,"mtime":1641994531832,"results":"312","hashOfConfig":"157"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},"x537s2",{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"315"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"315"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"315"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"315"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"315"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"315"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"378","messages":"379","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"315"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"315"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"315"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"315"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"418","usedDeprecatedRules":"315"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"421","usedDeprecatedRules":"315"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426","usedDeprecatedRules":"315"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"429","usedDeprecatedRules":"315"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"432","usedDeprecatedRules":"315"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"437","usedDeprecatedRules":"315"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"440","usedDeprecatedRules":"315"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"445","usedDeprecatedRules":"315"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456","usedDeprecatedRules":"315"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"467","usedDeprecatedRules":"315"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":4,"source":"472","usedDeprecatedRules":"315"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"475","usedDeprecatedRules":"315"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"478","usedDeprecatedRules":"315"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"485"},"htt4vy",{"filePath":"486","messages":"487","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"488","usedDeprecatedRules":"315"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"491","usedDeprecatedRules":"315"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"494","usedDeprecatedRules":"315"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"501","messages":"502","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"503","usedDeprecatedRules":"315"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"506","usedDeprecatedRules":"315"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"509","usedDeprecatedRules":"315"},{"filePath":"510","messages":"511","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"516","messages":"517","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"518","usedDeprecatedRules":"315"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"521","messages":"522","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"525","usedDeprecatedRules":"315"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"528","messages":"529","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"530","messages":"531","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"532","messages":"533","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"534","usedDeprecatedRules":"485"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"537","usedDeprecatedRules":"315"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"540","messages":"541","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"542","usedDeprecatedRules":"315"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"545","messages":"546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"551","messages":"552","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"553","messages":"554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"559","usedDeprecatedRules":"315"},{"filePath":"560","messages":"561","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"562","messages":"563","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"564","usedDeprecatedRules":"315"},{"filePath":"565","messages":"566","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"567","messages":"568","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"569","messages":"570","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"571","messages":"572","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"573","messages":"574","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"575","usedDeprecatedRules":"315"},{"filePath":"576","messages":"577","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"578","messages":"579","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"580","messages":"581","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"584","messages":"585","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"586","messages":"587","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"588","messages":"589","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"590","messages":"591","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"596","messages":"597","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"598","messages":"599","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"602","usedDeprecatedRules":"315"},{"filePath":"603","messages":"604","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"605","messages":"606","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"607","messages":"608","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"609","messages":"610","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"611","messages":"612","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"613","messages":"614","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"615","messages":"616","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"619","messages":"620","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"621","messages":"622","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"623","messages":"624","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"625","messages":"626","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"627","messages":"628","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"629","messages":"630","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"631","messages":"632","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"633","messages":"634","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"635","messages":"636","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"637","usedDeprecatedRules":"315"},{"filePath":"638","messages":"639","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"640","usedDeprecatedRules":"315"},{"filePath":"641","messages":"642","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"643","usedDeprecatedRules":"315"},{"filePath":"644","messages":"645","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"646","messages":"647","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"648","messages":"649","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"650","usedDeprecatedRules":"315"},{"filePath":"651","messages":"652","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"653","messages":"654","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"655","messages":"656","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"657","usedDeprecatedRules":"315"},{"filePath":"658","messages":"659","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"660","usedDeprecatedRules":"315"},{"filePath":"661","messages":"662","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"665","usedDeprecatedRules":"315"},{"filePath":"666","messages":"667","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"668","messages":"669","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"670","usedDeprecatedRules":"315"},"C:\\Users\\90532\\Desktop\\sss\\src\\index.tsx",[],["671","672","673","674","675"],"C:\\Users\\90532\\Desktop\\sss\\src\\Providers.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\App.tsx",["676","677"],"import React, { useEffect, Suspense, lazy } from 'react'\r\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { ResetCSS } from '@macist-m/robinia-uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport SecondLeaf from 'components/layout/SecondLeaf'\r\nimport { useFetchPublicData } from 'state/hooks'\r\nimport CallOption from 'views/CallOption'\r\nimport LeafContainers from 'components/layout/LeafContainers'\r\nimport GlobalStyle from './style/Global'\r\nimport Menu from './components/Menu'\r\nimport PageLoader from './components/PageLoader'\r\nimport NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\r\n\r\n\r\n// Route-based code splitting\r\n// Only pool is included in the main bundle because of it's the most visited page'\r\nconst Home = lazy(() => import('./views/Home'))\r\nconst Farms = lazy(() => import('./views/Farms'))\r\nconst DelegateFarms = lazy(() => import('./views/DelegateFarm'))\r\nconst ApplyForIfos = lazy(() => import('./views/Ifos/ApplyForIfos'))\r\nconst NotFound = lazy(() => import('./views/NotFound'))\r\n// const Lottery = lazy(() => import('./views/Lottery'))\r\nconst Pools = lazy(() => import('./views/CallOption'))\r\n const Ifos = lazy(() => import('./views/Ifos'))\r\n const HourGlass = lazy(() => import('./views/HourGlass'))\r\n// const Nft = lazy(() => import('./views/Nft'))\r\n\r\n// This config is required for number formating\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nconst App: React.FC = () => {\r\n  const { account, connect } = useWallet()\r\n  useEffect(() => {\r\n    if (!account && window.localStorage.getItem('accountStatus')) {\r\n      connect('injected')\r\n    }\r\n  }, [account, connect])\r\n\r\n  useFetchPublicData()\r\n  return (\r\n\r\n    <Router>\r\n\r\n      <ResetCSS />\r\n      <GlobalStyle />\r\n      \r\n      <Menu>\r\n        <Suspense fallback={<PageLoader />}>\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/stake\">\r\n              <Farms />\r\n            </Route>\r\n            <Route path=\"/calloption\">\r\n              <Pools />\r\n            </Route>\r\n            <Route path=\"/delegatefarm\">\r\n              <DelegateFarms delegateMode />\r\n            </Route>\r\n            <Route path=\"/ifo\">\r\n              <Ifos />\r\n            </Route>\r\n            <Route path=\"/cakePools\">\r\n              <Pools />\r\n            </Route>\r\n            <Route path=\"/hourglass\">\r\n              <HourGlass />\r\n            </Route>\r\n            {/* <Route path=\"/lottery\"> */}\r\n            {/*  <Lottery /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/ifo\"> */}\r\n            {/*  <Ifos /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/nft\"> */}\r\n            {/*  <Nft /> */}\r\n            {/* </Route> */}\r\n            {/* Redirect */}\r\n            {/* <Route path=\"/staking\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/syrup\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* 404 */}\r\n            <Route path=\"/CallOption\">\r\n              <CallOption />\r\n            </Route>\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n        </Suspense>\r\n      </Menu>\r\n      <LeafContainers/>\r\n      <SecondLeaf/>\r\n      <NftGlobalNotification />\r\n    </Router>\r\n\r\n  )\r\n}\r\n\r\nexport default React.memo(App)\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\views\\NotFound.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\style\\Global.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\components\\PageLoader.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\ApplyForIfos.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Nft\\components\\NftGlobalNotification.tsx",["678","679","680","681","682","683","684"],"import React, { useEffect, useRef } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Button, Heading, Modal, useModal } from '@macist-m/robinia-uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\r\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\r\nimport multicall from 'utils/multicall'\r\n\r\ninterface NftYouWonModalProps {\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst ModalContent = styled.div`\r\n  padding: 24px;\r\n  text-align: center;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  text-align: center;\r\n`\r\n\r\nconst NftYouWonModal: React.FC<NftYouWonModalProps> = ({ onDismiss }) => {\r\n  const TranslateString = useI18n()\r\n  return (\r\n    <Modal title={TranslateString(999, 'Congratulations!')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        <img src=\"/images/present.svg\" alt=\"You won present\" style={{ height: '64px', marginBottom: '24px' }} />\r\n        <Heading size=\"lg\" color=\"secondary\">\r\n          {TranslateString(999, 'You won an NFT!')}\r\n        </Heading>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button as=\"a\" href=\"/nft\">\r\n          {TranslateString(999, 'Go to claim NFT')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\n/**\r\n * 1. Checks if nft supply available\r\n * 2. If supply is available check if the user can claim\r\n * 3. If the user can claim show a modal\r\n */\r\nconst NftGlobalNotification = () => {\r\n  const { account } = useWallet()\r\n  const [onPresentBurnModal] = useModal(<NftYouWonModal />)\r\n  const showModal = useRef(() => onPresentBurnModal())\r\n//\r\n  // useEffect(() => {\r\n  //   const checkNftStatus = async () => {\r\n  //     const [totalSupplyDistributedArr, currentDistributedSupplyArr, canClaimArr, hasClaimedArr] = await multicall(\r\n  //       rabbitmintingfarm,\r\n  //       [\r\n  //         { address: RABBIT_MINTING_FARM_ADDRESS, name: 'totalSupplyDistributed' },\r\n  //         { address: RABBIT_MINTING_FARM_ADDRESS, name: 'currentDistributedSupply' },\r\n  //         { address: RABBIT_MINTING_FARM_ADDRESS, name: 'canClaim', params: [account] },\r\n  //         { address: RABBIT_MINTING_FARM_ADDRESS, name: 'hasClaimed', params: [account] },\r\n  //       ],\r\n  //     )\r\n\r\n  //     // TODO: Figure out why these values are coming back as an array\r\n  //     const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\r\n  //     const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\r\n  //     const [canClaim]: [boolean] = canClaimArr\r\n  //     const [hasClaimed]: [boolean] = hasClaimedArr\r\n\r\n  //     if (currentDistributedSupply.lt(totalSupplyDistributed) && canClaim && !hasClaimed) {\r\n  //       showModal.current()\r\n  //     }\r\n  //   }\r\n\r\n  //   if (account && !document.location.href.includes('/nft')) {\r\n  //     checkNftStatus()\r\n  //   }\r\n  // }, [account, showModal])\r\n\r\n  return <div />\r\n}\r\n\r\nexport default NftGlobalNotification\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\state\\hooks.ts",["685","686","687","688"],"import BigNumber from 'bignumber.js'\r\nimport { useEffect, useMemo } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { getAutoAprData } from 'views/Farms/helpers'\r\nimport { BLOCKS_PER_YEAR} from 'config'\r\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync,fetchCakeVaultFees,fetchCakeVaultPublicData,fetchCakeVaultUserData } from './actions'\r\nimport { State, Farm, Pool } from './types'\r\nimport { QuoteToken } from '../config/constants/types'\r\n\r\n\r\nconst ZERO = new BigNumber(0)\r\n\r\nexport const useFetchPublicData = () => {\r\n  const dispatch = useDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    dispatch(fetchCakeVaultPublicData)\r\n    dispatch(fetchFarmsPublicDataAsync())\r\n    dispatch(fetchPoolsPublicDataAsync())\r\n  }, [dispatch, slowRefresh])\r\n}\r\n\r\n// Farms\r\nexport const useFetchCakeVault = (account) => {\r\n  // const { account } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCakeVaultPublicData())\r\n  }, [dispatch, fastRefresh])\r\n\r\n   useEffect(() => {\r\n     dispatch(fetchCakeVaultUserData({ account }))\r\n   }, [dispatch, fastRefresh, account])\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCakeVaultFees())\r\n  }, [dispatch])\r\n}\r\nexport const useFarms = (): Farm[] => {\r\n  const farms = useSelector((state: State) => state.farms.data)\r\n\r\n  return farms\r\n}\r\n\r\nexport const usePoolss = (): Pool[] => {\r\n  const pools = useSelector((state: State) => state.pools.data)\r\n\r\n  return pools;\r\n}\r\nexport const usePoolsWithFarms = (account): Pool[] =>{\r\n  const pools = usePools(account)\r\n  const farms = useFarms()\r\n  const farmsInsideOfPools = []\r\n  farms.forEach((x,index)=>{\r\n     const pool =  pools.find(z => z.nativeFarmId === x.pid)\r\n     if(pool){\r\n       farmsInsideOfPools.push({...x,pool})\r\n      }\r\n  })\r\n\r\n  return farmsInsideOfPools\r\n}\r\nexport const useFarmFromPid = (pid): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\r\n  return farm\r\n}\r\nexport const useAutoFarmApy = (pid): number => {\r\n  const farm = (useFarmFromPid(pid))\r\n  const {\r\n    fees: { performanceFee }\r\n  } = useCakeVault()\r\n\r\n  const cakePrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const EthPrice = usePriceEthBnb()\r\n  const cakeRewardPerBlock = new BigNumber(farm.eggPerBlock || 1)\r\n          .times(new BigNumber(farm.poolWeight))\r\n          .div(new BigNumber(10).pow(18))\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n        // alert(cakeRewardPerBlock)\r\n        let apy = cakePrice.times(cakeRewardPerYear)\r\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n          totalValue = totalValue.times(bnbPrice)\r\n        }\r\n        if (farm.quoteTokenSymbol === QuoteToken.ETH) {\r\n          totalValue = totalValue.times(EthPrice)\r\n        }\r\n\r\n        if (totalValue.comparedTo(0) > 0) {\r\n          apy = apy.div(totalValue)\r\n        }\r\n       const AutoApy = getAutoAprData(apy.times(new BigNumber(100)).toNumber(),performanceFee)\r\n       const apyFinal = AutoApy.apr\r\n  return apyFinal\r\n}\r\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\r\n  return farm\r\n}\r\n\r\nexport const useFarmUser = (pid) => {\r\n  const farm = useFarmFromPid(pid)\r\n\r\n  return {\r\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\r\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\r\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\r\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\r\n  }\r\n}\r\n\r\nexport const usePoolUser = (pid) => {\r\n  useSelector((state: State) => console.log(state))\r\n}\r\n\r\n// Pools\r\n\r\nexport const usePools = (account): Pool[] => {\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchPoolsUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const pools = useSelector((state: State) => state.pools.data)\r\n  return pools\r\n}\r\n\r\nexport const usePoolFromPid = (sousId): Pool => {\r\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\r\n  return pool\r\n}\r\n\r\n// Prices\r\n\r\nexport const usePriceBnbBusd = (): BigNumber => {\r\n  const pid = 3 // BUSD-BNB LP\r\n  const farm = useFarmFromPid(pid)\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\r\n}\r\nexport const usePriceEthBnb = () : BigNumber => {\r\n  // const BnbPrice = usePriceBnbBusd()\r\n  // const pid = 9\r\n  // const farm = useFarmFromPid(pid)\r\n  // const EthPrice = new BigNumber(farm.tokenPriceVsQuote).multipliedBy(BnbPrice)\r\n  // return EthPrice\r\n  return new BigNumber(0)\r\n}\r\nexport const useLpPrice = (pid): BigNumber => {\r\n  const farm = useFarmFromPid(pid)\r\n  const bnbPrice = usePriceBnbBusd();\r\n  const cakePrice = usePriceCakeBusd();\r\n  const ethPrice = usePriceEthBnb()\r\n  let val;\r\n  if(!farm.quoteTokenSymbol){\r\n    return new BigNumber(0)\r\n  }\r\n\r\n  if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n    val =new BigNumber(farm.lpTotalInQuoteToken || 0).times(bnbPrice)\r\n    if(!farm.lpTokenBalanceMC){\r\n      return val\r\n    }\r\n    const x = farm.lpTokenBalanceMC.div(new BigNumber(10).pow(18))\r\n    val = new BigNumber(val).div(x)\r\n  }\r\n  else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n    val = new BigNumber(farm.tokenPriceVsQuote).multipliedBy(cakePrice);\r\n  }else if(farm.quoteTokenSymbol === QuoteToken.ETH){\r\n    val = new BigNumber(farm.tokenPriceVsQuote).multipliedBy(ethPrice)\r\n  }else if(farm.stabilCoinFarm){\r\n    val = farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote).times(2) : ZERO\r\n  }\r\n  return val\r\n}\r\nexport const usePriceBSTEEMBnb = () : BigNumber => {\r\n  const BnbPrice = usePriceBnbBusd()\r\n  const pid = 18\r\n  const farm = useFarmFromPid(pid)\r\n  const BSTEEMPrice = new BigNumber(farm.tokenPriceVsQuote).multipliedBy(BnbPrice)\r\n  return BSTEEMPrice\r\n}\r\nexport const usePriceCakeBusd = (): BigNumber => {\r\n  // const pid = 1 // CAKE-BNB LP\r\n  // const bnbPriceUSD = usePriceBnbBusd()\r\n  // const farm = useFarmFromPid(pid)\r\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\r\n  const pid = 0 // EGG-BUSD LP\r\n  const farm = useFarmFromPid(pid)\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\r\n}\r\n\r\nexport const useRealCakeBusd = (): BigNumber => {\r\n  const pid = 5;\r\n  const farm = useFarmFromPid(pid);\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\r\n}\r\n\r\nexport const usePoolsTotalValue = (): BigNumber => {\r\n    const pools = usePoolss();\r\n    const farms = useFarms();\r\n    const bnbPrice = usePriceBnbBusd();\r\n    const cakePrice = usePriceCakeBusd();\r\n    const ethPrice = usePriceEthBnb()\r\n    const farmsInsideOfPools = []\r\n    farms.forEach((x,index)=>{\r\n       const pool =  pools.find(z => z.nativeFarmId === x.pid)\r\n       if(pool){\r\n         farmsInsideOfPools.push({...x,pool})\r\n        }\r\n    })\r\n\r\n    let value = new BigNumber(0);\r\n    farmsInsideOfPools.forEach(farm =>{\r\n\r\n      let lpPrice ;\r\n      if (farm.lpTotalInQuoteToken || farm.isTokenOnly) {\r\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n        let val =new BigNumber(farm.lpTotalInQuoteToken || 0).times(bnbPrice)\r\n        const x = farm.lpTokenBalanceMC.div(new BigNumber(10).pow(18))\r\n        val = new BigNumber(val).div(x)\r\n        lpPrice = val\r\n      }else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n        lpPrice = new BigNumber(farm.tokenPriceVsQuote).multipliedBy(cakePrice);\r\n      }else if(farm.quoteTokenSymbol === QuoteToken.ETH){\r\n        lpPrice = new BigNumber(farm.tokenPriceVsQuote).multipliedBy(ethPrice)\r\n      }else if(farm.stabilCoinFarm){\r\n        lpPrice = farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote).times(2) : ZERO\r\n      }\r\n      else{\r\n         lpPrice = farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\r\n      }\r\n\r\n      const poolTotalValue = lpPrice.times(farm.pool.totalStaked).div(new BigNumber(10).pow(farm.pool.tokenDecimals))\r\n      value = value.plus(poolTotalValue)\r\n    }\r\n  }\r\n    )\r\n    // for(let i = 0; i<farmsInsideOfPools.length;i++) {\r\n    //   const pool = pools[i];\r\n    //   const nativeFarmId = pool.nativeFarmId\r\n    //   if(pool.stakingTokenName) {\r\n    //     const lpPrice = useLpPrice(nativeFarmId)\r\n    //      const val = lpPrice.times(pool.totalStaked)\r\n    //     // if(pool.stakingTokenName === QuoteToken.CAKE) {\r\n    //     //   val = cakePrice.times(pool.totalStaked).div(new BigNumber(10).pow(pool.tokenDecimals));\r\n    //     // } else if (pool.stakingTokenName === QuoteToken.BNB) {\r\n    //     //   val = bnbPrice.times(pool.totalStaked).div(new BigNumber(10).pow(pool.tokenDecimals));\r\n    //     // } else if (pool.stakingTokenName === QuoteToken.ETH) {\r\n    //     //   val = ethPrice.times(pool.totalStaked).div(new BigNumber(10).pow(pool.tokenDecimals));\r\n    //     // } else {\r\n    //     //   val = pool.totalStaked;\r\n    //     // }\r\n\r\n    //     value = value.plus(val)\r\n    //   }\r\n    // }\r\n\r\n    return value;\r\n}\r\n\r\nexport const useTotalValue = (): BigNumber => {\r\n  const farms = useFarms();\r\n  // const poolTVL = usePoolsTotalValue();\r\n  const bnbPrice = usePriceBnbBusd();\r\n  const cakePrice = usePriceCakeBusd();\r\n  const ethPrice = usePriceEthBnb()\r\n  let value = new BigNumber(0);\r\n  for (let i = 0; i < farms.length; i++) {\r\n    const farm = farms[i]\r\n\r\n    if (farm.lpTotalInQuoteToken || farm.isTokenOnly) {\r\n      let val;\r\n\r\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n        val = (bnbPrice.times(farm.lpTotalInQuoteToken));\r\n      }else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n        val = (cakePrice.times(farm.lpTotalInQuoteToken));\r\n      }else if(farm.quoteTokenSymbol === QuoteToken.ETH){\r\n        val = ethPrice.times(farm.lpTotalInQuoteToken)\r\n      }\r\n      // else if(farm.isTokenOnly){\r\n      //   console.log(farm)\r\n      //   val = cakePrice.times(farm.tokenAmount);\r\n      // }\r\n      else{\r\n        val = (farm.lpTotalInQuoteToken);\r\n      }\r\n\r\n      value = value.plus(val);\r\n    }\r\n  }\r\n\r\n  // value = value.plus(poolTVL);\r\n// console.log(value)\r\n  return value;\r\n}\r\nexport const useCakeVault = () => {\r\n  const {\r\n    totalShares: totalSharesAsString,\r\n    pricePerFullShare: pricePerFullShareAsString,\r\n    totalWisteriaInVault: totalWisteriaInVaultAsString,\r\n    estimatedWisteriaBountyReward: estimatedWisteriaBountyRewardAsString,\r\n    totalPendingWisteriaHarvest: totalPendingWisteriaHarvestAsString,\r\n    fees: { performanceFee, callFee, withdrawalFee, withdrawalFeePeriod },\r\n    tokenTaxRate,\r\n\r\n    userData: {\r\n      isLoading,\r\n      userShares: userSharesAsString,\r\n      wisteriaAtLastUserAction: wisteriaAtLastUserActionAsString,\r\n      lastDepositedTime,\r\n      lastUserActionTime,\r\n    },\r\n  } = useSelector((state: State) => state.farms.cakeVault)\r\n\r\n  const estimatedWisteriaBountyReward = useMemo(() => {\r\n    return new BigNumber(estimatedWisteriaBountyRewardAsString)\r\n  }, [estimatedWisteriaBountyRewardAsString])\r\n\r\n  const totalPendingWisteriaHarvest = useMemo(() => {\r\n    return new BigNumber(totalPendingWisteriaHarvestAsString)\r\n  }, [totalPendingWisteriaHarvestAsString])\r\n\r\n  const totalShares = useMemo(() => {\r\n    return new BigNumber(totalSharesAsString)\r\n  }, [totalSharesAsString])\r\n\r\n  const pricePerFullShare = useMemo(() => {\r\n    return new BigNumber(pricePerFullShareAsString)\r\n  }, [pricePerFullShareAsString])\r\n\r\n  const totalWisteriaInVault = useMemo(() => {\r\n    return new BigNumber(totalWisteriaInVaultAsString)\r\n  }, [totalWisteriaInVaultAsString])\r\n\r\n  const userShares = useMemo(() => {\r\n    return new BigNumber(userSharesAsString)\r\n  }, [userSharesAsString])\r\n\r\n  const wisteriaAtLastUserAction = useMemo(() => {\r\n    return new BigNumber(wisteriaAtLastUserActionAsString)\r\n  }, [wisteriaAtLastUserActionAsString])\r\n\r\n  return {\r\n    totalShares,\r\n    pricePerFullShare,\r\n    totalWisteriaInVault,\r\n    estimatedWisteriaBountyReward,\r\n    totalPendingWisteriaHarvest,\r\n    tokenTaxRate,\r\n    fees: {\r\n      performanceFee,\r\n      callFee,\r\n      withdrawalFee,\r\n      withdrawalFeePeriod,\r\n    },\r\n    userData: {\r\n      isLoading,\r\n      userShares,\r\n      wisteriaAtLastUserAction,\r\n      lastDepositedTime,\r\n      lastUserActionTime,\r\n    },\r\n  }\r\n}\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\index.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\CallOption\\index.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\DelegateFarm\\index.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\index.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\utils\\getRpcUrl.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\index.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\components\\Menu\\index.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\contexts\\RefreshContext.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\contexts\\BlockContext.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\contexts\\ThemeContext.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\contexts\\Localisation\\languageContext.tsx",["689"],"import React, { useState, useEffect } from 'react'\r\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\r\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\r\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\r\n\r\nconst CACHE_KEY = 'pancakeSwapLanguage'\r\n\r\nexport interface LangType {\r\n  code: string\r\n  language: string\r\n}\r\n\r\nexport interface LanguageState {\r\n  selectedLanguage: LangType\r\n  setSelectedLanguage: (langObject: LangType) => void\r\n  translatedLanguage: LangType\r\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\r\n}\r\n\r\nconst LanguageContext = React.createContext({\r\n  selectedLanguage: EN,\r\n  setSelectedLanguage: () => undefined,\r\n  translatedLanguage: EN,\r\n  setTranslatedLanguage: () => undefined,\r\n} as LanguageState)\r\n\r\nconst fileId = 8\r\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\r\nconst stringTranslationsApi = new StringTranslations({\r\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\r\n})\r\n\r\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\r\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\r\n}\r\n\r\nconst LanguageContextProvider = ({ children }) => {\r\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\r\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\r\n  const [translations, setTranslations] = useState<Array<any>>([])\r\n\r\n  const getStoredLang = (storedLangCode: string) => {\r\n    return allLanguages.filter((language) => {\r\n      return language.code === storedLangCode\r\n    })[0]\r\n  }\r\n\r\n  useEffect(() => {\r\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\r\n    if (storedLangCode) {\r\n      const storedLang = getStoredLang(storedLangCode)\r\n      setSelectedLanguage(storedLang)\r\n    } else {\r\n      setSelectedLanguage(EN)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (selectedLanguage) {\r\n      fetch(`./i18n/${selectedLanguage.code}.json`)\r\n        .then((r) => r.json())\r\n        // fetchTranslationsForSelectedLanguage(selectedLanguage)\r\n        .then((translationApiResponse) => {\r\n          if (translationApiResponse.data.length < 1) {\r\n            setTranslations(['error'])\r\n          } else {\r\n            setTranslations(translationApiResponse.data)\r\n          }\r\n        })\r\n        .then(() => setTranslatedLanguage(selectedLanguage))\r\n        .catch((e) => {\r\n          console.error('ERROR')\r\n          console.error(e)\r\n          setTranslations(['error'])\r\n        })\r\n    }\r\n  }, [selectedLanguage, setTranslations])\r\n\r\n  const handleLanguageSelect = (langObject: LangType) => {\r\n    setSelectedLanguage(langObject)\r\n    localStorage.setItem(CACHE_KEY, langObject.code)\r\n  }\r\n\r\n  return (\r\n    <LanguageContext.Provider\r\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\r\n    >\r\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\r\n    </LanguageContext.Provider>\r\n  )\r\n}\r\n\r\nexport { LanguageContext, LanguageContextProvider }\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\components\\layout\\LeafContainers.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\components\\layout\\Page.tsx",["690"],"import React from 'react'\r\n\r\nimport styled from 'styled-components'\r\nimport MainFooter from 'components/Partials/MainFooter'\r\nimport Container from './Container'\r\n\r\nconst PageWrapper = styled(Container)`\r\n  min-height: calc(100vh - 88px);\r\n  padding-top: 16px;\r\n  padding-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-top: 24px;\r\n    padding-bottom: 24px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding-top: 32px;\r\n    padding-bottom: 32px;\r\n  }\r\n`\r\n\r\ntype Props = {\r\n  title?: string,\r\n}\r\n\r\nconst Page: React.FC<Props> = ({ title, children }) => (\r\n  <PageWrapper>\r\n    {children}\r\n    <MainFooter />\r\n  </PageWrapper>\r\n)\r\n\r\nexport default Page\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\components\\Details.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\state\\index.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\state\\actions.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\config\\constants\\types.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\components\\Menu\\config.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\Farms.tsx",["691","692","693","694","695","696","697"],"import React, { useEffect, useCallback, useState } from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport { Image, Heading } from '@macist-m/robinia-uikit'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd, usePriceEthBnb,useFetchCakeVault, useLpPrice } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport FarmCard, { FarmWithStakedValue } from './components/CakeVaultCard/FarmCard'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport Divider from './components/Divider'\r\n\r\nexport interface FarmsProps {\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const EthPrice = usePriceEthBnb()\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { tokenMode } = farmsProps\r\n  const rbsbnblpPrice = useLpPrice(1)\r\n\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n  useFetchCakeVault(account)\r\n  \r\n  const [stakedOnly, setStakedOnly] = useState(false)\r\n\r\n  const activeFarms = farmsLP.filter(\r\n    (farm) =>  farm.isAutoVault,\r\n  )\r\n  const inactiveFarms = farmsLP.filter(\r\n    (farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X' && !farm.delegate,\r\n  )\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) =>\r\n      farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  // /!\\ This function will be removed soon\r\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n  // to retrieve assets prices against USD\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay, removed: boolean) => {\r\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n        //   return farm\r\n        // }\r\n        const cakeRewardPerBlock = new BigNumber(farm.eggPerBlock || 1)\r\n          .times(new BigNumber(farm.poolWeight))\r\n          .div(new BigNumber(10).pow(18))\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n        // alert(cakeRewardPerBlock)\r\n        let apy = cakePrice.times(cakeRewardPerYear)\r\n\r\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\r\n        console.log(totalValue.toNumber())\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n          totalValue = totalValue.times(bnbPrice)\r\n        }\r\n        if (farm.quoteTokenSymbol === QuoteToken.ETH) {\r\n          totalValue = totalValue.times(EthPrice)\r\n        }\r\n\r\n        if (totalValue.comparedTo(0) > 0) {\r\n          apy = apy.div(totalValue)\r\n        }\r\n\r\n        return { ...farm, apy }\r\n      })\r\n      return farmsToDisplayWithAPY.map((farm) => (\r\n        <FarmCard\r\n          key={farm.pid}\r\n          farm={farm}\r\n          removed={removed}\r\n          bnbPrice={bnbPrice}\r\n          cakePrice={cakePrice}\r\n          ethPrice={EthPrice}\r\n          ethereum={ethereum}\r\n          account={account}\r\n\r\n        />\r\n      ))\r\n    },\r\n    [bnbPrice, account, cakePrice, ethereum,EthPrice],\r\n  )\r\n\r\n  return (\r\n    <Page>\r\n      <Heading\r\n        as=\"h1\"\r\n        size=\"xl\"\r\n        color=\"#ffffff\"\r\n        mb=\"50px\"\r\n        style={{ textAlign: 'center' }}\r\n      >\r\n        {tokenMode ? 'Stake Tokens to Earn with Wisteria Pools' : 'Stake Tokens to Earn with Wisteria Farms'}\r\n      </Heading>\r\n      {/* <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        {TranslateString(10000, 'Deposit Fee will be used to buyback EGG')}\r\n      </Heading> */}\r\n     <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly} />\r\n        <Divider />\r\n        <FlexLayout>\r\n         <Route exact path={`${path}`}>\r\n            {stakedOnly\r\n              ? farmsList(stakedOnlyFarms, false)\r\n              : farmsList(activeFarms, false)}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsList([], true)}\r\n          </Route>\r\n        </FlexLayout>\r\n      <div className=\"mb-10\" />\r\n      <div className=\" mb-10\">\r\n        <div className=\"text-center text-white text-3xl leading-10 mb-4\">\r\n          Launch Your Project on Wisteria Now\r\n        </div>\r\n        <div className=\"p-1 flex flex-col md:flex-row items-center justify-around\">\r\n          <div className=\"flex flex-col\">\r\n            <div className=\"p-5 leading-7 text-center text-lg text-gray-200\">\r\n              WisteriaSwap supports multiple blockchains through a cross-chain bridge.\r\n              If you would like to grow with <br/> WisteriaSwap, please feel free to apply for our partnership program.\r\n            </div>\r\n            <div className=\"mx-5 my-2 py-4 rounded-full sm:ml-32 md:ml-52 lg:ml-56  aptbutton w-60 text-center text-white cursor-pointer shadow-lg\">\r\n              Apply to Launch\r\n            </div>\r\n          </div>\r\n          \r\n        </div>\r\n        \r\n      </div>\r\n      <img src=\"/images/fc1.png\" alt=\"project\" style={{marginBottom:'-180px'}} />\r\n\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\views\\CallOption\\CallOption.tsx",["698","699","700","701","702","703","704","705","706","707","708","709","710","711","712","713","714","715","716","717","718","719","720","721","722","723","724","725","726","727","728","729","730","731","732","733"],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\DelegateFarm\\DelegateFarm.tsx",["734","735","736","737","738","739","740","741","742"],"import React, { useEffect, useCallback, useState } from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport { Image, Heading } from '@macist-m/robinia-uikit'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd ,usePriceBSTEEMBnb } from 'state/hooks'\r\nimport {useCustomTokenBalance} from 'hooks/useTokenBalance'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport Divider from './components/Divider'\r\nimport DelegateFarms from '../../config/constants/delegateFarms';\r\n\r\n\r\nexport interface FarmsProps {\r\n  delegateMode?: boolean\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const BSTEEMPrice = usePriceBSTEEMBnb()\r\n  const steemBalance = getBalanceNumber(useCustomTokenBalance(\"0x9Dd2104184a9A8EDb91EfC617908E7AC0a04228d\",\"0x2C875C19E093F446dE65E46473170703486eb0E6\"))\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { delegateMode } = farmsProps\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  // const activeFarms = DelegateFarms.filter(x => x.isActive === true);\r\n   const activeFarms = farmsLP.filter(\r\n     (farm) => farm.delegate === true && farm.multiplier !== '0X',\r\n   )\r\n\r\n  // /!\\ This function will be removed soon\r\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n  // to retrieve assets prices against USD\r\n  // const delegateFarmx = DelegateFarms[0]\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay, removed: boolean) => {\r\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n        //   return farm\r\n        // }\r\n        const cakeRewardPerBlock = new BigNumber(farm.eggPerBlock || 1)\r\n          .times(new BigNumber(farm.poolWeight))\r\n          .div(new BigNumber(10).pow(18))\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n        let apy = cakePrice.times(cakeRewardPerYear)\r\n\r\n        // console.log(steemBalance)\r\n        let totalValue = new BigNumber(steemBalance)\r\n\r\n\r\n        if (farm.delegate) {\r\n          totalValue = totalValue.times(BSTEEMPrice)\r\n        }\r\n        if (totalValue.comparedTo(0) > 0) {\r\n          apy = apy.div(totalValue)\r\n        }\r\n        return {...farm, apy }\r\n      })\r\n      return farmsToDisplayWithAPY.map((farm) => (\r\n        <FarmCard\r\n          key={farm.pid}\r\n          farm={farm}\r\n          removed={removed}\r\n          cakePrice={cakePrice}\r\n          ethereum={ethereum}\r\n          account={account}\r\n          steemBalance={new BigNumber(steemBalance)}\r\n          BSTEEMprice={BSTEEMPrice}\r\n        />\r\n      ))\r\n    },\r\n    [ account, cakePrice, ethereum,BSTEEMPrice,steemBalance],\r\n  )\r\n\r\n  return (\r\n    <Page>\r\n      <Heading\r\n        as=\"h1\"\r\n        size=\"xl\"\r\n        color=\"#aeaeae\"\r\n        mb=\"50px\"\r\n        style={{ textAlign: 'center' }}\r\n      >\r\n        {delegateMode ? 'Stake Tokens to Earn with Robinia Pools' : 'Stake Tokens to Earn with Robinia Farms'}\r\n      </Heading>\r\n      {/* <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        {TranslateString(10000, 'Deposit Fee will be used to buyback EGG')}\r\n      </Heading> */}\r\n      {/* <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly} /> */}\r\n      <div>\r\n        <Divider />\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n             {farmsList(activeFarms, false)}\r\n          </Route>\r\n          <div className=\"rbs-card md:w-4/6 mt-15 py-10\">\r\n        <div className=\"p-0 md:py-5 md:px-10 flex flex-col items-center\">\r\n          <div className=\"text-primary text-2xl font-bold mb-5\">\r\n          SP Delegate Farm Usage and Precautions\r\n          </div>\r\n          <div className=\"text-gray leading-7 text-lg text-gray-500\">\r\n          Documentation will be updated soon.\r\n          </div>\r\n          <div className=\"mx-5 my-5 py-4 rounded-full bg-secondary w-60 text-center text-white cursor-pointer shadow-lg\">\r\n            GO\r\n          </div>\r\n        </div>\r\n      </div>\r\n        </FlexLayout>\r\n      </div>\r\n\r\n      <div className=\"mb-10\" />\r\n      <div className=\"mb-16\" />\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\Home.tsx",["743","744","745","746","747","748"],"import React from 'react'\r\nimport Page from 'components/layout/Page'\r\nimport Socials from 'components/Partials/Socials'\r\nimport Divider from 'views/Farms/components/Divider'\r\nimport TopSocials from 'components/Partials/TopSocial'\r\nimport FarmStakingCard from './components/FarmStakingCard'\r\nimport TopSliderCard from './components/TopSliderCard'\r\nimport CakeStats from './components/CakeStats'\r\nimport TopFarms from './components/TopFarms'\r\nimport Announcements from './components/Announcements'\r\nimport 'slick-carousel/slick/slick.css'\r\nimport 'slick-carousel/slick/slick-theme.css'\r\nimport '../../style/slider-dots.css'\r\nimport TokensCard from './components/TokensCard'\r\nimport OurProducts from './components/OurProducts'\r\nimport Partners from './components/Partners'\r\nimport Sitestat from './components/Sitestat'\r\nimport SlideImage from './components/slideimage'\r\nimport TrendPost from './components/TrendPost'\r\nimport LaunchPools from './components/LaunchPools'\r\nimport Statistics from './components/Statistics'\r\n\r\nconst Home: React.FC = () => {\r\n  return (\r\n    <Page >\r\n    <div >\r\n     \r\n        <div className=\"grid grid-cols-1 sm:grid-cols-1 md:grid-cols-12\">\r\n\r\n          <div className=\"col-span-12 \">\r\n            <TopSocials />\r\n          </div>\r\n          <div className=\"col-span-12 mb-10 sm:col-span-12 md:col-span-12 lg:col-span-6\">\r\n            <TopSliderCard />\r\n          </div>\r\n          <div className=\"col-span-12  sm:col-span-12 md:col-span-12 lg:col-span-6\">\r\n            <CakeStats />\r\n          </div>\r\n\r\n          <div className=\"col-span-12  mb-20\">\r\n            <SlideImage />\r\n          </div>\r\n          <div className=\"col-span-12 sm:col-span-12 md:col-span-12 lg:col-span-6 m-4\">\r\n            <TrendPost />\r\n          </div>\r\n          <div className=\"col-span-12 sm:col-span-12 md:col-span-12 lg:col-span-6 m-4\">\r\n            <Announcements />\r\n          </div>\r\n\r\n          {/* <div className=\"col-span-12  sm:col-span-12 md:col-span-12 lg:col-span-8 lg:col-start-3 m-4\">\r\n            <FarmStakingCard />\r\n          </div> */}\r\n\r\n          <div className=\"col-span-12 mb-10 mt-10 col-start-0\">\r\n            <OurProducts />\r\n          </div>\r\n\r\n          <div className=\"col-span-12  col-start-0\">\r\n          <Divider />\r\n          </div>\r\n\r\n          <div className=\"col-span-12 mb-16 col-start-0\">\r\n            <Partners />\r\n          </div>\r\n          \r\n          <div className=\"col-span-12 mb-16 col-start-0\">\r\n            <Statistics />\r\n          </div>\r\n\r\n        </div>\r\n        </div>\r\n\r\n    </Page>\r\n\r\n  )\r\n}\r\n\r\nexport default Home\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\hooks\\useI18n.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\components\\Hero.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\PastIfo.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\CurrentIfo.tsx",["749","750","751","752","753","754","755","756","757","758","759","760","761","762"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Heading, BaseLayout, Button, LinkExternal, Flex, Image } from '@macist-m/robinia-uikit'\r\nimport { ifosConfig } from 'config/constants'\r\nimport LeafContainers from 'components/layout/LeafContainers'\r\nimport MainFooter from 'components/Partials/MainFooter'\r\nimport useI18n from 'hooks/useI18n'\r\nimport IfoCard from './components/IfoCard'\r\nimport Title from './components/Title'\r\nimport IfoCards from './components/IfoCards'\r\nimport Details from './components/Details'\r\n\r\nconst LaunchIfoCallout = styled(BaseLayout)`\r\n  border-top: 2px solid ${({ theme }) => theme.colors.textSubtle};\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-gap: 32px;\r\n  margin: 0 auto;\r\n  padding: 32px 0;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    grid-template-columns: 1fr 1fr;\r\n  }\r\n`\r\n\r\nconst List = styled.ul`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  margin-bottom: 16px;\r\n\r\n  & > li {\r\n    line-height: 1.4;\r\n    margin-bottom: 8px;\r\n  }\r\n`\r\n\r\n/**\r\n * Note: currently there should be only 1 active IFO at a time\r\n */\r\nconst activeIfo = ifosConfig.find((ifo) => ifo.isActive)\r\n\r\nconst Ifo = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <div>\r\n    {/* <IfoCards isSingle>\r\n        <IfoCard ifo={activeIfo} />\r\n      </IfoCards> */}\r\n\r\n      <div className=\"rbs-card md:w-4/6 mt-15 py-10\">\r\n        <div className=\"p-0 md:py-5 md:px-10 flex flex-col items-center\">\r\n       \r\n          <div className=\"text-white text-2xl font-bold mb-5\">\r\n            Want To Launch Your Own IFO?\r\n          </div>\r\n          <div className=\"text-white leading-7 text-lg \">\r\n            Launch your project with WisteriaSwap, Binance Smart Chain’s fastest growing\r\n            AMM project and liquidity provider, to bring your token directly to the most\r\n            active and rapidly growing community on BSC.\r\n          </div>\r\n          <div className=\"mx-5 my-5 py-4 rounded-full aptbutton w-60 text-center text-white cursor-pointer shadow-lg\">\r\n            Apply to Launch Your IFO\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* Tımeline */}\r\n      <div className=\"relative wrap overflow-hidden p-5 h-full mt-20 px-5 md:px-10 lg:px-20\">\r\n        <img\r\n            src=\"/images/leaf4.png\"\r\n            alt=\"timeline-leafs\"\r\n            className=\" absolute z-1 hidden md:block\"\r\n            style={{left:'15%',top:'15%'}}\r\n          />\r\n        <div className=\"text-center text-white text-2xl font-bold mb-10\">How does it work?</div>\r\n       \r\n        <div className=\"mb-8 flex flex-col md:flex-row justify-between items-center w-full relative\">\r\n          <div className=\"order-1 w-5/12\" />\r\n          <div className=\"z-20 flex items-center order-1 details shadow-xl w-14 h-14 rounded-full md:mb-24  mr-8 \">\r\n            <h1 className=\"mx-auto  font-semibold text-xl text-white\">1</h1> \r\n          </div>\r\n\r\n          <img\r\n            src=\"/images/timeline-leaf.svg\"\r\n            alt=\"timeline-leafs\"\r\n            className=\"h-full absolute z-1 hidden md:block\"\r\n            style={{ left: '46%', top: '26%', marginTop: 29, marginLeft: -18 , minHeight:232 }}\r\n          />\r\n\r\n          <div\r\n            className=\"order-1  rounded-3xl shadow-xl w-full md:w-5/12 lg:mb-16 p-10\"\r\n            style={{\r\n              background: 'rgba(242, 255, 255, 0.25)',\r\n              backdropFilter: 'blur(10px)',\r\n            }}\r\n          >\r\n           \r\n            \r\n            <h3 className=\"mb-3 inline-flex font-bold text-gray-50 text-xl\">\r\n            <img\r\n            src=\"/images/ifo1.svg\"\r\n            alt=\"timeline-leafs\"\r\n            className=\" mr-2 \"\r\n            \r\n          />\r\n              Get Your WST-BNB LPs\r\n            </h3>\r\n            <p className=\"text-md leading-snug tracking-wide text-gray-100 \">\r\n              \r\n              Stake WST-BNB in the liquidity pool to get LP tokens. You’ll spend them\r\n              buy IFO sale tokens\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"mb-8 flex flex-col md:flex-row-reverse justify-between items-center w-full relative\">\r\n          <div className=\"order-1 w-5/12\" />\r\n          <div className=\"z-20 flex items-center order-1 details shadow-xl mr-8 w-14 h-14 rounded-full mt-8 md:mb-12\">\r\n            <h1 className=\"mx-auto font-semibold text-xl text-white\">2</h1>\r\n          </div>\r\n\r\n          <img\r\n            src=\"/images/timeline-leaf.svg\"\r\n            alt=\"timeline-leafs\"\r\n            className=\"h-full absolute z-1 transform rotate-180 mt-3 hidden md:block \"\r\n            style={{ left: '47%', top: '50%', marginLeft: -26 , minHeight:232 }}\r\n          />\r\n\r\n          <div\r\n            className=\"order-2  rounded-3xl shadow-xl w-full md:w-5/12 p-10\"\r\n            style={{\r\n              background: 'rgba(242, 255, 255, 0.25)',\r\n              backdropFilter: 'blur(10px)',\r\n            }}\r\n          >\r\n            <h3 className=\"mb-3 inline-flex font-bold text-gray-100 text-xl\">\r\n            <img\r\n            src=\"/images/ifo2.svg\"\r\n            alt=\"timeline-leafs\"\r\n            className=\" mr-2 \"\r\n            />\r\n              Commit LP Tokens</h3>\r\n            <p className=\"text-md font-medium leading-snug tracking-wide text-gray-100\">\r\n              When the IFO sales are live, you can “commit” your LP tokens to buy the\r\n              tokens being sold. We recommend committing to the Basic Sale first, but you\r\n              can do both if you like.\r\n            </p>\r\n            \r\n          </div>\r\n          <img\r\n            src=\"/images/leaf3.png\"\r\n            alt=\"timeline-leafs\"\r\n            className=\" absolute z-1  hidden md:block lg:block\"\r\n            style={{left:'60%'}}\r\n          />\r\n        </div>\r\n        <img\r\n            src=\"/images/leaf1.png\"\r\n            alt=\"timeline-leafs\"\r\n            className=\" absolute z-1 hidden md:block\"\r\n            style={{left:'15%', bottom:'1%'}}\r\n          />\r\n\r\n        <div className=\"mb-8 flex flex-col md:flex-row justify-between items-center w-full\">\r\n          <div className=\"order-1 w-5/12\" />\r\n          <div className=\"z-20 flex items-center order-1  mr-8 details shadow-xl w-14 h-14 rounded-full sm:mt-0 lg:mt-28  md:mb-12\">\r\n            <h1 className=\"mx-auto font-semibold text-xl text-white\">3</h1>\r\n          </div>\r\n          <div\r\n            className=\"order-3 rounded-3xl shadow-xl w-full md:w-5/12 p-10 mt-20\"\r\n            style={{\r\n              background: 'rgba(242, 255, 255, 0.25)',\r\n              backdropFilter: 'blur(100px)',\r\n            }}\r\n          >\r\n            \r\n            <h3 className=\"mb-3 font-bold inline-flex text-gray-100 text-xl\">\r\n            <img\r\n            src=\"/images/ifo3.svg\"\r\n            alt=\"timeline-leafs\"\r\n            className=\" mr-2 \"\r\n            />\r\n              Claim your tokens and achivement\r\n            </h3>\r\n            <p className=\"text-md font-medium leading-snug tracking-wide text-gray-100\">\r\n              When the IFO sales are live, you can “commit” your LP tokens to buy the\r\n              tokens being sold. We recommend committing to the Basic Sale first, but you\r\n              can do both if you like.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Details */}\r\n      <div className=\"mb-20 mx-1\">\r\n        <Details />\r\n        <img\r\n            src=\"/images/leaf2.png\"\r\n            alt=\"timeline-leafs\"\r\n            className=\" absolute z-1 hidden lg:block \"\r\n            style={{ left: '65%', top: '60%'}}\r\n            />\r\n        \r\n      </div>\r\n      <img\r\n            src=\"/images/ifo4.png\"\r\n            alt=\"timeline-leafs\"\r\n            className=\" relative z-1 hidden md:block \"\r\n            style={{ marginLeft:'220px' , marginBottom:'-120px'}}\r\n            />\r\n<MainFooter/>\r\n<div className='mb-12'> </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Ifo\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\components\\layout\\Container.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\hooks\\useRefresh.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\hooks\\useTheme.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\helpers.tsx",["763","764","765","766"],"import BigNumber from 'bignumber.js'\r\nimport { BIG_TEN } from 'utils/bigNumber'\r\n// import { DeserializedPool } from 'state/types'\r\n// import { getApy } from 'utils/compoundApyHelpers'\r\nimport { getBalanceNumber, getFullDisplayBalance} from 'utils/formatBalance'\r\n\r\nexport const getDecimalAmount = (amount: BigNumber, decimals = 18) => {\r\n    return new BigNumber(amount).times(BIG_TEN.pow(decimals))\r\n  }\r\nexport const convertSharesToCake = (\r\n  shares: BigNumber,\r\n  cakePerFullShare: BigNumber,\r\n  decimals = 18,\r\n  decimalsToRound = 3,\r\n) => {\r\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\r\n  const amountInCake = new BigNumber(shares.multipliedBy(sharePriceNumber))\r\n  const cakeAsNumberBalance = getBalanceNumber(amountInCake, decimals)\r\n  const cakeAsBigNumber = getDecimalAmount(new BigNumber(cakeAsNumberBalance), decimals)\r\n  const cakeAsDisplayBalance = getFullDisplayBalance(amountInCake, decimals)\r\n  return { cakeAsNumberBalance, cakeAsBigNumber, cakeAsDisplayBalance }\r\n}\r\n\r\nexport const convertCakeToShares = (\r\n  cake: BigNumber,\r\n  cakePerFullShare: BigNumber,\r\n  decimals = 18,\r\n  decimalsToRound = 3,\r\n) => {\r\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\r\n  const amountInShares = new BigNumber(cake.dividedBy(sharePriceNumber))\r\n  const sharesAsNumberBalance = getBalanceNumber(amountInShares, decimals)\r\n  const sharesAsBigNumber = getDecimalAmount(new BigNumber(sharesAsNumberBalance), decimals)\r\n  const sharesAsDisplayBalance = getFullDisplayBalance(amountInShares, decimals)\r\n  return { sharesAsNumberBalance, sharesAsBigNumber, sharesAsDisplayBalance }\r\n}\r\n\r\nconst AUTO_VAULT_COMPOUND_FREQUENCY = 24\r\nconst MANUAL_POOL_AUTO_COMPOUND_FREQUENCY = 0\r\n\r\n//  export const getAprData = (pool: DeserializedPool, performanceFee: number) => {\r\n//    const { isAutoVault, apr } = pool\r\n\r\n//     //  Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\r\n//    const autoCompoundFrequency = isAutoVault ? AUTO_VAULT_COMPOUND_FREQUENCY : MANUAL_POOL_AUTO_COMPOUND_FREQUENCY\r\n\r\n//    if (isAutoVault) {\r\n//      const autoApr = getApy(apr, AUTO_VAULT_COMPOUND_FREQUENCY, 365, performanceFee) * 100\r\n//      return { apr: autoApr, autoCompoundFrequency }\r\n//    }\r\n//    return { apr, autoCompoundFrequency }\r\n//  }\r\n export const getAutoAprData = (apr: number, performanceFee: number) => {\r\n\r\n    // console.log(apr)\r\n    // console.log(performanceFee)\r\n   //  Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\r\n    const autoCompoundFrequency = AUTO_VAULT_COMPOUND_FREQUENCY\r\n    const autoApr = getApy(apr, AUTO_VAULT_COMPOUND_FREQUENCY, 365, performanceFee) * 100\r\n    const autoApr1 = getApy(apr, AUTO_VAULT_COMPOUND_FREQUENCY, 1, performanceFee) * 100\r\n    const autoApr7 = getApy(apr, AUTO_VAULT_COMPOUND_FREQUENCY, 7, performanceFee) * 100\r\n    const autoApr30 = getApy(apr, AUTO_VAULT_COMPOUND_FREQUENCY, 30, performanceFee) * 100\r\n    return { apr: autoApr, autoCompoundFrequency ,autoApr1,autoApr7,autoApr30}\r\n\r\n\r\n}\r\nexport const getAutoAprDataWithDay = (apr: number, performanceFee: number,day: number) => {\r\n\r\n  // console.log(apr)\r\n  // console.log(performanceFee)\r\n //  Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\r\n  const autoCompoundFrequency = AUTO_VAULT_COMPOUND_FREQUENCY\r\n  const autoApr = getApy(apr, AUTO_VAULT_COMPOUND_FREQUENCY, day, performanceFee) * 100\r\n  return { apr: autoApr, autoCompoundFrequency }\r\n\r\n\r\n}\r\nexport const getApy = (apr: number, compoundFrequency = 1, days = 365, performanceFee = 0) => {\r\n  const daysAsDecimalOfYear = days / 365\r\n  const aprAsDecimal = apr / 100\r\n\r\n  const timesCompounded = 365 * compoundFrequency\r\n  let apyAsDecimal = (apr / 100) * daysAsDecimalOfYear\r\n  if (timesCompounded > 0) {\r\n    apyAsDecimal = (1 + (aprAsDecimal / timesCompounded)) ** (timesCompounded * daysAsDecimalOfYear) - 1\r\n  }\r\n  if (performanceFee) {\r\n\r\n    const performanceFeeAsDecimal = performanceFee / 10000\r\n    const takenAsPerformanceFee = apyAsDecimal * performanceFeeAsDecimal\r\n    apyAsDecimal -= takenAsPerformanceFee\r\n  }\r\n  if(apyAsDecimal < 0){\r\n    apyAsDecimal*=-1\r\n  }\r\n  return apyAsDecimal\r\n}\r\nexport const getCakeVaultEarnings = (\r\n  account: string,\r\n  cakeAtLastUserAction: BigNumber,\r\n  userShares: BigNumber,\r\n  pricePerFullShare: BigNumber,\r\n  earningTokenPrice: number,\r\n  tokenTaxRate:string,\r\n) => {\r\n  const hasAutoEarnings =\r\n    account && cakeAtLastUserAction && cakeAtLastUserAction.gt(0) && userShares && userShares.gt(0)\r\n  const { cakeAsBigNumber } = convertSharesToCake(userShares, pricePerFullShare)\r\n\r\n  const excludeTax = cakeAtLastUserAction\r\n  // if(new BigNumber(tokenTaxRate).toNumber() > 0){\r\n  //   excludeTax = cakeAtLastUserAction.minus(cakeAtLastUserAction.times(new BigNumber(tokenTaxRate).toNumber()/10000))\r\n  // }\r\n  const autoCakeProfit = cakeAsBigNumber.minus(excludeTax)\r\n  // alert(-autoCakeProfit.gte(0))\r\n  const autoCakeToDisplay = autoCakeProfit.gte(0) ? getBalanceNumber(autoCakeProfit, 18) : 0\r\n\r\n  // console.log(`cakeAsBigNumber:${cakeAsBigNumber}`)\r\n  // console.log(`cakeAtLastUserAction:${cakeAtLastUserAction}`)\r\n  // console.log(`excludeTax:${excludeTax}`)\r\n  // console.log(`userShares:${userShares}`)\r\n  // console.log(`pricePerFullShare:${pricePerFullShare}`)\r\n  // console.log(`earningTokenPrice:${earningTokenPrice}`)\r\n  // console.log(`autoCakeProfit:${autoCakeProfit}`)\r\n\r\n  // console.log(`autoCakeToDisplay:${autoCakeToDisplay}`)\r\n  const autoUsdProfit = autoCakeProfit.times(earningTokenPrice)\r\n\r\n  const autoUsdToDisplay = autoUsdProfit.gte(0) ? getBalanceNumber(autoUsdProfit, 18) : 0\r\n  return { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay ,cakeAsBigNumber}\r\n}\r\n\r\n// export const getPoolBlockInfo = (pool: DeserializedPool, currentBlock: number) => {\r\n//   const { startBlock, endBlock, isFinished } = pool\r\n//   const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock)\r\n//   const blocksUntilStart = Math.max(startBlock - currentBlock, 0)\r\n//   const blocksRemaining = Math.max(endBlock - currentBlock, 0)\r\n//   const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0\r\n//   const blocksToDisplay = hasPoolStarted ? blocksRemaining : blocksUntilStart\r\n//   return { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay }\r\n// }\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\utils\\web3.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\contexts\\Localisation\\translationsContext.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\config\\localisation\\languageCodes.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\utils\\translateTextHelpers.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\components\\IfoTabButtons\\index.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\Divider.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\DelegateFarm\\components\\Divider.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\DelegateFarm\\components\\FarmCard\\FarmCard.tsx",["767","768","769","770"],"import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@macist-m/robinia-uikit'\r\nimport { communityFarms } from 'config/constants'\r\nimport { Farm } from 'state/types'\r\nimport { provider } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport TokenInput from 'components/TokenInput'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n  depositFee? : string\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n  0% {\r\n    background-position: 0% 50%;\r\n  }\r\n  50% {\r\n    background-position: 100% 50%;\r\n  }\r\n  100% {\r\n    background-position: 0% 50%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(\r\n    45deg,\r\n    rgba(255, 0, 0, 1) 0%,\r\n    rgba(255, 154, 0, 1) 10%,\r\n    rgba(208, 222, 33, 1) 20%,\r\n    rgba(79, 220, 74, 1) 30%,\r\n    rgba(63, 218, 216, 1) 40%,\r\n    rgba(47, 201, 226, 1) 50%,\r\n    rgba(28, 127, 238, 1) 60%,\r\n    rgba(95, 21, 242, 1) 70%,\r\n    rgba(186, 12, 248, 1) 80%,\r\n    rgba(251, 7, 217, 1) 90%,\r\n    rgba(255, 0, 0, 1) 100%\r\n  );\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 16px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: rgba(255, 255, 255, 0.4);\r\n  backdrop-filter: blur(40px);\r\n  border-radius: 32px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 25px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  steemBalance?: BigNumber\r\n  BSTEEMprice?: BigNumber\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice ,steemBalance,BSTEEMprice, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n  const farmImage = 'steem'\r\n\r\n   const totalValue: BigNumber = useMemo(() => {\r\n\r\n\r\n\r\n    if (farm.delegate) {\r\n      return BSTEEMprice.times(steemBalance)\r\n    }\r\n     return farm.lpTotalInQuoteToken\r\n   }, [farm.lpTotalInQuoteToken,BSTEEMprice ,steemBalance,farm.delegate])\r\n\r\n   const totalValueFormated = totalValue\r\n     ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n     : '-'\r\n  const lpLabel = \"STEEM POWER\"\r\n  const earnLabel = 'RBS'\r\n  const farmAPY =\r\n    farm.apy &&\r\n    farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\r\n      minimumFractionDigits: 2,\r\n      maximumFractionDigits: 2,\r\n    })\r\nconsole.log(farm.apy.toNumber())\r\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\r\n\r\n  return (\r\n    <FCard>\r\n      {farm.tokenSymbol === 'EGG' && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        risk={risk}\r\n        depositFee={farm.depositFeeBP}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.tokenSymbol}\r\n      />\r\n        {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text color=\"#aeaeae\" bold>\r\n            {TranslateString(352, 'APR')}:\r\n          </Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apy ? (\r\n              <>\r\n                <ApyButton\r\n                  lpLabel={lpLabel}\r\n                  quoteTokenAdresses={quoteTokenAdresses}\r\n                  quoteTokenSymbol={quoteTokenSymbol}\r\n                  tokenAddresses={tokenAddresses}\r\n                  cakePrice={cakePrice}\r\n                  apy={farm.apy}\r\n                />\r\n                {farmAPY}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text color=\"#aeaeae\" bold>\r\n          {TranslateString(318, 'Earn')}:\r\n        </Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text style={{ fontSize: '20px' }} color=\"#aeaeae\">\r\n          {TranslateString(10001, 'Deposit Fee')}:\r\n        </Text>\r\n        <Text bold style={{ fontSize: '20px' }}>\r\n          {farm.depositFee} STEEM\r\n        </Text>\r\n      </Flex>\r\n\r\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          isTokenOnly={farm.isTokenOnly}\r\n          bscScanAddress={\r\n            farm.isTokenOnly\r\n              ? `https://bscscan.com/token/0x9Dd2104184a9A8EDb91EfC617908E7AC0a04228d`\r\n              : `https://bscscan.com/token/0x9Dd2104184a9A8EDb91EfC617908E7AC0a04228d`\r\n          }\r\n          totalValueFormated={totalValueFormated}\r\n          lpLabel={lpLabel}\r\n          quoteTokenAdresses={quoteTokenAdresses}\r\n          quoteTokenSymbol={quoteTokenSymbol}\r\n          tokenAddresses={tokenAddresses}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\components\\slideimage.tsx",["771","772","773","774","775"],"import React, { useEffect, useCallback, useState } from 'react'\r\nimport Slider from 'react-slick'\r\nimport styled from 'styled-components'\r\n\r\nexport interface FarmsProps {\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst SlideImage: React.FC<FarmsProps> = (farmsProps) => {\r\n\r\n\r\n  const sliderSettings = {\r\n    dots: true,\r\n    infinite: false,\r\n    speed: 250,\r\n    slidesToShow: 3,\r\n    slidesToScroll: 1,\r\n    initialSlide: 0,\r\n    arrows: false,\r\n    responsive: [\r\n\r\n        {\r\n        breakpoint: 1140,\r\n        settings: {\r\n          slidesToShow: 2,\r\n          slidesToScroll: 2,\r\n          infinite: true,\r\n          dots: true,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 960,\r\n        settings: {\r\n          slidesToShow: 2,\r\n          slidesToScroll: 2,\r\n          infinite: true,\r\n          dots: true,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 800,\r\n        settings: {\r\n          slidesToShow: 2,\r\n          slidesToScroll: 2,\r\n          infinite: true,\r\n          dots: true,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 600,\r\n        settings: {\r\n          slidesToShow: 1,\r\n          slidesToScroll: 2,\r\n          initialSlide: 2,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 480,\r\n        settings: {\r\n          slidesToShow: 1,\r\n          slidesToScroll: 1,\r\n        },\r\n      },\r\n    ],\r\n  }\r\n\r\n  return (\r\n    <>\r\n\r\n\r\n    <div className=\"grid  grid-cols-1 gap-20\">\r\n    <Slider  {...sliderSettings}>\r\n\r\n         \r\n         \r\n          \r\n          <a href='https://blokfield.gitbook.io/wisteria-swap/create-your-own-defi'>\r\n            <img src=\"/images/slid1.png\" className=\" rounded-3xl\"  width='370' alt='1' />\r\n          </a>\r\n          <a href='https://blokfield.gitbook.io/wisteria-swap/create-your-own-defi'>\r\n            <img src=\"/images/slidd.png\" className=\" rounded-3xl\"  width='370' alt='1' />\r\n          </a>\r\n          <a href='https://blokfield.gitbook.io/wisteria-swap/tokenomics/deflation-model'>\r\n            <img src=\"/images/burn.png\" className=\" rounded-3xl\"  width='370' alt='1' />\r\n          </a>\r\n          <a href='https://blokfield.gitbook.io/wisteria-swap/security/kyc'>\r\n            <img src=\"/images/slide6.png\" className=\" rounded-3xl\"  width='370' alt='1' />\r\n          </a>\r\n\r\n\r\n    </Slider>\r\n\r\n    </div>\r\n\r\n\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SlideImage\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\components\\Announcements.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\components\\Partners.tsx",["776","777","778","779","780","781","782","783","784","785","786","787","788","789","790","791","792","793","794","795","796"],"import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@macist-m/robinia-uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\nimport { usePriceCakeBusd } from '../../../state/hooks'\r\nimport useTokenBalance from '../../../hooks/useTokenBalance'\r\nimport { getCakeAddress } from '../../../utils/addressHelpers'\r\nimport useAllEarnings from '../../../hooks/useAllEarnings'\r\nimport { getBalanceNumber } from '../../../utils/formatBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('/images/egg/2a.png');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst Partners = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWallet()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\r\n  const eggPrice = usePriceCakeBusd().toNumber()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n  const balancesWithValue = farmsWithBalance.filter(\r\n    (balanceType) => balanceType.balance.toNumber() > 0,\r\n  )\r\n\r\n  return (\r\n    <div className=\" h-full  place-items-center text-white grid lg:grid-cols-6 md:grid-cols-2 sm:grid-cols-2 gap-4  \">\r\n      <div className=\"lg:col-span-6  md:col-span-2 sm:col-span-2 text-white text-5xl   py-2  rounded-xl   mt-6\">Partners</div>\r\n\r\n       <a className='pbg' href='https://coinmarketcap.com/'>\r\n        <img className='mt-6 p-4'  src=\"/images/coinmarket.png\" alt=\"rbs-ico\" />\r\n      </a>\r\n      <a className='pbg ' href='https://www.coingecko.com/'>\r\n        <img className='mt-4 p-4'  src=\"/images/coingecko.png\"  alt=\"rbs-ico\" />\r\n      </a>\r\n      <a className='pbg' href='https://honeyfarm.finance/'>\r\n        <img className='mt-4 p-4'  src=\"/images/honeybee.png\"  alt=\"rbs-ico\" />\r\n      </a>\r\n      <a className='pbg' href='https://yanabu.com/'>\r\n        <img className='p-10'  src=\"/images/yanabu1.png\" style={{marginTop:-44}} alt=\"rbs-ico\" />\r\n      </a>\r\n      <a className='pbg' href='https://robiniaswap.com/'>\r\n        <img className='mt-4'  src=\"/images/rbb.png\" alt=\"rbs-ico\" />\r\n      </a>\r\n      <a className='pbg'  href='https://ccgaglobal.com/'>\r\n        <img  className='p-12' src=\"/images/partner6.png\" style={{marginTop:-48}}  alt=\"rbs-ico\" />\r\n      </a> \r\n      \r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Partners\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\components\\CakeStats.tsx",["797","798"],"import React from 'react'\r\nimport Slider from 'react-slick'\r\n\r\nconst TopSliderCard = () => {\r\n  const sliderSettings = {\r\n    dots: true,\r\n    infinite: true,\r\n    slidesToShow: 1,\r\n    slidesToScroll: 1,\r\n    autoplay: false,\r\n    speed: 750,\r\n    autoplaySpeed: 5000,\r\n    arrows: false,\r\n  }\r\n\r\n  return (\r\n    <div >\r\n          <img src=\"/images/image1.png\" alt=\"trend-up\"   />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TopSliderCard\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\components\\TopSliderCard.tsx",["799","800","801","802","803","804","805","806","807","808","809","810","811","812","813","814","815"],"import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Farm } from 'state/types'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport Slider from 'react-slick'\r\nimport { provider } from 'web3-core'\r\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd, useTotalValue,useAutoFarmApy } from 'state/hooks'\r\nimport CardValue from 'views/Home/components/CardValue'\r\nimport { Link } from 'react-router-dom'\r\nimport { Flex, Image ,Text} from '@macist-m/robinia-uikit'\r\nimport Divider from 'views/Farms/components/Divider'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useBurnedBalance, useTotalSupply ,useCustomTokenBalance} from 'hooks/useTokenBalance'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\n\r\n\r\n\r\n\r\nconst TopSliderCard = () => {\r\n  const totalValue = useTotalValue()\r\n\r\n  const apy =useAutoFarmApy(2)\r\n  const wstprice = usePriceCakeBusd()\r\n\r\n  return (\r\n    <div className=\"h-full mt-10  \">\r\n      <div className=\"grid grid-cols-1 gap-6\">\r\n        <div>\r\n          <div className=\"text-white text-6xl mb-8 leading-14\">\r\n            The FIRST <br/> YIELDFARM DEFI\r\n          </div>\r\n          <div className=\"text-pink-200 text-4xl mb-8\">2.0 (PCV) on BSC network.</div>\r\n\r\n        </div>\r\n\r\n        <div className=\"blurred  grid grid-cols-3 gap-8 \">\r\n          <div >\r\n            <div className='text-gray-300 text-center text-sm'>Total Value Locked</div>\r\n\r\n            {totalValue.toNumber() > 0 ? (\r\n\r\n             <div className='statblur'>\r\n             <CardValue\r\n                value={totalValue.toNumber()}\r\n                prefix=\"$\"\r\n                decimals={2}\r\n                fontSize=\"18px\"\r\n              />\r\n              </div>\r\n            ) : (\r\n              <CardValue value={0} prefix=\"$\" decimals={2} fontSize=\"18px\" />\r\n            )}\r\n          </div>\r\n          <div className=' text-gray-300 text-center  text-sm'>\r\n          WST APY\r\n        {!Number.isNaN(apy) ? (\r\n        <div className='statblur'>\r\n\r\n                      <Flex marginLeft={3}>\r\n                      <CardValue\r\n                      fontSize=\"18px\"\r\n                      value={apy}\r\n                      decimals={0}\r\n                    />\r\n\r\n                    <Text fontSize=\"18px\" bold color='primary'>\r\n                    %\r\n                  </Text>\r\n                      </Flex>\r\n                  </div>\r\n\r\n )\r\n                    :(\r\n                    <CardValue\r\n                    fontSize=\"18px\"\r\n                    value={0}\r\n                    decimals={0}\r\n                    prefix=\"%\"\r\n                  />)\r\n        }\r\n\r\n          </div>\r\n          <div className=' text-gray-300 text-center text-sm  '>\r\n          WST Price\r\n          <div className='statblur'>\r\n          <CardValue\r\n                    fontSize=\"18px\"\r\n                    value={wstprice.toNumber()}\r\n                    decimals={3}\r\n                    prefix='$'\r\n                  />\r\n\r\n          </div>\r\n        </div>\r\n        </div>\r\n        \r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TopSliderCard\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\components\\IfoCards.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\components\\Partials\\MainFooter.tsx",["816","817","818","819","820","821","822","823","824","825","826","827","828","829"],"import React from 'react'\r\nimport CardValue from 'views/Home/components/CardValue'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Text ,Flex} from '@macist-m/robinia-uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { useTotalSupply, useBurnedBalance ,useCustomTokenBalance} from 'hooks/useTokenBalance'\r\nimport {useAutoFarmApy} from 'state/hooks'\r\nimport { BLOCKS_PER_YEAR } from 'config'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { QuoteToken } from 'config/constants/types'\r\n\r\nimport {\r\n  useFarms,\r\n  usePriceCakeBusd,\r\n  useTotalValue,\r\n  usePriceBnbBusd,\r\n} from '../../state/hooks'\r\nimport Socials from './Socials'\r\n\r\ndeclare global {\r\n  interface Window {\r\n    ethereum: any\r\n  }\r\n}\r\nconst addToMetamask = function () {\r\n  window.ethereum\r\n    .request({\r\n      method: 'wallet_watchAsset',\r\n      params: {\r\n        type: 'ERC20',\r\n        options: {\r\n          address: '0xaAdFf17d56d80312b392Ced903f3E8dBE5c3ece7',\r\n          symbol: 'WST',\r\n          decimals: 18,\r\n          image: `${window.location.origin}/images/favicons/apple-icon-72x72.png`,\r\n        },\r\n      },\r\n    })\r\n    .then((success) => {\r\n      if (success) {\r\n        console.log('WST successfully added to wallet!')\r\n      } else {\r\n        throw new Error('Something went wrong.')\r\n      }\r\n    })\r\n    .catch(console.error)\r\n}\r\nconst MainFooter = () => {\r\n  const cakePriceUsd = usePriceCakeBusd()\r\n  // const totalValue = useTotalValue()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = useBurnedBalance(getCakeAddress())\r\n  const farms = useFarms()\r\n  const eggPrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const exacutedBalance= useCustomTokenBalance(\"0xaAdFf17d56d80312b392Ced903f3E8dBE5c3ece7\",\"0xf808b408e464FcaA2a28C673ca7F5C16f6e775aB\")\r\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance).minus(exacutedBalance) : new BigNumber(0)\r\n  const cakeSupply = getBalanceNumber(circSupply)\r\n\r\n  const marketCap = eggPrice.times(circSupply)\r\n\r\n  const autoApy = useAutoFarmApy(2)\r\n  let eggPerBlock = 0\r\n  if (farms && farms[0] && farms[0].eggPerBlock) {\r\n    eggPerBlock = new BigNumber(farms[0].eggPerBlock)\r\n      .div(new BigNumber(10).pow(18))\r\n      .toNumber()\r\n  }\r\n  const x = []\r\n  farms.map((farm) => {\r\n    // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n    //   return farm\r\n    // }\r\n    const cakeRewardPerBlock = new BigNumber(farm.eggPerBlock || 1)\r\n      .times(new BigNumber(farm.poolWeight))\r\n      .div(new BigNumber(10).pow(18))\r\n    const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n    let apy = eggPrice.times(cakeRewardPerYear)\r\n\r\n    let totalValuex = new BigNumber(farm.lpTotalInQuoteToken || 0)\r\n\r\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      totalValuex = totalValuex.times(bnbPrice)\r\n    }\r\n\r\n    if (totalValuex.comparedTo(0) > 0) {\r\n      apy = apy.div(totalValuex)\r\n    }\r\n\r\n    x.push(apy)\r\n    return null\r\n  })\r\n  const topAPY = x.reduce(function (accumulatedValue, currentValue) {\r\n    return Math.max(accumulatedValue, currentValue)\r\n  })\r\n\r\n  return (\r\n\r\n      <div className=\"stat-card grid grid-cols-4  gap-12 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-5 text-left text-lg text-white \">\r\n      \r\n      <div className='sm:col-span-2 md:col-span-1'>\r\n      <img  src=\"/images/footerlogo.png\"  alt=\"rbs-ico\" className='mt-10 sm:mr-0' />\r\n      </div>\r\n        <div className=\"grid text-gray-400 grid-cols-1 ml-10\">\r\n          <div className=\"text-white \">About</div>\r\n          <a href=\"https://blokfield.gitbook.io/wisteria-swap/\">Docs</a>\r\n          <a href=\"https://steemit.com/@robinia/posts\">News</a>\r\n          <div>Partners</div>\r\n          <div><a href=\"https://github.com/TechRate/Smart-Contract-Audits/blob/main/December/Wisteria%20Swap.pdf\">Audit</a></div>\r\n          <div> </div>\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-1 text-gray-400\">\r\n          <div className=\"text-white \">Products</div>\r\n          <div><a href=\"/stake\">Stake(3,3)</a></div>\r\n          <div><a href=\"/calloption\">Call Options</a></div>\r\n          <div><a href=\"/ifo\">IFO</a> </div>\r\n          <div> </div>\r\n          <div> </div>\r\n          <div> </div>\r\n        </div>\r\n        <div className=\"grid sm:ml-10 grid-cols-1  text-gray-400\">\r\n          <div className=\"text-white \">Service</div>\r\n          <div>DAO</div>\r\n          <a href=\"https://bridge.robiniaswap.com/\">Bridge </a>\r\n          <div> </div>\r\n          <div> </div>\r\n          <div> </div>\r\n          <div> </div>\r\n          <div> </div>\r\n          <div> </div>\r\n          <div> </div>\r\n          <div> </div>\r\n        </div>\r\n        <div className=\"grid grid-cols-1\">\r\n          Community\r\n          <div className=\"mr-10\">\r\n            <Socials />\r\n          </div>\r\n          <div> </div>\r\n          <div> </div>\r\n          <div> </div>\r\n          <div> </div>\r\n          <div> </div>\r\n          <div> </div>\r\n          <div> </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MainFooter\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\CakeVaultCard\\FarmCard.tsx",["830","831","832","833","834","835"],"import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@macist-m/robinia-uikit'\r\nimport { BLOCKS_PER_YEAR} from 'config'\r\nimport { Farm } from 'state/types'\r\nimport { provider } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { fetchPublicVaultData } from 'state/farms/fetchVaultPublic'\r\nimport { getBalanceNumber} from 'utils/formatBalance'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport { getAutoAprData } from 'views/Farms/helpers'\r\nimport cardBg from './kartbg.svg'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport EstimateButton from './EstimateButton'\r\nimport ApyButton from '../FarmCard/ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n  0% {\r\n    background-position: 0% 50%;\r\n  }\r\n  50% {\r\n    background-position: 100% 50%;\r\n  }\r\n  100% {\r\n    background-position: 0% 50%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(\r\n    45deg,\r\n    rgba(255, 0, 0, 1) 0%,\r\n    rgba(255, 154, 0, 1) 10%,\r\n    rgba(208, 222, 33, 1) 20%,\r\n    rgba(79, 220, 74, 1) 30%,\r\n    rgba(63, 218, 216, 1) 40%,\r\n    rgba(47, 201, 226, 1) 50%,\r\n    rgba(28, 127, 238, 1) 60%,\r\n    rgba(95, 21, 242, 1) 70%,\r\n    rgba(186, 12, 248, 1) 80%,\r\n    rgba(251, 7, 217, 1) 90%,\r\n    rgba(255, 0, 0, 1) 100%\r\n  );\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 6s linear infinite;\r\n  border-radius: 16px;\r\n  filter: blur(0px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\n\r\nconst FCardSolo = styled.div`\r\n  background: rgba(255, 255, 255,0.2);\r\n  margin-top:70px;\r\n  backdrop-filter:blur(10px);\r\n  padding: 30px;\r\n  margin-bottom:20px;\r\n  border:solid rgba(255, 255, 255,0.1) 2px;\r\n  border-radius:16px;\r\n`\r\nconst Divider = styled.div`\r\n  background-color: rgba(255,255,255,0.1);\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  ethPrice?: BigNumber\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice,ethPrice ,bnbPrice, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n  // if(farm.isAutoVault){\r\n\r\n  // }\r\n  fetchPublicVaultData()\r\n  const {\r\n    userData: { userShares, isLoading: isVaultUserDataLoading ,wisteriaAtLastUserAction, lastUserActionTime},\r\n    fees: { performanceFee },\r\n    totalWisteriaInVault,\r\n    pricePerFullShare,\r\n    totalPendingWisteriaHarvest,\r\n    tokenTaxRate,\r\n  } = useCakeVault()\r\n  const accountHasSharesStaked = userShares && userShares.gt(0)\r\n  // alert(accountHasSharesStaked)\r\n  const isLoading = !farm.userData || isVaultUserDataLoading\r\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\r\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n  // console.log(`totalPendingWisteriaHarvest:${totalPendingWisteriaHarvest}`)\r\n\r\n  const vaultData = {\r\n    userShares,\r\n    wisteriaAtLastUserAction,\r\n    lastUserActionTime,\r\n    pricePerFullShare,\r\n    tokenTaxRate,\r\n  }\r\n\r\n  const farmImage = farm.isTokenOnly\r\n    ? farm.tokenSymbol.toLowerCase()\r\n    : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\r\n\r\n  const totalValue: BigNumber = useMemo(() => {\r\n    //   if(farm.isTokenOnly){\r\n\r\n    //    return cakePrice.times(farm.lpTotalInQuoteToken)\r\n    //  }\r\n    if (!farm.lpTotalInQuoteToken) {\r\n      return null\r\n    }\r\n    if(farm.isAutoVault){\r\n      return cakePrice.times(getBalanceNumber(totalWisteriaInVault, 18))\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n      return cakePrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.ETH) {\r\n      return ethPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    // if(farm.isTokenOnly){\r\n\r\n    //   return bnbPrice.times(farm.lpTotalInQuoteToken)\r\n    // }\r\n    return farm.lpTotalInQuoteToken\r\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol,ethPrice,farm.isAutoVault,totalWisteriaInVault])\r\n  // console.log(performanceFeeAsDecimal)\r\n  const totalValueFormated = totalValue\r\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 2 })}`\r\n    : '-'\r\n\r\n  const lpLabel =(farm.isAutoVault) ? \"Auto WST\" : farm.lpSymbol\r\n  const earnLabel = 'WST'\r\n  const farmAPY =\r\n    farm.apy &&\r\n    farm.apy.times(100).toNumber().toLocaleString(undefined, {\r\n      minimumFractionDigits: 2,\r\n      maximumFractionDigits: 2,\r\n    })\r\n    console.log(`APR: ${farmAPY}`)\r\n    // farm.isAutoVault ?\r\n    // (farm.apy.times(new BigNumber(100)).toNumber()*performanceFeeAsDecimal).toLocaleString(undefined, {\r\n    //   minimumFractionDigits: 2,\r\n    //   maximumFractionDigits: 2,\r\n    // })\r\n    // :\r\n  const cakeRewardPerBlock = new BigNumber(farm.eggPerBlock || 1)\r\n    .times(new BigNumber(farm.poolWeight).minus(new BigNumber(0.1)))\r\n    .div(new BigNumber(10).pow(18))\r\n  const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\r\n  const AutoApr = getAutoAprData(farm.apy.times(new BigNumber(100)).toNumber(),performanceFee)\r\n  const AutoAprAsPerchantage = AutoApr.apr.toLocaleString(\"ko-KR\", {\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0,\r\n  })\r\n  const AutoAprAsPerchantage1 = AutoApr.autoApr1.toLocaleString(\"ko-KR\", {\r\n    minimumFractionDigits: 3,\r\n    maximumFractionDigits: 3,\r\n  })\r\n  const AutoAprAsPerchantage2 = AutoApr.autoApr7.toLocaleString(\"ko-KR\", {\r\n    minimumFractionDigits: 3,\r\n    maximumFractionDigits: 3,\r\n  })\r\n  const AutoAprAsPerchantage3 = AutoApr.autoApr30.toLocaleString(\"ko-KR\", {\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0,\r\n  })\r\n\r\n\r\n  return (\r\n    <FCardSolo>\r\n      {farm.tokenSymbol === 'xxxxx' && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        risk={risk}\r\n        depositFee={farm.depositFeeBP}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.tokenSymbol}\r\n        isAutoVault={farm.isAutoVault}\r\n      />\r\n      {!removed && (\r\n        <>\r\n                <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n                <Text color=\"#fff\" bold>\r\n                {TranslateString(351, 'APY')}\r\n                </Text>\r\n                <Text bold style={{ display: 'flex', alignItems: 'center' ,justifyContent:'flex-end',textAlign:'right'}}>\r\n                {farm.apy ? (\r\n\r\n                <> {farm.isAutoVault ? null :\r\n                <EstimateButton\r\n                lpLabel={earnLabel}\r\n                cakePrice={cakePrice}\r\n                apy={farm.apy}\r\n                cakeRewardPerYear={cakeRewardPerYear}\r\n                totalValue={totalValue}\r\n                />}\r\n\r\n                {AutoAprAsPerchantage}%\r\n                </>\r\n                ) : (\r\n                <Skeleton height={24} width={80} />\r\n                )}\r\n                </Text>\r\n                </Flex>\r\n                <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n                <Text color=\"#fff\" bold>\r\n                {TranslateString(351, 'Daily')}\r\n                </Text>\r\n                <Text bold style={{ display: 'flex', alignItems: 'center' ,justifyContent:'flex-end',textAlign:'right'}}>\r\n                {farm.apy ? (\r\n\r\n                  <> {farm.isAutoVault ? null :\r\n                  <ApyButton\r\n                    lpLabel={lpLabel}\r\n                    quoteTokenAdresses={quoteTokenAdresses}\r\n                    quoteTokenSymbol={quoteTokenSymbol}\r\n                    tokenAddresses={tokenAddresses}\r\n                    cakePrice={cakePrice}\r\n                    apy={farm.apy}\r\n                  />}\r\n\r\n                  {AutoAprAsPerchantage1}%\r\n                  </>\r\n                ) : (\r\n                  <Skeleton height={24} width={80} />\r\n                )}\r\n                </Text>\r\n               </Flex>\r\n                <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n                    <Text color=\"#fff\" bold>\r\n                    {TranslateString(351, '7 days')}\r\n                    </Text>\r\n                    <Text bold style={{ display: 'flex', alignItems: 'center' ,justifyContent:'flex-end',textAlign:'right'}}>\r\n                    {farm.apy ? (\r\n\r\n                      <> {farm.isAutoVault ? null :\r\n                      <ApyButton\r\n                        lpLabel={lpLabel}\r\n                        quoteTokenAdresses={quoteTokenAdresses}\r\n                        quoteTokenSymbol={quoteTokenSymbol}\r\n                        tokenAddresses={tokenAddresses}\r\n                        cakePrice={cakePrice}\r\n                        apy={farm.apy}\r\n                      />}\r\n\r\n                      {AutoAprAsPerchantage2}%\r\n                      </>\r\n                    ) : (\r\n                      <Skeleton height={24} width={80} />\r\n                    )}\r\n                    </Text>\r\n                </Flex>\r\n                </>\r\n      )}\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text color=\"#fff\" bold>\r\n          {TranslateString(318, 'Earn')}:\r\n        </Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text color=\"#fff\" bold>\r\n           WST Price:\r\n        </Text>\r\n      <Text bold>{cakePrice.toNumber().toFixed(3)}$</Text>\r\n      </Flex>\r\n      \r\n      <Flex justifyContent=\"space-between\">\r\n        <Text style={{ fontSize: '20px' }} color=\"#fff\">\r\n          {(farm.isAutoVault) ?\r\n          TranslateString(10007, 'Performance Fee')\r\n          :\r\n          TranslateString(10001, 'Deposit Fee')\r\n          }\r\n\r\n        </Text>\r\n        <Text bold style={{ fontSize: '20px' }}>\r\n          {(farm.isAutoVault) ?\r\n          performanceFeeAsDecimal\r\n          :\r\n          farm.depositFeeBP / 100\r\n          }\r\n          %\r\n        </Text>\r\n      </Flex>\r\n      <CardActionsContainer vaultData={vaultData} farm={farm} ethereum={ethereum} account={account} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          isTokenOnly={farm.isTokenOnly}\r\n          bscScanAddress={\r\n            farm.isTokenOnly\r\n              ? `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n              : `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n          }\r\n          totalValueFormated={totalValueFormated}\r\n          lpLabel={lpLabel}\r\n          quoteTokenAdresses={quoteTokenAdresses}\r\n          quoteTokenSymbol={quoteTokenSymbol}\r\n          tokenAddresses={tokenAddresses}\r\n          apr={farmAPY}\r\n          cakePrice={cakePrice}\r\n          apy={farm.apy}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCardSolo>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\config\\index.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\state\\pools\\index.ts",["836"],"/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking, fetchPoolsDepositFees, fetchPoolsWithdrawalFees } from './fetchPools'\r\nimport {\r\n  fetchPoolsAllowance,\r\n  fetchUserBalances,\r\n  fetchUserStakeBalances,\r\n  fetchUserPendingRewards,\r\n} from './fetchPoolsUser'\r\nimport { PoolsState, Pool } from '../types'\r\n\r\nconst initialState: PoolsState = { data: [...poolsConfig] }\r\n\r\nexport const PoolsSlice = createSlice({\r\n  name: 'Pools',\r\n  initialState,\r\n  reducers: {\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\r\n  // const blockLimits = await fetchPoolsBlockLimits()\r\n  const totalStakings = await fetchPoolsTotalStatking()\r\n  const depositFees = await fetchPoolsDepositFees()\r\n  const withdrawalFees = await fetchPoolsWithdrawalFees()\r\n\r\n  const liveData = poolsConfig.map((pool) => {\r\n    // const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\r\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\r\n    const depositFee = depositFees.find((entry) => entry.sousId === pool.sousId)\r\n    const withdrawFee = withdrawalFees.find((entry) => entry.sousId === pool.sousId)\r\n    // console.log('Public fect pools *******')\r\n    // console.log(withdrawFee)\r\n    // console.log(withdrawalFees)\r\n    return {\r\n      // ...blockLimit,\r\n      ...totalStaking,\r\n      ...depositFee,\r\n      ...withdrawFee\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(liveData))\r\n}\r\n\r\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n\r\n  const stakingTokenBalances = await fetchUserBalances(account)\r\n\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n\r\n\r\n  const userData = poolsConfig.map((pool) => ({\r\n    sousId: pool.sousId,\r\n    allowance: allowances[pool.sousId],\r\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n    stakedBalance: stakedBalances[pool.sousId],\r\n    pendingReward: pendingRewards[pool.sousId],\r\n  }))\r\n\r\n  dispatch(setPoolsUserData(userData))\r\n}\r\n\r\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\r\n}\r\n\r\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const tokenBalances = await fetchUserBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\r\n}\r\n\r\nexport default PoolsSlice.reducer\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\state\\farms\\index.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\utils\\formatBalance.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\hooks\\useTokenBalance.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\components\\Partials\\TopSocial.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\hooks\\useContract.ts",["837"],"import { useEffect, useState } from 'react'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { getMasterChefAddress, getCakeAddress, getLotteryAddress, getLotteryTicketAddress, getDelegateContractAddress ,getCakeVaultAddress, getLockedSaleAddress, getRbsTokenAddress, getBusdAddress} from 'utils/addressHelpers'\r\nimport { poolsConfig } from 'config/constants'\r\nimport { PoolCategory } from 'config/constants/types'\r\nimport ifo from 'config/abi/ifo.json'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\r\nimport pancakeRabbits from 'config/abi/pancakeRabbits.json'\r\nimport lottery from 'config/abi/lottery.json'\r\nimport lotteryTicket from 'config/abi/lotteryNft.json'\r\nimport masterChef from 'config/abi/masterchef.json'\r\nimport delegate from 'config/abi/delegate.json'\r\nimport sousChef from 'config/abi/sousChef.json'\r\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\r\nimport delegateFarm from 'config/abi/delegateFarm.json'\r\nimport lPdelegateFarm from 'config/abi/lPdelegateFarm.json'\r\nimport lockedsale from 'config/abi/lockedsale.json'\r\nimport cakeVault from 'config/abi/cakeVault.json'\r\n\r\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\r\n  const web3 = useWeb3()\r\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\r\n\r\n  useEffect(() => {\r\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\r\n  }, [abi, address, contractOptions, web3])\r\n\r\n  return contract\r\n}\r\n\r\n/**\r\n * Helper hooks to get specific contracts (by ABI)\r\n */\r\n\r\nexport const useIfoContract = (address: string) => {\r\n  const ifoAbi = (ifo as unknown) as AbiItem\r\n  return useContract(ifoAbi, address)\r\n}\r\n\r\nexport const useERC20 = (address: string) => {\r\n  const erc20Abi = (erc20 as unknown) as AbiItem\r\n  return useContract(erc20Abi, address)\r\n}\r\n\r\nexport const useCake = () => {\r\n  return useERC20(getCakeAddress())\r\n}\r\n\r\nexport const useRabbitMintingFarm = (address: string) => {\r\n  const rabbitMintingFarmAbi = (rabbitmintingfarm as unknown) as AbiItem\r\n  return useContract(rabbitMintingFarmAbi, address)\r\n}\r\n\r\nexport const usePancakeRabbits = (address: string) => {\r\n  const pancakeRabbitsAbi = (pancakeRabbits as unknown) as AbiItem\r\n  return useContract(pancakeRabbitsAbi, address)\r\n}\r\n\r\nexport const useLottery = () => {\r\n  const abi = (lottery as unknown) as AbiItem\r\n  return useContract(abi, getLotteryAddress())\r\n}\r\n\r\nexport const useLotteryTicket = () => {\r\n  const abi = (lotteryTicket as unknown) as AbiItem\r\n  return useContract(abi, getLotteryTicketAddress())\r\n}\r\n\r\nexport const useMasterchef = () => {\r\n  const abi = (masterChef as unknown) as AbiItem\r\n  return useContract(abi, getMasterChefAddress())\r\n}\r\n\r\nexport const useDelegateContract = () => {\r\n  const abi = (delegate as unknown) as AbiItem\r\n  return useContract(abi, getDelegateContractAddress())\r\n}\r\n\r\nexport const useSousChef = (id) => {\r\n  const config = poolsConfig.find((pool) => pool.sousId === id)\r\n  const rawAbi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\r\n  const abi = (rawAbi as unknown) as AbiItem\r\n  return useContract(abi, config.contractAddress[process.env.REACT_APP_CHAIN_ID])\r\n}\r\n\r\nexport const useDelegateFarmContract = (address: string) => {\r\n  const delegateFarmAbi = (delegateFarm as unknown) as AbiItem\r\n  return useContract(delegateFarmAbi, address)\r\n}\r\nexport const useLpDelegateFarmContract = (address: string) => {\r\n  const lPdelegateFarmAbi = (lPdelegateFarm as unknown) as AbiItem\r\n  return useContract(lPdelegateFarmAbi, address)\r\n}\r\nexport const useCakeVaultContract = () => {\r\n  const cakeVaultAbi = (cakeVault as unknown) as AbiItem\r\n  return useContract(cakeVaultAbi, getCakeVaultAddress())\r\n}\r\nexport const useLockedSale = (address : string) => {\r\n  const abi = (lockedsale as unknown) as AbiItem\r\n  return useContract(abi, getLockedSaleAddress())\r\n}\r\n\r\n\r\nexport const useRbs = () => {\r\n  return useERC20(getRbsTokenAddress())\r\n}\r\nexport const useBusd = () => {\r\n  return useERC20(getBusdAddress())\r\n}\r\n\r\nexport default useContract\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\utils\\addressHelpers.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\hooks\\useAllEarnings.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\components\\IfoCard\\index.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\components\\layout\\Flex.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\components\\FarmingCard.tsx",["838","839","840","841","842","843","844"],"import React, { useMemo, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Farm } from 'state/types'\r\nimport { provider } from 'web3-core'\r\nimport { Image } from '@macist-m/robinia-uikit'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport Divider from 'views/Farms/components/Divider'\r\nimport CardValue from './CardValue'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst FarmingCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\r\n  const farmImage = farm.isTokenOnly\r\n    ? farm.tokenSymbol.toLowerCase()\r\n    : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\r\n\r\n  const farmAPY =\r\n    farm.apy &&\r\n    farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\r\n      minimumFractionDigits: 2,\r\n      maximumFractionDigits: 2,\r\n    })\r\n\r\n  const totalValue: BigNumber = useMemo(() => {\r\n    if (!farm.lpTotalInQuoteToken) {\r\n      return null\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n      return cakePrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    return farm.lpTotalInQuoteToken\r\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\r\n\r\n  const totalValueFormated = totalValue\r\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  return (\r\n    <div className=\"grid grid-cols-3 sm:gap-10 md:gap-24  lg:gap-20 \">\r\n       <div className = \"grid grid-cols-2\">\r\n       <Image\r\n        src={`/images/farms/${farmImage}.png`}\r\n        alt={farmImage}\r\n        width={55}\r\n        height={55}\r\n        marginTop=\"5px\"\r\n        marginBottom=\"15px\"\r\n      />\r\n       <div className=\"text-white mb-4\">{farm.lpSymbol}</div>\r\n\r\n       </div>\r\n    \r\n\r\n        <div className=\"grid-cols-1\">\r\n        APR\r\n            <div className=\"text-primary font-bold text-lg\">{farmAPY}% </div>\r\n        </div>\r\n      <Link className=\"bg-white sm:mr-12 px-3 py-3 w-28 h-10 rounded-xl text-center text-purple-900 cursor-pointer hover:opacity-75 \" to=\"/farms\">\r\n       Start Farm\r\n      </Link>\r\n          \r\n        </div>\r\n    \r\n    \r\n    \r\n  )\r\n}\r\n\r\nexport default FarmingCard\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\views\\DelegateFarm\\components\\FarmCard\\ApyButton.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\DelegateFarm\\components\\FarmCard\\CardActionsContainer.tsx",["845","846","847","848","849","850","851","852","853","854","855","856","857","858","859","860","861","862","863","864","865","866","867","868","869","870"],"import React, { useMemo, useState, useCallback, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { provider } from 'web3-core'\r\nimport { getContract } from 'utils/erc20'\r\nimport { Button, Flex, Text, Heading } from '@macist-m/robinia-uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport TokenInput from 'components/TokenInput'\r\nimport Input from 'components/Input'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\nimport { sendTransaction, toSteem, sendDelegate, getDelegateContract, fetchDelegateUserStaked } from '../../../../utils/steemUtils';\r\nimport { getDelegateContractAddress } from '../../../../utils/addressHelpers';\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n  delegateAddress? : string\r\n  depositFee? : any\r\n}\r\n\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedDelegate, setRequestedDelegate] = useState(false)\r\n  const [sync,setSync] = useState(false);\r\n  const [staked,setStaked] = useState(0);\r\n  const [harvest,setHarvest] = useState(0);\r\n  const [delegateAmount, setDelegateAmount] = useState(0);\r\n  const steem = (window as any).steem_keychain\r\n  const earning = 0;\r\n  const contract = useMemo(() => {\r\n    return getDelegateContract(getDelegateContractAddress());\r\n  },[])\r\n  async function updateStaked() {\r\n    if(account){\r\n      try {\r\n        const x = await contract.methods.userInfo(account).call();\r\n\r\n        const val = x.amount / 1e18\r\n        setStaked(val)\r\n        } catch (ex) {\r\n          console.error(ex)\r\n        }\r\n    }\r\n\r\n\r\n  }\r\n\r\n  async function updateHarvest() {\r\n    if(account){\r\n      try {\r\n        const x = await contract.methods.pendingReward(account).call();\r\n        console.log(x);\r\n        const val = x / 1e18;\r\n        setHarvest(val);\r\n      } catch(ex) {\r\n        console.error(ex)\r\n      }\r\n    }\r\n\r\n  }\r\n  useEffect(() => {\r\n    updateStaked()\r\n    updateHarvest()\r\n  })\r\n\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      try {\r\n      setDelegateAmount(parseFloat(e.currentTarget.value))\r\n      } catch (ex) {\r\n        setDelegateAmount(0)\r\n      }\r\n\r\n    },\r\n    [setDelegateAmount],\r\n  )\r\n\r\n  const delegate = async () => {\r\n    try {\r\n      setRequestedDelegate(true);\r\n      const depositFee = 5;\r\n      console.log('delegate')\r\n      const steemVal = toSteem(depositFee);\r\n      if(!steem && !account) {\r\n        console.error(\"Wallet or steem key chain is not installed\");\r\n        return;\r\n      }\r\n      const delVal = toSteem(delegateAmount)\r\n      if(delegateAmount === 0) {\r\n        setRequestedDelegate(false)\r\n        return;\r\n      }\r\n      const result:any = await sendTransaction(steemVal,farm.delegateAddress,account,steem);\r\n      // const result:any = await sendDelegate('inven.cu02',2,farm.delegateAddress,steem);\r\n      const message = result.message;\r\n      const data = result.data;\r\n      const success = result.success;\r\n\r\n      if(success) {\r\n        // delegate gönder\r\n        console.log('delegation gönderimi')\r\n        const username = result.data.username;\r\n\r\n        console.log(`Delegation amount : ${delVal}`)\r\n        const resultDelegate:any = await sendDelegate(username,delVal,farm.delegateAddress,steem);\r\n        console.log('delegate result');\r\n        console.log(resultDelegate);\r\n        setRequestedDelegate(false)\r\n      } else {\r\n        console.error(message);\r\n        setRequestedDelegate(false)\r\n        // hata gönderilebilir\r\n      }\r\n      console.log(result)\r\n      setRequestedDelegate(false)\r\n    } catch (ex) {\r\n      console.error(ex)\r\n    }\r\n  }\r\n\r\n  const redirectSteemKeychain = () => {\r\n    if((window as any).steem_keychain) {\r\n      // refresh\r\n\r\n    } else {\r\n      window.open(\"https://chrome.google.com/webstore/detail/steem-keychain/lkcjlnjfpbikmcmbachjpdbijejflpcm\")\r\n    }\r\n  }\r\n\r\n  const renderApprovalOrStakeButton = () => (\r\n      <Button mt=\"8px\" fullWidth disabled={requestedDelegate} onClick={delegate}>\r\n        {TranslateString(999, 'Stake Delegate')}\r\n      </Button>\r\n    )\r\n\r\n  const renderButton = () => {\r\n    if(!account) {\r\n      return (\r\n        <UnlockButton mt=\"8px\" fullWidth />\r\n      )\r\n    }\r\n    if(!steem) {\r\n      return (\r\n      <Button mt=\"8px\" fullWidth onClick={redirectSteemKeychain}> Install Steem Keychain </Button>\r\n      )\r\n\r\n    }\r\n      return (\r\n        <Button mt=\"8px\" fullWidth disabled={requestedDelegate} onClick={delegate}>\r\n        {TranslateString(999, 'Stake Delegate')}\r\n      </Button>\r\n      )\r\n\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\r\n          WST\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earning={harvest} account={account} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {farm.lpSymbol}\r\n        </Text>\r\n\r\n        <Text bold textTransform=\"uppercase\" color=\"contrast\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Staked')}\r\n        </Text>\r\n\r\n      </Flex>\r\n      <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n            <Heading color='text-disabled'>{staked}</Heading>\r\n      </Flex>\r\n\r\n      <Input\r\n        value={delegateAmount.toString()}\r\n        onChange={handleChange}\r\n\r\n      />\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Keychain is required to use SP Delegate Farm.')}\r\n        </Text>\r\n\r\n      {renderButton()}\r\n\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\views\\DelegateFarm\\components\\FarmCard\\CardHeading.tsx",["871","872","873","874","875","876","877"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@macist-m/robinia-uikit'\r\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  risk?: number\r\n  depositFee?: number\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 0.25rem;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  risk,\r\n  farmImage,\r\n  tokenSymbol,\r\n  depositFee,\r\n}) => {\r\n  console.log(farmImage)\r\n\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={80} height={80} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {/* {depositFee === 0 ? <NoFeeTag /> : null} */}\r\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\r\n          {/* <RiskTag risk={risk} /> */}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\views\\DelegateFarm\\components\\FarmCard\\DetailsSection.tsx",["878","879","880","881"],"import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Link, LinkExternal } from '@macist-m/robinia-uikit'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Address } from 'config/constants/types'\r\n\r\nexport interface ExpandableSectionProps {\r\n  isTokenOnly?: boolean\r\n  bscScanAddress?: string\r\n  removed?: boolean\r\n  totalValueFormated?: string\r\n  lpLabel?: string\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  text-decoration: none;\r\n  font-weight: normal;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    padding-left: 4px;\r\n    height: 18px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  isTokenOnly,\r\n  bscScanAddress,\r\n  removed,\r\n  totalValueFormated,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n\r\n  return (\r\n    <Wrapper>\r\n      {/* <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(316, 'Stake')}:</Text>\r\n        <StyledLinkExternal\r\n          href={\r\n            isTokenOnly\r\n              ? `https://pancakeswap.finance/swap/0x382d36e85178f2d3fd84e336d4e1d442fce78e8e`\r\n              : `https://exchange.goosedefi.com/#/add/${liquidityUrlPathParts}`\r\n          }\r\n        >\r\n          {lpLabel}\r\n        </StyledLinkExternal>\r\n      </Flex> */}\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\r\n          <Text>{totalValueFormated}</Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"flex-start\">\r\n        <Link external href={bscScanAddress} bold={false}>\r\n          {TranslateString(356, 'View on BscScan')}\r\n        </Link>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\FarmTabButtons\\index.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\components\\ExpandableSectionButton\\ClaimButton.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\CakeVaultCard\\ApyButton.tsx",[],["882","883","884","885","886"],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\CakeVaultCard\\CardHeading.tsx",["887","888","889"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@macist-m/robinia-uikit'\r\nimport { AutoStaking, CommunityTag, CoreTag, NoFeeTag, RiskTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  risk?: number\r\n  depositFee?: number\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n  isAutoVault?:boolean\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 0.25rem;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  farmImage,\r\n  tokenSymbol,\r\n  depositFee,\r\n  isAutoVault,\r\n}) => {\r\n\r\n\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={80} height={80} ml=\"-1vh\" />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"16px\">{lpLabel}</Heading>\r\n        {(isAutoVault) ?\r\n        <AutoStaking/> :\r\n        <Flex justifyContent=\"center\">\r\n        {depositFee === 0 ? <NoFeeTag /> : null}\r\n        {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\r\n        {/* <RiskTag risk={risk} /> */}\r\n        <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n      </Flex>\r\n        }\r\n\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\CakeVaultCard\\CardActionsContainer.tsx",["890","891","892"],"import React, { useMemo, useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { provider } from 'web3-core'\r\nimport { getContract } from 'utils/erc20'\r\nimport { Button, Flex, Text } from '@macist-m/robinia-uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser ,usePriceCakeBusd } from 'state/hooks'\r\nimport { getCakeVaultEarnings } from 'views/Farms/helpers'\r\nimport useI18n from 'hooks/useI18n'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useApprove ,useVaultApprove ,useCheckVaultApprovalStatus} from 'hooks/useApprove'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\r\n\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  ethereum?: provider\r\n  account?: string\r\n  vaultData?:any\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account ,vaultData }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\r\n\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\r\n\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay,cakeAsBigNumber } = getCakeVaultEarnings(\r\n    account,\r\n    vaultData.wisteriaAtLastUserAction,\r\n    vaultData.userShares,\r\n    vaultData.pricePerFullShare,\r\n    cakePriceBusd.toNumber(),\r\n    vaultData.tokenTaxRate,\r\n  )\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const lpContract = useMemo(() => {\r\n    if (isTokenOnly) {\r\n      return getContract(ethereum as provider, tokenAddress)\r\n    }\r\n    return getContract(ethereum as provider, lpAddress)\r\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n  const { handleVaultApprove } = useVaultApprove()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n  const vaultApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await handleVaultApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [handleVaultApprove])\r\n  const renderApprovalOrStakeButton = () => {\r\n    if(farm.isAutoVault){\r\n      return isVaultApproved ? (\r\n        <StakeAction\r\n          stakedBalance={cakeAsBigNumber}\r\n          tokenBalance={tokenBalance}\r\n          tokenName={lpName}\r\n          pid={pid}\r\n          depositFeeBP={depositFeeBP}\r\n          isAutoVault={farm.isAutoVault}\r\n          pricePerFullShare={vaultData.pricePerFullShare}\r\n          userShares={vaultData.userShares}\r\n        />\r\n      ) : (\r\n        <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={(farm.isAutoVault) ? vaultApprove :handleApprove}>\r\n          {TranslateString(999, 'Approve Contract')}\r\n        </Button>\r\n      )\r\n    }\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={lpName}\r\n        pid={pid}\r\n        depositFeeBP={depositFeeBP}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={(farm.isAutoVault) ? vaultApprove :handleApprove}>\r\n        {TranslateString(999, 'Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"16px\" pr=\"3px\">\r\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\r\n          WST\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"16px\">\r\n          {TranslateString(999, 'Earned')}\r\n        </Text>\r\n\r\n      </Flex>\r\n      {(farm.isAutoVault) ?\r\n       <div style={{minHeight:\"50px\"}}>\r\n       <Flex>\r\n       {(hasAutoEarnings) &&\r\n       <Text bold color=\"primary\" fontSize=\"21px\" pr=\"3px\">\r\n        {autoCakeToDisplay} WST\r\n       </Text>\r\n       }\r\n       </Flex>\r\n\r\n       <UnstakingFeeCountdownRow/>\r\n\r\n       </div>\r\n      :\r\n      <>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Staked')}\r\n        </Text>\r\n      </Flex>\r\n      </>\r\n      }\r\n\r\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\CakeVaultCard\\DetailsSection.tsx",["893","894","895"],"import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Link, LinkExternal } from '@macist-m/robinia-uikit'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Address } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface ExpandableSectionProps {\r\n  isTokenOnly?: boolean\r\n  bscScanAddress?: string\r\n  removed?: boolean\r\n  totalValueFormated?: string\r\n  lpLabel?: string\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n  apr?:string\r\n  cakePrice?:BigNumber\r\n  apy?:any\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  text-decoration: none;\r\n  font-weight: normal;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    padding-left: 4px;\r\n    height: 18px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  isTokenOnly,\r\n  bscScanAddress,\r\n  removed,\r\n  totalValueFormated,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  apr,\r\n  cakePrice,\r\n  apy\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(316, 'Stake')}:</Text>\r\n        <StyledLinkExternal\r\n          href={\r\n            isTokenOnly\r\n              ? `https://pancakeswap.finance/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n              : `https://pancakeswap.finance/add/${liquidityUrlPathParts}`\r\n          }\r\n        >\r\n          {lpLabel}\r\n        </StyledLinkExternal>\r\n      </Flex>\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\r\n          <Text>{totalValueFormated}</Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"flex-start\">\r\n        <Link external href={bscScanAddress} bold={false}>\r\n          {TranslateString(356, 'View on BscScan')}\r\n        </Link>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(352, 'APR')}:</Text>\r\n        <Flex alignItems=\"center\">\r\n       {/* <ApyButton\r\n                lpLabel={lpLabel}\r\n                quoteTokenAdresses={quoteTokenAdresses}\r\n                quoteTokenSymbol={quoteTokenSymbol}\r\n                tokenAddresses={tokenAddresses}\r\n                cakePrice={cakePrice}\r\n                apy={apy}\r\n              /> */}\r\n        <Text>{apr}%</Text>\r\n        </Flex>\r\n\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\state\\farms\\fetchVaultPublic.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\state\\farms\\fetchVaultUser.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\state\\farms\\fetchFarmUser.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\state\\farms\\fetchFarms.ts",["896"],"import BigNumber from 'bignumber.js'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { QuoteToken } from '../../config/constants/types'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nconst fetchFarms = async () => {\r\n\r\n  const data = await Promise.all(\r\n    farmsConfig.map(async (farmConfig) => {\r\n      // if(farmConfig.isAutoVault){\r\n      //   return {\r\n      //    farmConfig\r\n      //   }\r\n      // }\r\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\r\n      const calls = [\r\n        // Balance of token in the LP contract\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of quote token on LP contract\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of LP tokens in the master chef contract\r\n        {\r\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\r\n          name: 'balanceOf',\r\n          params: [getMasterChefAddress()],\r\n        },\r\n        // Total supply of LP tokens\r\n        {\r\n          address: lpAdress,\r\n          name: 'totalSupply',\r\n        },\r\n        // Token decimals\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n        // Quote token decimals\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n      ]\r\n\r\n      const [\r\n        tokenBalanceLP,\r\n        quoteTokenBlanceLP,\r\n        lpTokenBalanceMC,\r\n        lpTotalSupply,\r\n        tokenDecimals,\r\n        quoteTokenDecimals,\r\n      ] = await multicall(erc20, calls)\r\n\r\n      let tokenAmount\r\n      let lpTotalInQuoteToken\r\n      let tokenPriceVsQuote\r\n      if (farmConfig.isTokenOnly) {\r\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals))\r\n        if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\r\n          tokenPriceVsQuote = new BigNumber(1)\r\n        } else {\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\r\n        }\r\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote)\r\n      } else {\r\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\r\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n        // Total value in staking in quote token value\r\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(18))\r\n          .times(new BigNumber(2))\r\n          .times(lpTokenRatio)\r\n\r\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\r\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\r\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n          .times(lpTokenRatio)\r\n\r\n        if (tokenAmount.comparedTo(0) > 0) {\r\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount)\r\n        } else {\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\r\n        }\r\n      }\r\n\r\n      const [info, totalAllocPoint, eggPerBlock] = await multicall(masterchefABI, [\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'poolInfo',\r\n          params: [farmConfig.pid],\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'totalAllocPoint',\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'wisteriaSwapPerBlock',\r\n        },\r\n      ])\r\n\r\n      const allocPoint = new BigNumber(info.allocPoint._hex)\r\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\r\n      console.log(`poolWeight:${poolWeight.toNumber()}`)\r\n\r\n      return {\r\n        ...farmConfig,\r\n        tokenAmount: tokenAmount.toJSON(),\r\n        // quoteTokenAmount: quoteTokenAmount,\r\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\r\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\r\n        poolWeight: poolWeight.toNumber(),\r\n        totalAllocPoint : new BigNumber(totalAllocPoint),\r\n        multiplier: `${allocPoint.div(100).toString()}X`,\r\n        depositFeeBP: info.depositFeeBP,\r\n        eggPerBlock: new BigNumber(eggPerBlock).toNumber(),\r\n        lpTokenBalanceMC: new BigNumber(lpTokenBalanceMC)\r\n      }\r\n    }),\r\n  )\r\n  return data\r\n}\r\n\r\nexport default fetchFarms\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\state\\pools\\fetchPoolsUser.ts",["897","898"],"import { AbiItem } from 'web3-utils'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\r\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\r\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\r\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\r\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\r\nconst web3 = getWeb3()\r\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\r\n\r\nexport const fetchPoolsAllowance = async (account) => {\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'allowance',\r\n    params: [account, p.contractAddress[CHAIN_ID]],\r\n  }))\r\n\r\n  const allowances = await multicall(erc20ABI, calls)\r\n  return nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const fetchUserBalances = async (account) => {\r\n  // Non BNB pools\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'balanceOf',\r\n    params: [account],\r\n  }))\r\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\r\n  const tokenBalances = nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  // BNB pools\r\n  const bnbBalance = await web3.eth.getBalance(account)\r\n  const bnbBalances = bnbPools.reduce(\r\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  return { ...tokenBalances, ...bnbBalances }\r\n}\r\n\r\nexport const fetchUserStakeBalances = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'userInfo',\r\n    params: [account],\r\n  }))\r\n  const userInfo = await multicall(sousChefABI, calls)\r\n  const stakedBalances = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\r\n\r\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\r\n}\r\n\r\nexport const fetchUserDelegateFarmStakeBalances = async (account) => {\r\n  console.log(nonMasterPools)\r\n}\r\n\r\nexport const fetchUserPendingRewards = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'pendingReward',\r\n    params: [account],\r\n  }))\r\n\r\n  const res = await multicall(sousChefABI, calls)\r\n\r\n  const pendingRewards = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const pendingReward = await masterChefContract.methods.pendingWisteria('0', account).call()\r\n\r\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\r\n}\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\state\\pools\\fetchPools.ts",["899","900","901","902"],"import poolsConfig from 'config/constants/pools'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport wbnbABI from 'config/abi/weth.json'\r\nimport delegateFarmAbi from 'config/abi/delegateFarm.json'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport multicall from 'utils/multicall'\r\nimport { getWbnbAddress } from 'utils/addressHelpers'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const fetchPoolsBlockLimits = async () => {\r\n  const poolsWithEnd = poolsConfig.filter((p) => p.sousId !== 0)\r\n  const callsStartBlock = poolsWithEnd.map((poolConfig) => {\r\n    return {\r\n      address: poolConfig.contractAddress[CHAIN_ID],\r\n      name: 'startBlock',\r\n    }\r\n  })\r\n  const callsEndBlock = poolsWithEnd.map((poolConfig) => {\r\n    return {\r\n      address: poolConfig.contractAddress[CHAIN_ID],\r\n      name: 'bonusEndBlock',\r\n    }\r\n  })\r\n\r\n  const starts = await multicall(sousChefABI, callsStartBlock)\r\n  const ends = await multicall(sousChefABI, callsEndBlock)\r\n\r\n  return poolsWithEnd.map((cakePoolConfig, index) => {\r\n    const startBlock = starts[index]\r\n    const endBlock = ends[index]\r\n    return {\r\n      sousId: cakePoolConfig.sousId,\r\n      startBlock: new BigNumber(startBlock).toJSON(),\r\n      endBlock: new BigNumber(endBlock).toJSON(),\r\n    }\r\n  })\r\n}\r\n\r\nexport const fetchPoolsTotalStatking = async () => {\r\n  const nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\r\n  const bnbPool = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\r\n  /*\r\n  const callsNonBnbPools = nonBnbPools.map((poolConfig) => {\r\n    return {\r\n      address: poolConfig.stakingTokenAddress,\r\n      name: 'balanceOf',\r\n      params: [poolConfig.contractAddress[CHAIN_ID]],\r\n    }\r\n  })\r\n\r\n  const callsBnbPools = bnbPool.map((poolConfig) => {\r\n    return {\r\n      address: getWbnbAddress(),\r\n      name: 'balanceOf',\r\n      params: [poolConfig.contractAddress[CHAIN_ID]],\r\n    }\r\n  }) */\r\n  const callsNonBnbPools = nonBnbPools.map((poolConfig) => {\r\n    return {\r\n      address: poolConfig.contractAddress[CHAIN_ID],\r\n      name : 'totalStakedAmount',\r\n      params: []\r\n    }\r\n  })\r\n  const nonBnbPoolsTotalStaked = await multicall(delegateFarmAbi, callsNonBnbPools)\r\n  // const bnbPoolsTotalStaked = await multicall(wbnbABI, callsBnbPools)\r\n\r\n  return [\r\n    ...nonBnbPools.map((p, index) => ({\r\n      sousId: p.sousId,\r\n      totalStaked: new BigNumber(nonBnbPoolsTotalStaked[index]).toJSON(),\r\n    })),\r\n    /*\r\n    ...bnbPool.map((p, index) => ({\r\n      sousId: p.sousId,\r\n      totalStaked: new BigNumber(bnbPoolsTotalStaked[index]).toJSON(),\r\n    })), */\r\n  ]\r\n}\r\n\r\nexport const fetchPoolsDepositFees = async () => {\r\n  const pools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\r\n\r\n  const callsPools = pools.map((poolConfig) => {\r\n    return {\r\n      address : poolConfig.contractAddress[CHAIN_ID],\r\n      name : 'depositFeeBP',\r\n      params : []\r\n    }\r\n  })\r\n\r\n  const poolCalls = await multicall(delegateFarmAbi,callsPools);\r\n  return [\r\n    ...pools.map((p,index) => ({\r\n      sousId : p.sousId,\r\n      depositFee : new BigNumber(poolCalls[index]).toJSON()\r\n    }))\r\n  ]\r\n}\r\n\r\nexport const fetchPoolsWithdrawalFees = async () => {\r\n  const pools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\r\n\r\n  const callsPools = pools.map((poolConfig) => {\r\n    return {\r\n      address : poolConfig.contractAddress[CHAIN_ID],\r\n      name : 'getWithdrawalFeeLevels',\r\n      params : []\r\n    }\r\n  })\r\n\r\n  const poolCalls = await multicall(delegateFarmAbi,callsPools);\r\n\r\n  return [\r\n    ...pools.map((p,index) => ({\r\n      sousId : p.sousId,\r\n      withdrawalFeeLevels : poolCalls[index]\r\n    }))\r\n  ]\r\n}\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\config\\constants\\index.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\hooks\\useFarmsWithBalance.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\components\\TokenInput\\index.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\utils\\steemUtils.ts",["903","904","905","906","907","908"],"import delegate from 'config/abi/delegate.json'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport { getDelegateContractAddress } from 'utils/addressHelpers'\r\nimport DelegateFarms from 'config/constants/delegateFarms'\r\nimport BigNumber from 'bignumber.js'\r\nimport multicall from 'utils/multicall'\r\nimport { getContract, getWeb3 } from 'utils/web3';\r\n\r\nexport async function sendTransaction(amount,dest,bsc,keychain) {\r\n    return new Promise((resolve,reject) => {\r\n        keychain.requestTransfer('',dest,amount,`fee for ${bsc}`,'STEEM',function(res) {\r\n            resolve(res)\r\n        },false)\r\n    })\r\n}\r\n\r\nexport async function sendDelegate(from,amount,dest,keychain) {\r\n    return new Promise((resolve,reject) => {\r\n        keychain.requestDelegation(from,dest,amount,'SP',function(res) {\r\n            // console.log(res)\r\n            resolve(res)\r\n        })\r\n    })\r\n}\r\n\r\nexport function toSteem(amount) {\r\n    return `${amount.toFixed(3).replace(',','.')}`\r\n}\r\n\r\nexport function getDelegateContract(address) {\r\n        const contract = getContract(delegate,address);\r\n        return contract;\r\n}\r\nexport const harvest = async (account: string) => {\r\n    const web3 = getWeb3();\r\n    const contract = new web3.eth.Contract((delegate as unknown) as AbiItem,getDelegateContractAddress())\r\n    // const masterChefAdress = getDelegateContractAddress()\r\n    // const contract = getDelegateContract(masterChefAdress)\r\n    await contract.methods.harvest().send({from : account})\r\n}\r\n\r\nexport const fetchDelegateUserStaked = async (account: string) => {\r\n  const masterChefAdress = getDelegateContractAddress()\r\n\r\n  const calls = DelegateFarms.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'userInfo',\r\n      params: [account],\r\n    }\r\n  })\r\n\r\n  const rawStakedBalances = await multicall(delegate, calls)\r\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\r\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\r\n  })\r\n  return parsedStakedBalances\r\n}\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\components\\CardValue.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\components\\IfoCard\\IfoCardContribute.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\DelegateFarm\\components\\FarmCard\\HarvestAction.tsx",["909","910","911","912","913","914","915","916","917","918"],"import React, { useState, useMemo } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@macist-m/robinia-uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useHarvestDelegate } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getContract, getWeb3 } from 'utils/web3';\r\nimport styled from 'styled-components'\r\nimport useStake from '../../../../hooks/useStake'\r\nimport { getDelegateContract, harvest} from '../../../../utils/steemUtils';\r\nimport { getDelegateContractAddress } from '../../../../utils/addressHelpers';\r\n\r\ninterface FarmCardActionsProps {\r\n  earning?: number\r\n  pid?: number\r\n  account?: string\r\n}\r\n\r\nconst BalanceAndCompound = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n`\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earning, pid, account }) => {\r\n  const TranslateString = useI18n()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const contract = useMemo(() => {\r\n    return getDelegateContract(getDelegateContractAddress());\r\n  },[])\r\n  const rawEarningsBalance = earning\r\n    const { onReward } = useHarvestDelegate()\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading  color='text-disabled'>{displayBalance}</Heading>\r\n      <BalanceAndCompound>\r\n        <Button\r\n          disabled={rawEarningsBalance === 0}\r\n          onClick={async () => {\r\n            \r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n        >\r\n          {TranslateString(999, 'Harvest')}\r\n        </Button>\r\n      </BalanceAndCompound>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\views\\DelegateFarm\\components\\FarmCard\\ApyCalculatorModal.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\config\\constants\\farms.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\config\\constants\\pools.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\CakeVaultCard\\ApyCalculatorModal.tsx",["919","920"],"import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex } from '@macist-m/robinia-uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\r\nimport { Address } from 'config/constants/types'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst GridItem = styled.div`\r\n  margin-bottom: '10px';\r\n`\r\n\r\nconst Description = styled(Text)`\r\n  max-width: 320px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  apy,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\r\n  console.log(farmApy)\r\n  console.log(cakePrice.toNumber())\r\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\r\n\r\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\r\n\r\n  return (\r\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'Timeframe')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'ROI')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'WST per $1000')}\r\n          </Text>\r\n        </GridItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>1d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>7d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>30d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem>\r\n          <Text>365d(APY)</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Description fontSize=\"12px\" color=\"textSubtle\">\r\n        {TranslateString(\r\n          999,\r\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n        )}\r\n      </Description>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\r\n          {TranslateString(999, 'Get')} {lpLabel}\r\n        </LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\CakeVaultCard\\UnstakingFeeCountdownRow.tsx",["921"],"import React from 'react'\r\nimport { Flex, Text,} from '@macist-m/robinia-uikit'\r\n// import { useWeb3React } from '@web3-react/core'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useWithdrawalFeeTimer from 'views/Farms/hooks/useWithdrawalFeeTimer'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport WithdrawalFeeTimer from './WithdrawalFeeTimer'\r\n\r\n\r\ninterface UnstakingFeeCountdownRowProps {\r\n  isTableVariant?: boolean\r\n}\r\n\r\nconst UnstakingFeeCountdownRow: React.FC<UnstakingFeeCountdownRowProps> = ({ isTableVariant }) => {\r\n  const { account } = useWallet()\r\n  const {\r\n    userData: { lastDepositedTime, userShares },\r\n    fees: { withdrawalFee, withdrawalFeePeriod },\r\n  } = useCakeVault()\r\n  const feeAsDecimal = withdrawalFee / 100 || '-'\r\n\r\n\r\n  const { secondsRemaining, hasUnstakingFee } = useWithdrawalFeeTimer(\r\n    parseInt(lastDepositedTime, 10),\r\n    userShares,\r\n    withdrawalFeePeriod,\r\n  )\r\n\r\n  // The user has made a deposit, but has no fee\r\n  const noFeeToPay = lastDepositedTime && !hasUnstakingFee && userShares.gt(0)\r\n\r\n  // Show the timer if a user is connected, has deposited, and has an unstaking fee\r\n  const shouldShowTimer = account && lastDepositedTime && hasUnstakingFee\r\n\r\n  const getRowText = () => {\r\n    if (noFeeToPay) {\r\n      return 'Unstaking Fee'\r\n    }\r\n    if (shouldShowTimer) {\r\n      return 'unstaking fee until'\r\n    }\r\n    return 'unstaking fee if withdrawn within 72h'\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <Flex\r\n      alignItems='center'\r\n      justifyContent=\"space-between\"\r\n      flexDirection='row'\r\n    >\r\n      <Text>{noFeeToPay ? '0' : feeAsDecimal}% {getRowText()}</Text>\r\n      {(shouldShowTimer) &&\r\n        <WithdrawalFeeTimer secondsRemaining={secondsRemaining} />\r\n    }\r\n    </Flex>\r\n\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UnstakingFeeCountdownRow\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\CakeVaultCard\\HarvestAction.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\CakeVaultCard\\StakeAction.tsx",["922"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal,Text } from '@macist-m/robinia-uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useStake,{ useVaultStake } from 'hooks/useStake'\r\nimport {usePriceCakeBusd} from 'state/hooks'\r\nimport useUnstake,{useVaultUnstake} from 'hooks/useUnstake'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  depositFeeBP?: number\r\n  isAutoVault?:boolean\r\n  pricePerFullShare?:any\r\n  userShares?:any\r\n}\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP ,isAutoVault ,pricePerFullShare,userShares}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n  const { handleVaultStake } = useVaultStake()\r\n  const { handleVaultUnstake } = useVaultUnstake()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const cakePriceUsd = usePriceCakeBusd()\r\n\r\n  const displayBalance = rawStakedBalance.toLocaleString()\r\n  const stakedUSDValue = rawStakedBalance*cakePriceUsd.toNumber()\r\n  if(isAutoVault){\r\n    console.log(stakedBalance.toNumber())\r\n  }\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={(isAutoVault) ? handleVaultStake :onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal userShares={userShares} pricePerFullShare={pricePerFullShare} isAutoVault={isAutoVault} max={stakedBalance} onConfirm={(isAutoVault) ? handleVaultUnstake :onUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return rawStakedBalance === 0 ? (\r\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" />\r\n        </IconButton>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\r\n          <AddIcon color=\"primary\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex alignItems=\"center\">\r\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>\r\n      <Flex alignItems=\"center\">\r\n      {displayBalance}\r\n      {rawStakedBalance !== 0 ?\r\n      <Text fontSize='14px' color='white'> ({stakedUSDValue.toLocaleString()} $)</Text>\r\n      : null}\r\n\r\n        </Flex>\r\n      </Heading>\r\n      {(isAutoVault) &&\r\n      <Text marginLeft={1} color=\"white\" bold fontSize='14px'>compounding</Text>\r\n      }\r\n      </Flex>\r\n\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\config\\constants\\ifo.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\utils\\erc20.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\components\\ExpandableSectionButton\\index.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\config\\constants\\contracts.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\utils\\getLiquidityUrlPathParts.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\components\\TokenInput\\TokenInput.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\components\\UnlockButton.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\components\\IfoCard\\ContributeModal.tsx",["923","924"],"import React, { useState } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Modal, Button, Flex, LinkExternal } from '@macist-m/robinia-uikit'\r\nimport BalanceInput from 'components/Input/BalanceInput'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface Props {\r\n  currency: string\r\n  contract: any\r\n  currencyAddress: string\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst ContributeModal: React.FC<Props> = ({ currency, contract, currencyAddress, onDismiss }) => {\r\n  const [value, setValue] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWallet()\r\n  const balance = getFullDisplayBalance(useTokenBalance(currencyAddress))\r\n console.log(currencyAddress)\r\n console.log(currency)\r\n  return (\r\n    <Modal title={`Contribute ${currency}`} onDismiss={onDismiss}>\r\n      <BalanceInput\r\n        value={value}\r\n        onChange={(e) => setValue(e.currentTarget.value)}\r\n        symbol={currency}\r\n        max={balance}\r\n        onSelectMax={() => setValue(balance.toString())}\r\n      />\r\n      <Flex justifyContent=\"space-between\" mb=\"24px\">\r\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss} mr=\"8px\">\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          fullWidth\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await contract.methods\r\n              .deposit(new BigNumber(value).times(new BigNumber(10).pow(18)).toString())\r\n              .send({ from: account })\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          Confirm\r\n        </Button>\r\n      </Flex>\r\n      <LinkExternal\r\n        href=\"https://pancakeswap.finance/add/0x5cd1105f075edadc90f5bae07ce01627541ebe99/BNB\"\r\n        style={{ margin: 'auto' }}\r\n      >\r\n        {`Get ${currency}`}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ContributeModal\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\utils\\multicall.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\utils\\bigNumber.ts",["925"],"import BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\n\r\nexport const BIG_ZERO = new BigNumber(0)\r\nexport const BIG_ONE = new BigNumber(1)\r\nexport const BIG_NINE = new BigNumber(9)\r\nexport const BIG_TEN = new BigNumber(10)\r\n\r\n// export const ethersToSerializedBigNumber = (ethersBn: ethers.BigNumber): SerializedBigNumber =>\r\n//   ethersToBigNumber(ethersBn).toJSON()\r\n\r\n// export const ethersToBigNumber = (ethersBn: ethers.BigNumber): BigNumber => new BigNumber(ethersBn.toString())\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\components\\Tags.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\components\\IfoCard\\LabelButton.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\hooks\\useStake.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\CakeVaultCard\\WithdrawalFeeTimer.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\WithdrawModal.tsx",["926"],"import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@macist-m/robinia-uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport{ convertCakeToShares,getDecimalAmount}  from '../helpers'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  isAutoVault?:boolean\r\n  pricePerFullShare?:BigNumber\r\n  userShares?:BigNumber\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' ,isAutoVault,pricePerFullShare,userShares}) => {\r\n  const [val, setVal] = useState('')\r\n  const [shareValue,setSharesVal] =useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n      getDecimalAmount(new BigNumber(e.currentTarget.value), 18)\r\n      const {sharesAsBigNumber}= convertCakeToShares(getDecimalAmount(new BigNumber(e.currentTarget.value), 18),pricePerFullShare)\r\n\r\n      setSharesVal(sharesAsBigNumber.toNumber().toFixed(0).toString())\r\n    },\r\n    [setVal,setSharesVal,pricePerFullShare],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n    // const {sharesAsBigNumber}= convertCakeToShares(getDecimalAmount(new BigNumber(fullBalance), 18),pricePerFullShare)\r\n    setSharesVal(\"\")\r\n  }, [fullBalance, setVal,setSharesVal])\r\n\r\n  return (\r\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || parseFloat(val) <= 0 || val === \"\"}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm((isAutoVault) ? shareValue : val )\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\DepositModal.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\components\\ExpandableSectionButton\\ExpandableSectionButton.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\components\\IfoCard\\IfoCardTime.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\components\\IfoCard\\IfoCardDetails.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\components\\IfoCard\\IfoCardDescription.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\components\\Input\\index.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\config\\constants\\delegateFarms.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\utils\\compoundApyHelpers.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\hooks\\useHarvest.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\components\\IfoCard\\IfoCardProgress.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Ifos\\components\\IfoCard\\IfoCardHeader.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\hooks\\useAllowance.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\hooks\\useApprove.ts",["927","928"],"import { useCallback ,useState ,useEffect ,useRef} from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\r\nimport { approve, approveWithAddress } from 'utils/callHelpers'\r\nimport {getCakeVaultAddress} from 'utils/addressHelpers'\r\nimport { useMasterchef, useCake, useSousChef, useLottery, useDelegateFarmContract,useCakeVaultContract } from './useContract'\r\n// import BigNumber from 'bignumber.js'\r\n\r\n\r\n/**\r\n * Returns the previous value of the given value\r\n *\r\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\r\n */\r\nexport const usePreviousValue = (value: any) => {\r\n  const ref = useRef()\r\n\r\n  useEffect(() => {\r\n    ref.current = value\r\n  }, [value])\r\n\r\n  return ref.current\r\n}\r\n\r\n\r\nexport const useLastUpdated = () => {\r\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\r\n  const previousLastUpdated = usePreviousValue(lastUpdated)\r\n\r\n  const setLastUpdated = useCallback(() => {\r\n    setStateLastUpdated(Date.now())\r\n  }, [setStateLastUpdated])\r\n\r\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\r\n}\r\n\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, masterChefContract, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, masterChefContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, sousChefContract, account)\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// lpContract olarak approve verilecek tokenin adresi gelmeli\r\nexport const usePoolApprove = (lpContract : Contract, delegateFarm: string, poolId) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const delegateFarmContract = useDelegateFarmContract(delegateFarm);\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approveWithAddress(lpContract, delegateFarm, account)\r\n      dispatch(updateUserAllowance(poolId,account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, delegateFarm, poolId])\r\n\r\n  return { onApprove : handleApprove}\r\n}\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account }: { account: string } = useWallet()\r\n  const cakeContract = useCake()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(cakeContract, lotteryContract, account)\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWallet()\r\n  const onApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await tokenContract.methods\r\n        .approve(spenderAddress, ethers.constants.MaxUint256)\r\n        .send({ from: account })\r\n      return tx\r\n    } catch {\r\n      return false\r\n    }\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n\r\n// // Approve CAKE auto pool\r\n// export const useVaultApprove = () => {\r\n//   // const [requestedApproval, setRequestedApproval] = useState(false)\r\n//   // const cakeVaultContract = useCakeVaultContract()\r\n//   // const { callWithGasPrice } = useCallWithGasPrice()\r\n//   const cakeContract = useCake()\r\n\r\n\r\n//   const handleVaultApprove =useCallback(async () => {\r\n//     // alert(\"üf\")\r\n//     const cakeVaultAddress = getCakeVaultAddress()\r\n//     // const tx = await callWithGasPrice(cakeContract, 'approve', [cakeVaultContract.methods.address, ethers.constants.MaxUint256])\r\n//     const tx = await cakeContract.methods.approve(cakeVaultAddress,ethers.constants.MaxUint256)\r\n//     // setRequestedApproval(true)\r\n//     const receipt = await tx.wait()\r\n//     if (receipt.status) {\r\n//       alert(\"Contract Enabled\")\r\n//       // toastSuccess(t('Contract Enabled'), t('You can now stake in the %symbol% vault!', { symbol: 'CAKE' }))\r\n//       // setLastUpdated()\r\n//       // setRequestedApproval(false)\r\n//     } else {\r\n//       alert(\"Please try again. Confirm the transaction and make sure you are paying enough gas!\")\r\n//       // toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n//       // setRequestedApproval(false)\r\n//     }\r\n//   }\r\n\r\n//   return  {handleVaultApprove}\r\n//   )\r\n// }\r\nexport const useVaultApprove = () => {\r\n  const { account } = useWallet()\r\n  const cakeContract = useCake()\r\n  const cakeVaultAddress = getCakeVaultAddress()\r\n  const handleVaultApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await cakeContract.methods\r\n        .approve(cakeVaultAddress, ethers.constants.MaxUint256)\r\n        .send({ from: account })\r\n      return tx\r\n    } catch {\r\n      return false\r\n    }\r\n  }, [account, cakeVaultAddress, cakeContract])\r\n\r\n  return {handleVaultApprove}\r\n}\r\nexport const useCheckVaultApprovalStatus = () => {\r\n  const [isVaultApproved, setIsVaultApproved] = useState(false)\r\n  const { account } = useWallet()\r\n  const cakeContract = useCake()\r\n  const cakeVaultAddress = getCakeVaultAddress()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n  useEffect(() => {\r\n    const checkApprovalStatus = async () => {\r\n      try {\r\n        const response = await cakeContract.methods.allowance(account, cakeVaultAddress).call()\r\n        const currentAllowance = new BigNumber(response.toString())\r\n        // console.log(currentAllowance)\r\n        setIsVaultApproved(currentAllowance.gt(0))\r\n      } catch (error) {\r\n        setIsVaultApproved(false)\r\n      }\r\n    }\r\n\r\n    checkApprovalStatus()\r\n  }, [account, cakeContract, cakeVaultAddress, lastUpdated])\r\n  return { isVaultApproved, setLastUpdated }\r\n}\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\hooks\\useUnstake.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\hooks\\useWithdrawalFeeTimer.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\hooks\\useBlock.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\hooks\\useWeb3.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\components\\Input\\Input.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\components\\Partials\\Socials.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\components\\Input\\BalanceInput.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\utils\\callHelpers.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\utils\\getTimePeriods.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\components\\ModalActions\\index.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\components\\ModalActions\\ModalActions.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\components\\Spacer\\index.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\components\\Spacer\\Spacer.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\components\\FarmStakingCard.tsx",["929","930","931","932","933","934","935","936","937","938"],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\components\\CakeHarvestBalance.tsx",["939","940"],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\components\\CakeWalletBalance.tsx",["941","942","943"],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\components\\Statistics.tsx",["944","945","946","947","948","949"],"import React from 'react'\r\nimport CardValue from 'views/Home/components/CardValue'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Text ,Flex} from '@macist-m/robinia-uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { useTotalSupply, useBurnedBalance ,useCustomTokenBalance} from 'hooks/useTokenBalance'\r\nimport {useAutoFarmApy} from 'state/hooks'\r\nimport { BLOCKS_PER_YEAR } from 'config'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { QuoteToken } from 'config/constants/types'\r\n\r\nimport {\r\n  useFarms,\r\n  usePriceCakeBusd,\r\n  useTotalValue,\r\n  usePriceBnbBusd,\r\n} from '../../../state/hooks'\r\n\r\ndeclare global {\r\n  interface Window {\r\n    ethereum: any\r\n  }\r\n}\r\nconst addToMetamask = function () {\r\n  window.ethereum\r\n    .request({\r\n      method: 'wallet_watchAsset',\r\n      params: {\r\n        type: 'ERC20',\r\n        options: {\r\n          address: '0xaAdFf17d56d80312b392Ced903f3E8dBE5c3ece7',\r\n          symbol: 'WST',\r\n          decimals: 18,\r\n          image: `${window.location.origin}/images/favicons/apple-icon-72x72.png`,\r\n        },\r\n      },\r\n    })\r\n    .then((success) => {\r\n      if (success) {\r\n        console.log('WST successfully added to wallet!')\r\n      } else {\r\n        throw new Error('Something went wrong.')\r\n      }\r\n    })\r\n    .catch(console.error)\r\n}\r\nconst Statistics = () => {\r\n  const cakePriceUsd = usePriceCakeBusd()\r\n  // const totalValue = useTotalValue()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = useBurnedBalance(getCakeAddress())\r\n  const farms = useFarms()\r\n  const eggPrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const exacutedBalance= useCustomTokenBalance(\"0xaAdFf17d56d80312b392Ced903f3E8dBE5c3ece7\",\"0xf808b408e464FcaA2a28C673ca7F5C16f6e775aB\")\r\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance).minus(exacutedBalance) : new BigNumber(0)\r\n  const cakeSupply = getBalanceNumber(circSupply)\r\n\r\n  const marketCap = eggPrice.times(circSupply)\r\n\r\n  const autoApy = useAutoFarmApy(2)\r\n  let eggPerBlock = 0\r\n  if (farms && farms[0] && farms[0].eggPerBlock) {\r\n    eggPerBlock = new BigNumber(farms[0].eggPerBlock)\r\n      .div(new BigNumber(10).pow(18))\r\n      .toNumber()\r\n  }\r\n  const x = []\r\n  farms.map((farm) => {\r\n    // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n    //   return farm\r\n    // }\r\n    const cakeRewardPerBlock = new BigNumber(farm.eggPerBlock || 1)\r\n      .times(new BigNumber(farm.poolWeight))\r\n      .div(new BigNumber(10).pow(18))\r\n    const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n    let apy = eggPrice.times(cakeRewardPerYear)\r\n\r\n    let totalValuex = new BigNumber(farm.lpTotalInQuoteToken || 0)\r\n\r\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      totalValuex = totalValuex.times(bnbPrice)\r\n    }\r\n\r\n    if (totalValuex.comparedTo(0) > 0) {\r\n      apy = apy.div(totalValuex)\r\n    }\r\n\r\n    x.push(apy)\r\n    return null\r\n  })\r\n  const topAPY = x.reduce(function (accumulatedValue, currentValue) {\r\n    return Math.max(accumulatedValue, currentValue)\r\n  })\r\n\r\n  return (\r\n    <div className=\"stat-card h-full  text-white text-center   grid  grid-cols-1 gap-4 justify-item-center \">\r\n      <div className=\"grid   sm:grid-cols-1  text-lg md:grid-cols-2  lg:grid-cols-3   \">\r\n\r\n\r\n\r\n        <div className=\"grid grid-cols-2  gap-2 \">\r\n          <div className=\"grid grid-cols-1 md:ml-20 lg:ml-0 text-left\">\r\n            <div>WST APY</div>\r\n            <div>Total Supply</div>\r\n            <div>Circulation Supply</div>\r\n\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-1 md:mr-20 lg:mr-0 text-center \">\r\n            <div>\r\n              {!Number.isNaN(autoApy) ?\r\n              <Flex justifyContent=\"center\">\r\n\r\n                <CardValue  fontSize=\"17px\" value={autoApy} decimals={0}/>\r\n\r\n                <Text bold fontSize=\"17px\" color=\"primary\">%</Text>\r\n              </Flex>\r\n              :\r\n              <Text bold fontSize=\"17px\" color=\"primary\">\r\n                0\r\n              </Text>\r\n              }\r\n\r\n            </div>\r\n            <div>\r\n              {' '}\r\n              {cakeSupply && (\r\n                <CardValue fontSize=\"17px\" value={getBalanceNumber(totalSupply)} decimals={0} />\r\n              )}\r\n            </div>\r\n            <div>\r\n              {cakeSupply && (\r\n                <CardValue fontSize=\"17px\" value={cakeSupply} decimals={0} />\r\n              )}\r\n            </div>\r\n\r\n\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-2  gap-2 \">\r\n        <div className=\"grid grid-cols-1 md:ml-20 lg:ml-0 text-left\">\r\n\r\n            <div>Total Burned</div>\r\n            <div>Market Cap</div>\r\n            <div>WST Per Block</div>\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-1 md:mr-20 lg:mr-0 text-center \">\r\n\r\n            <div>\r\n              <CardValue\r\n                fontSize=\"17px\"\r\n                value={getBalanceNumber(burnedBalance)}\r\n                decimals={0}\r\n              />\r\n            </div>\r\n            <div>\r\n              {totalSupply && (\r\n                <CardValue\r\n                  fontSize=\"17px\"\r\n                  value={getBalanceNumber(marketCap)}\r\n                  decimals={0}\r\n                  prefix='$'\r\n                />\r\n              )}\r\n            </div>\r\n            <div>\r\n              <Text bold fontSize=\"17px\" color=\"primary\">\r\n                {eggPerBlock}\r\n              </Text>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className='grid'>\r\n        <div> </div>\r\n            <Flex flexDirection=\"column\" alignItems=\"center\">\r\n\r\n            <Flex alignItems=\"center\">\r\n               <img style={{minWidth:\"60px\",width:\"70px\"}} src=\"/images/metamask-ico.svg\" alt=\"rbs-ico\" />\r\n               <button type='button' style={{minWidth:\"135px\"}} className=\"bg-gray-800 bg-transparent ml-4 py-3   rounded-xl sm:mt-2  lg:mt-1 text-sm  text-white cursor-pointer hover:opacity-75\" onClick={addToMetamask}>\r\n                Add to Metamask\r\n              </button>\r\n            </Flex>\r\n            </Flex>\r\n            <div> </div>\r\n        </div>\r\n      </div>\r\n\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Statistics\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\components\\TrendPost.tsx",["950","951","952","953","954","955"],"import React, { useEffect, useCallback, useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport { BLOCKS_PER_YEAR } from 'config'\r\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport Divider from 'views/Farms/components/Divider'\r\nimport { FarmWithStakedValue } from '../../Farms/components/FarmCard/FarmCard'\r\nimport TopFarmCard from './TopFarmCard'\r\nimport FarmingCard from './FarmingCard'\r\n\r\nexport interface FarmsProps {\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst TrendPost: React.FC<FarmsProps> = (farmsProps) => {\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { tokenMode } = farmsProps\r\n\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const activeFarms = farmsLP.filter(\r\n      (farm) => farm.pid < 5\r\n    //  (farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !==   '0X'   ,\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay, removed: boolean) => {\r\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        const cakeRewardPerBlock = new BigNumber(farm.eggPerBlock || 1)\r\n          .times(new BigNumber(farm.poolWeight))\r\n          .div(new BigNumber(10).pow(18))\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n        let apy = cakePrice.times(cakeRewardPerYear)\r\n\r\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n          totalValue = totalValue.times(bnbPrice)\r\n        }\r\n\r\n        if (totalValue.comparedTo(0) > 0) {\r\n          apy = apy.div(totalValue)\r\n        }\r\n\r\n        return { ...farm, apy }\r\n      })\r\n      return farmsToDisplayWithAPY.map((farm) => (\r\n        <FarmingCard\r\n          key={farm.pid}\r\n          farm={farm}\r\n          removed={removed}\r\n          bnbPrice={bnbPrice}\r\n          cakePrice={cakePrice}\r\n          ethereum={ethereum}\r\n          account={account}\r\n        />\r\n      ))\r\n    },\r\n    [bnbPrice, account, cakePrice, ethereum],\r\n  )\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"text-2xl text-white ml-2 mb-2  \">Trending Post</div>\r\n\r\n    <div className=\"grid grid-cols-1 h-96  trend \">\r\n\r\n    <ul className=\"list-none contents  \">\r\n  <li >\r\n    <a className='text-white  font-bold text-lg' href='https://steemit.com/wisteria/@robinia/2-0-wisteriaswap-12-18'>일드파밍 디파이 2.0 WisteriaSwap(위스테리아스왑)</a>\r\n    <li className=\"truncate text-gray-400  leading-8 text-sm \">WisteriaSwap은 12월 18일 UTC 11:00 오픈됩니다.</li>\r\n  </li>\r\n\r\n  <li>\r\n    <a href='https://steemit.com/hive-101145/@robinia/yield-farming-defi-2-0-wisteriaswap-will-be-launched-on-december-18th' className='text-white  font-bold text-lg'>Yield Farming DeFi 2.0 WisteriaSwap</a>\r\n    <li className=\"truncate text-sm  leading-8 text-gray-400\"> WisteriaSwap will be launched on December 18th.</li>\r\n  </li>\r\n  <li>\r\n    <a href='https://www.youtube.com/watch?v=weXpFFEojuU' className='text-white  font-bold text-lg'>Wisteria Swap Defi 1.0과 2.0의 적절한 결합 </a>\r\n    <li className=\"truncate text-sm leading-8 text-gray-400\">코린이 유치원(Corini Kindergarden) Youtube Video for Korean</li>\r\n  </li>\r\n  <li>\r\n    <a href='https://www.youtube.com/watch?v=rFOUZC6iTMM' className='text-white  font-bold text-lg'>WisteriaSwap 일드파밍 DeFi 2.0 완벽정리</a>\r\n    <li className=\"truncate text-sm leading-8 text-gray-400\">블록체인 인포 with 얄리, Youtube Video for Korean</li>\r\n  </li>\r\n  <li>\r\n    <a href='https://youtu.be/unXOkzDUdLQ' className='text-white  font-bold text-lg'>WisteriaSwap 초보자 가이드 완벽정리</a>\r\n    <li className=\"truncate text-sm leading-8 text-gray-400\">야나부, Youtube Video for Korean</li>\r\n  </li>\r\n  <br/>\r\n\r\n  {/* <li>\r\n    <a className='text-purple-900  font-bold text-lg' href='/'>Post 3</a>\r\n    <li className=\"truncate text-white\">Now this is a story all about how, my life got flipped turned upside down Now this is a story all about how, my life got flipped turned upside down</li>\r\n  </li>\r\n  <br/>\r\n\r\n  <li>\r\n    <a className='text-purple-900  font-bold text-lg' href='/'>Post 4</a>\r\n    <li className=\"truncate text-white\">Now this is a story all about how, my life got flipped turned upside down</li>\r\n  </li>\r\n  <br/>\r\n\r\n  <li>\r\n    <a className='text-purple-900  font-bold text-lg' href='/'>Post 5</a>\r\n    <li className=\"truncate text-white\">Now this is a story all about how, my life got flipped turned upside down Now this is a story all about how, my life got flipped turned upside down</li>\r\n  </li>\r\n  <br/>\r\n  <li>\r\n    <a className='text-purple-900  font-bold text-lg' href='/'>Post 6</a>\r\n    <li className=\"truncate text-white\">Now this is a story all about how, my life got flipped turned upside down Now this is a story all about how, my life got flipped turned upside down</li>\r\n  </li>\r\n   */}\r\n\r\n\r\n    </ul>\r\n      </div>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TrendPost","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Home\\components\\OurProducts.tsx",["956","957","958","959","960","961","962","963","964","965","966","967","968","969","970","971","972","973","974","975","976"],"import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@macist-m/robinia-uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\nimport { usePriceCakeBusd } from '../../../state/hooks'\r\nimport useTokenBalance from '../../../hooks/useTokenBalance'\r\nimport { getCakeAddress } from '../../../utils/addressHelpers'\r\nimport useAllEarnings from '../../../hooks/useAllEarnings'\r\nimport { getBalanceNumber } from '../../../utils/formatBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('/images/egg/2a.png');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst OurProducts = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWallet()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\r\n  const eggPrice = usePriceCakeBusd().toNumber()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n  const balancesWithValue = farmsWithBalance.filter(\r\n    (balanceType) => balanceType.balance.toNumber() > 0,\r\n  )\r\n\r\n  return (\r\n    <div className=\" h-full place-items-center  text-white text-center grid lg:grid-cols-4 sm:grid-cols-2 gap-4 justify-item-center \">\r\n      <div className=\"sm:col-span-2 lg:col-span-4   text-white text-5xl mb-10 py-2  rounded-xl   mb-10\">\r\n        Our Products\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1  partnerblur gap-4\">\r\n        <div className=\"justify-item-center mb-6 mt-4 sm:ml-11  md:ml-24 lg:ml-20\">\r\n          <img src=\"/images/auto-wst.svg\" alt=\"rbs-ico\" style={{minWidth:50}} />\r\n        </div>\r\n        <div>Auto WST (3,3)</div>\r\n        <div className=\"text-gray-300\">\r\n          WisteriaSwap provides the best APY to users through Auto-Compounding system.\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 partnerblur gap-4\">\r\n        <div className=\"justify-item-center mb-6 mt-6 sm:ml-11 md:ml-12 lg:ml-20 \">\r\n          <img src=\"/images/calloption.svg\" alt=\"rbs-ico\" style={{minWidth:50}} />\r\n        </div>\r\n        <div>Call Option (1,1)</div>\r\n        <div className=\"text-gray-300\">\r\n          Users have the opportunity to purchase WST at a lower than market price through\r\n          Call Option.\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 partnerblur gap-2\">\r\n      <div className=\"justify-item-center mb-6 mt-6 sm:ml-11 md:ml-12  lg:ml-20\">\r\n        <img src=\"/images/treasury.svg\" alt=\"rbs-ico\" style={{minWidth:50}} />\r\n        </div>\r\n        <div>Treasury Fund</div>\r\n        <div className=\"text-gray-300\">\r\n          Treasury Fund designed to maintain the value of WST. WisteriaSwap activates the\r\n          Buy-Burn system using the Treasury Fund when the WST value drops below $1.\r\n        </div>\r\n      </div>\r\n      <div className=\"grid grid-cols-1 partnerblur gap-2\">\r\n      <div className=\"justify-item-center mb-6 mt-6 sm:ml-11 md:ml-12 lg:ml-20\">\r\n        <img src=\"/images/deflation.svg\" alt=\"rbs-ico\" style={{minWidth:50}} />\r\n        </div>\r\n        <div>Deflation Model</div>\r\n        <div className=\"text-gray-300\">\r\n          WisteriaSwap has more than 6 Deflation Models to control inflation. The\r\n          deflation model allows the WST value to remain stable.\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default OurProducts\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\components\\layout\\SecondLeaf.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\HourGlass\\index.ts",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\HourGlass\\HourGlass.tsx",["977","978","979","980","981","982"],"import React,{ useState,useEffect } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport Page from 'components/layout/Page'\r\nimport { Text,Flex ,Heading} from '@macist-m/robinia-uikit'\r\nimport CustomInput from 'components/CustomInput/CustomInput'\r\nimport Divider from 'views/Farms/components/Divider'\r\nimport SlideInput from 'components/SlideInput/SlideInput'\r\nimport { BLOCKS_PER_YEAR} from 'config'\r\nimport { useFarmFromPid,usePriceCakeBusd,useCakeVault,useFetchCakeVault} from 'state/hooks'\r\nimport { useCustomTokenBalance } from 'hooks/useTokenBalance'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getAutoAprDataWithDay } from 'views/Farms/helpers'\r\nimport ImaginateSlider from './imaginateSlider'\r\n\r\n\r\n// interface HourGlassProps {\r\n//   lpLabel?: string\r\n//   cakePrice?: BigNumber\r\n//   apy?: BigNumber\r\n//   cakeRewardPerYear?:BigNumber\r\n//   totalValue?:BigNumber\r\n// }\r\n\r\nconst Hr = styled.div`\r\n  width:100%;\r\n  height:2px;\r\n  margin:16px 0;\r\n  background-color:#fff;\r\n`\r\n\r\nconst Container = styled.div`\r\n  width:100%;\r\n  max-width:852px;\r\n  flex-direction:column;\r\n  padding: 50px;\r\n  border-radius: 23px;\r\n  backdrop-filter: blur(30px);\r\n  background-color:rgba(255,255,255,0.1);\r\n  border:1px solid;\r\n  border-color:rgba(255, 255, 255, 0.5);\r\n  margin-bottom:16px;\r\n  @media (max-width: 576px) {\r\n    padding:8px\r\n  }\r\n\r\n`\r\n\r\nconst SliderContainer =styled.div`\r\n  margin-bottom: 28px;\r\n  max-width:300px;\r\n`\r\n\r\nconst HourGlass: React.FC = () => {\r\n   const { account }: { account: string } = useWallet()\r\n   useFetchCakeVault(account)\r\n   const farm = useFarmFromPid(2)\r\n   const cakePrice = usePriceCakeBusd()\r\n   const {\r\n    totalWisteriaInVault,\r\n    fees: { performanceFee }\r\n  } = useCakeVault()\r\n  console.log(totalWisteriaInVault)\r\n   const cakeRewardPerBlock = new BigNumber(farm.eggPerBlock || 1)\r\n   .times(new BigNumber(farm.poolWeight))\r\n   .div(new BigNumber(10).pow(18))\r\n const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n // alert(cakeRewardPerBlock)\r\n   let apy = cakePrice.times(cakeRewardPerYear)\r\n   const totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\r\n   if (totalValue.comparedTo(0) > 0) {\r\n    apy = apy.div(totalValue)\r\n  }\r\n\r\n   const farmApy = getAutoAprDataWithDay(apy.times(100).toNumber(),performanceFee,1).apr.toLocaleString(\"ko-KR\", {\r\n       minimumFractionDigits: 2,\r\n       maximumFractionDigits: 2,\r\n     })\r\n  //  apy.times(100).toNumber().toLocaleString(\"ko-KR\", {\r\n  //   minimumFractionDigits: 2,\r\n  //   maximumFractionDigits: 2,\r\n  // })\r\n  const cakePriceAsString = cakePrice.toNumber().toLocaleString(\"ko-KR\", {\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2,\r\n  })\r\n\r\n  const lamboPrice = 500000\r\n  const watchPrice=40000\r\n  const MacPrice=4000\r\n  const [amount,setAmount]=useState(\"0\")\r\n  const [balance,setBalance]=useState(\"0\")\r\n  const [dayValue,setDayValue]=useState(30)\r\n  const [price,setPrice]=useState(cakePriceAsString)\r\n  const [futurePrice,setfuturePrice]=useState(cakePriceAsString)\r\n  const [reward,setReward]=useState(farmApy)\r\n  const AutoApr = getAutoAprDataWithDay(apy.times(100).toNumber(),performanceFee,1)\r\n  console.log(AutoApr.apr.toLocaleString(\"ko-KR\", {\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2,\r\n  }))\r\n\r\n  const wstAmount= useCustomTokenBalance(\"0xaAdFf17d56d80312b392Ced903f3E8dBE5c3ece7\",account)\r\n  const cakeRewardPerYearAsNumber=cakeRewardPerYear.toNumber()\r\n  const cakeRewardPerDayAsNumber=cakeRewardPerYearAsNumber/365\r\n\r\n\r\nuseEffect(()=>{\r\n  const wstbalance = getBalanceNumber(wstAmount).toLocaleString(\"ko-KR\", {\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2,\r\n  })\r\n  setPrice(cakePriceAsString)\r\n  setfuturePrice(cakePriceAsString)\r\n setBalance(wstbalance)\r\n setReward(farmApy)\r\n},[account,wstAmount,cakePriceAsString,farmApy])\r\nconst handleAmount =(e)=>{\r\n    setAmount(e.target.value)\r\n}\r\nconst handlePrice =(e)=>{\r\n    setPrice(e.target.value)\r\n}\r\nconst handleFuturePrice =(e)=>{\r\n    setfuturePrice(e.target.value)\r\n}\r\nconst handleReward =(e)=>{\r\n    setReward(e.target.value)\r\n}\r\nconst setMaxAmount = () =>{\r\n  setAmount(balance)\r\n}\r\nconst setCurrentPrice = () =>{\r\n  setPrice(cakePriceAsString)\r\n}\r\nconst setCurrenFuturePrice = ()=>{\r\n  setfuturePrice(cakePriceAsString)\r\n}\r\nconst setCurrentReward = () =>{\r\n  setReward(farmApy)\r\n}\r\nconst handleDayValue = (e) =>{\r\n  setDayValue(e.target.value)\r\n}\r\nconst calculateUserRewards = (tokenamount) =>{\r\n  // const totalTokenInPool = getBalanceNumber(totalWisteriaInVault,18)\r\n  // console.log(`totalTokenInPool:${totalTokenInPool}`)\r\n  // const rewardAsPerchantge = ((100 * parseFloat(tokenamount)) / (totalTokenInPool+parseFloat(tokenamount))) / 100\r\n  // console.log(`rewardAsPerchantge:${rewardAsPerchantge}`)\r\n  // console.log(`cakeRewardPerDayAsNumber:${cakeRewardPerDayAsNumber}`)\r\n  // const userRewardPerDay = cakeRewardPerDayAsNumber*rewardAsPerchantge\r\n  // console.log(`userRewardPerDay:${userRewardPerDay}`)\r\n  // const userRewards = dayValue*userRewardPerDay\r\n  const apyAsPerchantage = parseFloat(reward)/100\r\n  console.log((apyAsPerchantage ** dayValue))\r\n  let userRewards = (parseFloat(tokenamount) * ((1 + apyAsPerchantage) ** dayValue)) - parseFloat(tokenamount)\r\n  if(Number.isNaN(userRewards)){\r\n    userRewards = 0\r\n  }\r\n  return userRewards\r\n}\r\n  return (\r\n    <Page>\r\n      <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\" marginBottom={3}>\r\n        <img style={{maxWidth:127}} src=\"/images/flowers.png\" alt=\"\" />\r\n        <Text fontSize='46px' color='#fff' bold>\r\n         Hourglass\r\n      </Text>\r\n      <Text marginTop={-3} color='#fff' fontSize='20px'>Estimate Your Returns</Text>\r\n   </Flex>\r\n\r\n\r\n    <Flex justifyContent=\"center\">\r\n    <Container>\r\n             <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n                <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\" marginRight={32}>\r\n                    <Text fontSize='22px' color=\"secondary\">Current WST price</Text>\r\n                    <Text bold fontSize='25px' color=\"#fff\" >${cakePrice.toNumber().toFixed(2)}</Text>\r\n                </Flex>\r\n                <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\"  marginRight={32}>\r\n                    <Text fontSize='22px' color=\"secondary\">\r\n                    Current Daily Reward\r\n                    </Text>\r\n                    <Text bold fontSize='25px' color=\"#fff\">\r\n                        {farmApy}%\r\n                    </Text>\r\n                </Flex>\r\n                <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n                    <Text fontSize='22px' color=\"secondary\">\r\n                        Your WST balance\r\n                    </Text>\r\n                    <Text bold fontSize='25px' color=\"#fff\">{balance}</Text>\r\n                </Flex>\r\n            </Flex>\r\n            <Flex>\r\n              <Divider/>\r\n            </Flex>\r\n            <Flex flexWrap=\"wrap\" justifyContent=\"space-between\">\r\n                    <CustomInput\r\n                        onChange={handleAmount}\r\n                        value={amount}\r\n                        inputTitle=\"WST Amount\"\r\n                        endAbdormentText='Max'\r\n                        endAbdormentAction={setMaxAmount}\r\n\r\n                    />\r\n                <CustomInput\r\n                        onChange={handlePrice}\r\n                        value={price}\r\n                        inputTitle=\"WST Price at Purchase ($)\"\r\n                        endAbdormentText='Current'\r\n                        endAbdormentAction={setCurrentPrice}\r\n                    />\r\n            </Flex>\r\n            <Flex flexWrap=\"wrap\" justifyContent=\"space-between\">\r\n                    <CustomInput\r\n                        onChange={handleReward}\r\n                        value={reward}\r\n                        inputTitle=\"Reward Yield(%)\"\r\n                        endAbdormentText='Current'\r\n                        endAbdormentAction={setCurrentReward}\r\n                    />\r\n                <CustomInput\r\n                        onChange={handleFuturePrice}\r\n                        value={futurePrice}\r\n                        inputTitle=\"Future WST Market Price ($)\"\r\n                        endAbdormentText='Current'\r\n                        endAbdormentAction={setCurrenFuturePrice}\r\n                    />\r\n            </Flex>\r\n            <Flex flexDirection=\"column\" paddingTop={32} paddingLeft={32} paddingRight={32} alignItems=\"center\" justifyContent=\"center\">\r\n            <SlideInput\r\n              max={365}\r\n              min={1}\r\n              value={dayValue}\r\n              onChange={handleDayValue}\r\n            />\r\n            <Flex marginTop={16} alignItems=\"center\" justifyContent=\"center\">\r\n              <Text bold color=\"primary\" fontSize='28px'>\r\n                {dayValue}\r\n                {(dayValue === 1) ?\r\n                \" day\"\r\n                :\" days\"\r\n                }\r\n              </Text>\r\n            </Flex>\r\n            </Flex>\r\n            <Flex>\r\n                <Divider/>\r\n            </Flex>\r\n            <Flex flexDirection=\"column\" padding={16}>\r\n              <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n                <Text fontSize='18px' color='#fff'>\r\n                Your Initial Investment\r\n                </Text>\r\n                <Text fontSize='22px' color='primary' bold>\r\n                  ${(amount) ? (parseFloat(amount)*parseFloat(price)).toLocaleString(\"ko-KR\", {\r\n                    minimumFractionDigits: 2,\r\n                    maximumFractionDigits: 2,\r\n                  }):\r\n                  0\r\n                  }\r\n                </Text>\r\n              </Flex>\r\n              <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n                <Text fontSize='18px' color='#fff'>\r\n                Current Wealth\r\n                </Text>\r\n                <Text fontSize='22px' color='primary' bold>\r\n                ${\r\n                (amount) ?\r\n                (parseFloat(amount)*parseFloat(price)).toLocaleString(\"ko-KR\", {\r\n                    minimumFractionDigits: 2,\r\n                    maximumFractionDigits: 2,\r\n                  }) :\r\n                  0\r\n                  }\r\n                </Text>\r\n              </Flex>\r\n              <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n                <Text fontSize='18px' color='#fff'>\r\n                WST Rewards Estimation\r\n                </Text>\r\n                <Text fontSize='22px' color='primary' bold>\r\n                  {(parseFloat(amount) > 0) ? calculateUserRewards(amount).toLocaleString(\"ko-KR\", {\r\n                    minimumFractionDigits: 2,\r\n                    maximumFractionDigits: 2,\r\n                  }) : 0}\r\n                </Text>\r\n              </Flex>\r\n              <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n                <Text fontSize='18px' color='#fff'>Potential Return</Text>\r\n                <Text fontSize='22px' color='primary' bold>${\r\n                (parseFloat(amount) > 0) ?\r\n                ((calculateUserRewards(amount)+parseFloat(amount))*parseFloat(futurePrice)).toLocaleString(\"ko-KR\", {\r\n                    minimumFractionDigits: 2,\r\n                    maximumFractionDigits: 2,\r\n                  })\r\n                :\r\n                0\r\n                }</Text>\r\n              </Flex>\r\n            </Flex>\r\n            <Flex justifyContent=\"center\" alignItems=\"center\">\r\n            <SliderContainer>\r\n            <ImaginateSlider values={{\r\n                macbook:(parseFloat(amount) > 0) ? Math.floor(((calculateUserRewards(amount)+parseFloat(amount))*parseFloat(futurePrice))/MacPrice) : 0,\r\n                lambo:(parseFloat(amount) > 0) ? Math.floor(((calculateUserRewards(amount)+parseFloat(amount))*parseFloat(futurePrice))/lamboPrice) : 0,\r\n                watch:(parseFloat(amount) > 0) ? Math.floor(((calculateUserRewards(amount)+parseFloat(amount))*parseFloat(futurePrice))/watchPrice) : 0,\r\n            }}/>\r\n            </SliderContainer>\r\n            </Flex>\r\n\r\n\r\n    </Container>\r\n    </Flex>\r\n\r\n\r\n\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default HourGlass\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\views\\HourGlass\\imaginateSlider.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\components\\SlideInput\\SlideInput.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\components\\CustomInput\\CustomInput.tsx",["983"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button } from '@macist-m/robinia-uikit'\r\nimport Input, { InputProps } from '../Input'\r\n\r\ninterface CustomInputProps extends InputProps {\r\n  symbol?: string\r\n  endAbdormentAction?: () => void\r\n  endAbdormentText?:string\r\n  inputTitle?:string\r\n}\r\n\r\nconst CustomInput: React.FC<CustomInputProps> = ({  symbol, onChange, endAbdormentAction, value,endAbdormentText,inputTitle}) => {\r\n\r\n  return (\r\n    <StyledCustomInput>\r\n        <StyledTitleText>\r\n            {inputTitle}\r\n        </StyledTitleText>\r\n      <Input\r\n        endAdornment={\r\n          <StyledTokenAdornmentWrapper>\r\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\r\n            <StyledSpacer />\r\n            <div>\r\n              <StyledButton type='button' onClick={endAbdormentAction}>\r\n                {endAbdormentText}\r\n              </StyledButton>\r\n            </div>\r\n          </StyledTokenAdornmentWrapper>\r\n        }\r\n        onChange={onChange}\r\n        placeholder=\"0\"\r\n        value={value}\r\n        defaultDesign={false}\r\n      />\r\n    </StyledCustomInput>\r\n  )\r\n}\r\n\r\nconst StyledCustomInput = styled.div`\r\nmax-width:330px;\r\nmargin:4px;\r\nwidth:100%;\r\n@media (max-width: 768px) {\r\nmax-width:100%;\r\n}\r\n`\r\nconst StyledButton = styled.button`\r\ncolor:#fff;\r\nfont-size: 25px;\r\nfont-weight: 600;\r\nfont-stretch: normal;\r\nfont-style: normal;\r\nline-height: 1.2;\r\nletter-spacing: normal;\r\ntext-align: right;\r\noutline:none;\r\n`\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`\r\n\r\nconst StyledTitleText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  display: flex;\r\n  font-size: 18px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-start;\r\n  margin-left:8px\r\n`\r\n\r\nconst StyledTokenSymbol = styled.span`\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-weight: 700;\r\n`\r\n\r\nexport default CustomInput\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\CakeVaultCard\\EstimateButton.tsx",["984"],"import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { CalculateIcon, IconButton, useModal } from '@macist-m/robinia-uikit'\r\nimport { Address } from 'config/constants/types'\r\nimport EstimateModal from './EstimateModal'\r\n\r\nexport interface EstimateProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  cakeRewardPerYear?:BigNumber\r\n  totalValue?:BigNumber\r\n}\r\n\r\nconst Estimate: React.FC<EstimateProps> = ({\r\n  lpLabel,\r\n  cakePrice,\r\n  apy,\r\n  cakeRewardPerYear,\r\n  totalValue\r\n}) => {\r\n  const [onPresentApyModal] = useModal(\r\n    <EstimateModal\r\n      lpLabel={lpLabel}\r\n      cakePrice={cakePrice}\r\n      apy={apy}\r\n      cakeRewardPerYear={cakeRewardPerYear}\r\n      totalValue={totalValue}\r\n    />,\r\n  )\r\n\r\n  return (\r\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\r\n      <CalculateIcon />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default Estimate\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\FarmCard\\ApyButton.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\CakeVaultCard\\EstimateModal.tsx",["985","986","987","988","989","990","991","992","993","994","995","996"],"import React,{ useState,useEffect } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Modal, Text, LinkExternal, Flex } from '@macist-m/robinia-uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\r\nimport CustomInput from 'components/CustomInput/CustomInput'\r\nimport SlideInput from 'components/SlideInput/SlideInput'\r\nimport { useCustomTokenBalance } from 'hooks/useTokenBalance'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\n\r\ninterface EstimateModalProps {\r\n  onDismiss?: () => void\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  cakeRewardPerYear?:BigNumber\r\n  totalValue?:BigNumber\r\n}\r\n\r\nconst Hr = styled.div`\r\n  width:100%;\r\n  height:2px;\r\n  margin:16px 0;\r\n  background-color:#aeaeae;\r\n`\r\n\r\nconst GridItem = styled.div`\r\n  margin-bottom: '10px';\r\n`\r\n\r\nconst Description = styled(Text)`\r\n  max-width: 320px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst EstimateModal: React.FC<EstimateModalProps> = ({\r\n  onDismiss,\r\n  lpLabel,\r\n  cakePrice,\r\n  apy,\r\n  cakeRewardPerYear,\r\n  totalValue\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const farmApy = apy.times(new BigNumber(100)).toNumber().toLocaleString(\"ko-KR\", {\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2,\r\n  })\r\n  const cakePriceAsString = cakePrice.toNumber().toLocaleString(\"ko-KR\", {\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2,\r\n  })\r\n  const { account }: { account: string } = useWallet()\r\n  const [amount,setAmount]=useState(\"0\")\r\n  const [balance,setBalance]=useState(\"0\")\r\n  const [dayValue,setDayValue]=useState(30)\r\n  const [price,setPrice]=useState(cakePriceAsString)\r\n  const [futurePrice,setfuturePrice]=useState(cakePriceAsString)\r\n  const [reward,setReward]=useState(farmApy)\r\n\r\n\r\n  const wstAmount= useCustomTokenBalance(\"0xaAdFf17d56d80312b392Ced903f3E8dBE5c3ece7\",account)\r\n  const cakeRewardPerYearAsNumber=cakeRewardPerYear.toNumber()\r\n  const cakeRewardPerDayAsNumber=cakeRewardPerYearAsNumber/365\r\n\r\n\r\nuseEffect(()=>{\r\n  const wstbalance = getBalanceNumber(wstAmount).toString()\r\n setBalance(wstbalance)\r\n},[account,wstAmount])\r\nconst handleAmount =(e)=>{\r\n  console.log(e.target.value)\r\n    setAmount(e.target.value)\r\n}\r\nconst handlePrice =(e)=>{\r\n    setPrice(e.target.value)\r\n}\r\nconst handleFuturePrice =(e)=>{\r\n    setfuturePrice(e.target.value)\r\n}\r\nconst handleReward =(e)=>{\r\n    setReward(e.target.value)\r\n}\r\nconst setMaxAmount = () =>{\r\n  setAmount(balance)\r\n}\r\nconst setCurrentPrice = () =>{\r\n  setPrice(cakePriceAsString)\r\n}\r\nconst setCurrenFuturePrice = ()=>{\r\n  setfuturePrice(cakePriceAsString)\r\n}\r\nconst setCurrentReward = () =>{\r\n  setReward(farmApy)\r\n}\r\nconst handleDayValue = (e) =>{\r\n  setDayValue(e.target.value)\r\n}\r\nconst calculateUserRewards = (tokenamount) =>{\r\n  const totalTokenInPool = totalValue.toNumber() / cakePrice.toNumber()\r\n  console.log(`totalTokenInPool:${totalTokenInPool}`)\r\n  const rewardAsPerchantge = ((100 * parseFloat(tokenamount)) / (totalTokenInPool+parseFloat(tokenamount))) / 100\r\n  console.log(`rewardAsPerchantge:${rewardAsPerchantge}`)\r\n  console.log(`cakeRewardPerDayAsNumber:${cakeRewardPerDayAsNumber}`)\r\n  const userRewardPerDay = cakeRewardPerDayAsNumber*rewardAsPerchantge\r\n  console.log(`userRewardPerDay:${userRewardPerDay}`)\r\n  const userRewards = dayValue*userRewardPerDay\r\n  return userRewards\r\n}\r\n  return (\r\n    <Modal title=\"ESTIMATE\" onDismiss={onDismiss}>\r\n            <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n                <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\" marginRight={32}>\r\n                    <Text fontSize='16px' color=\"#aeaeae\">Current {lpLabel} price</Text>\r\n                    <Text bold fontSize='22px' color=\"secondary\" >${cakePrice.toNumber().toFixed(2)}</Text>\r\n                </Flex>\r\n                <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\"  marginRight={32}>\r\n                    <Text fontSize='16px' color=\"#aeaeae\">\r\n                        Current Reward Yield\r\n                    </Text>\r\n                    <Text bold fontSize='22px' color=\"secondary\">\r\n                        {farmApy}%\r\n                    </Text>\r\n                </Flex>\r\n                <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n                    <Text fontSize='16px' color=\"#aeaeae\">\r\n                        Your {lpLabel} balance\r\n                    </Text>\r\n                    <Text bold fontSize='22px' color=\"secondary\">{balance}</Text>\r\n                </Flex>\r\n            </Flex>\r\n            <Flex>\r\n                <Hr/>\r\n            </Flex>\r\n            <Flex justifyContent=\"space-between\">\r\n                <Flex marginRight=\"16px\">\r\n                    <CustomInput\r\n                        onChange={handleAmount}\r\n                        value={amount}\r\n                        inputTitle=\"WST Amount\"\r\n                        endAbdormentText='Max'\r\n                        endAbdormentAction={setMaxAmount}\r\n                    />\r\n                </Flex>\r\n                <Flex>\r\n                <CustomInput\r\n                        onChange={handlePrice}\r\n                        value={price}\r\n                        inputTitle=\"WST Price at Purchase ($)\"\r\n                        endAbdormentText='Current'\r\n                        endAbdormentAction={setCurrentPrice}\r\n                    />\r\n                </Flex>\r\n            </Flex>\r\n            <Flex justifyContent=\"space-between\">\r\n                <Flex marginRight=\"16px\">\r\n                    <CustomInput\r\n                        onChange={handleReward}\r\n                        value={reward}\r\n                        inputTitle=\"Reward Yield(%)\"\r\n                        endAbdormentText='Current'\r\n                        endAbdormentAction={setCurrentReward}\r\n                    />\r\n                </Flex>\r\n                <Flex>\r\n                <CustomInput\r\n                        onChange={handleFuturePrice}\r\n                        value={futurePrice}\r\n                        inputTitle=\"Future WST Market Price ($)\"\r\n                        endAbdormentText='Current'\r\n                        endAbdormentAction={setCurrenFuturePrice}\r\n                    />\r\n                </Flex>\r\n            </Flex>\r\n            <Flex flexDirection=\"column\" paddingTop={32} paddingLeft={32} paddingRight={32} alignItems=\"center\" justifyContent=\"center\">\r\n            <SlideInput\r\n              max={365}\r\n              min={1}\r\n              value={dayValue}\r\n              onChange={handleDayValue}\r\n            />\r\n            <Flex marginTop={16} alignItems=\"center\" justifyContent=\"center\">\r\n              <Text bold color=\"primary\" fontSize='28px'>\r\n                {dayValue}\r\n                {(dayValue === 1) ?\r\n                \" day\"\r\n                :\" days\"\r\n                }\r\n              </Text>\r\n            </Flex>\r\n            </Flex>\r\n            <Flex>\r\n                <Hr/>\r\n            </Flex>\r\n            <Flex flexDirection=\"column\" padding={16}>\r\n              <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n                <Text fontSize='18px' color='#aeaeae'>\r\n                Your Initial Investment\r\n                </Text>\r\n                <Text fontSize='22px' color='primary' bold>\r\n                  ${(amount) ?(parseFloat(amount)*parseFloat(price)).toLocaleString(\"ko-KR\", {\r\n                    minimumFractionDigits: 2,\r\n                    maximumFractionDigits: 2,\r\n                  }):\r\n                  0\r\n                  }\r\n                </Text>\r\n              </Flex>\r\n              <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n                <Text fontSize='18px' color='#aeaeae'>\r\n                Current Wealth\r\n                </Text>\r\n                <Text fontSize='22px' color='primary' bold>\r\n                ${\r\n                (amount) ?\r\n                (parseFloat(amount)*parseFloat(price)).toLocaleString(\"ko-KR\", {\r\n                    minimumFractionDigits: 2,\r\n                    maximumFractionDigits: 2,\r\n                  }) :\r\n                  0\r\n                  }\r\n                </Text>\r\n              </Flex>\r\n              <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n                <Text fontSize='18px' color='#aeaeae'>\r\n                WST Rewards Estimation\r\n                </Text>\r\n                <Text fontSize='22px' color='primary' bold>\r\n                  {(parseFloat(amount) > 0) ? calculateUserRewards(amount) : 0}\r\n                </Text>\r\n              </Flex>\r\n              <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n                <Text fontSize='18px' color='#aeaeae'>Potential Return</Text>\r\n                <Text fontSize='22px' color='primary' bold>${\r\n                (parseFloat(amount) > 0) ?\r\n                ((calculateUserRewards(amount)+parseFloat(amount))*cakePrice.toNumber()).toLocaleString(\"ko-KR\", {\r\n                    minimumFractionDigits: 2,\r\n                    maximumFractionDigits: 2,\r\n                  })\r\n                :\r\n                0\r\n                }</Text>\r\n              </Flex>\r\n            </Flex>\r\n\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default EstimateModal\r\n","C:\\Users\\90532\\Desktop\\sss\\src\\views\\Farms\\components\\FarmCard\\ApyCalculatorModal.tsx",[],"C:\\Users\\90532\\Desktop\\sss\\src\\views\\CallOption\\ClaimedButtons\\index.tsx",["997","998","999","1000"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@macist-m/robinia-uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst ClaimButton = ({ claimedOnly, setClaimedOnly }) => {\r\n  const { url, isExact } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper>\r\n      \r\n      <ButtonMenu  activeIndex={isExact ? 0 : 1} size=\"sm\"  variant=\"subtle\">\r\n        <ButtonMenuItem className='mr-4' as={Link} to={`${url}`}>\r\n          {TranslateString(10006, 'Claimable')}\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n          {TranslateString(10007, 'Claimed')}\r\n        </ButtonMenuItem>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default ClaimButton\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 32px;\r\n`\r\n\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-right: 32px;\r\n\r\n  ${Text} {\r\n    margin-left: 12px;\r\n  }\r\n`\r\n",{"ruleId":"1001","replacedBy":"1002"},{"ruleId":"1003","replacedBy":"1004"},{"ruleId":"1005","replacedBy":"1006"},{"ruleId":"1007","replacedBy":"1008"},{"ruleId":"1009","replacedBy":"1010"},{"ruleId":"1011","severity":1,"message":"1012","line":2,"column":35,"nodeType":"1013","messageId":"1014","endLine":2,"endColumn":43},{"ruleId":"1011","severity":1,"message":"1015","line":21,"column":7,"nodeType":"1013","messageId":"1014","endLine":21,"endColumn":19},{"ruleId":"1011","severity":1,"message":"1016","line":1,"column":17,"nodeType":"1013","messageId":"1014","endLine":1,"endColumn":26},{"ruleId":"1011","severity":1,"message":"1017","line":2,"column":8,"nodeType":"1013","messageId":"1014","endLine":2,"endColumn":17},{"ruleId":"1011","severity":1,"message":"1018","line":7,"column":8,"nodeType":"1013","messageId":"1014","endLine":7,"endColumn":25},{"ruleId":"1011","severity":1,"message":"1019","line":8,"column":10,"nodeType":"1013","messageId":"1014","endLine":8,"endColumn":37},{"ruleId":"1011","severity":1,"message":"1020","line":9,"column":8,"nodeType":"1013","messageId":"1014","endLine":9,"endColumn":17},{"ruleId":"1011","severity":1,"message":"1021","line":49,"column":11,"nodeType":"1013","messageId":"1014","endLine":49,"endColumn":18},{"ruleId":"1011","severity":1,"message":"1022","line":51,"column":9,"nodeType":"1013","messageId":"1014","endLine":51,"endColumn":18},{"ruleId":"1011","severity":1,"message":"1023","line":57,"column":20,"nodeType":"1013","messageId":"1014","endLine":57,"endColumn":25},{"ruleId":"1011","severity":1,"message":"1024","line":117,"column":29,"nodeType":"1013","messageId":"1014","endLine":117,"endColumn":32},{"ruleId":"1025","severity":1,"message":"1026","line":118,"column":33,"nodeType":"1027","messageId":"1028","endLine":118,"endColumn":44},{"ruleId":"1011","severity":1,"message":"1023","line":213,"column":22,"nodeType":"1013","messageId":"1014","endLine":213,"endColumn":27},{"ruleId":"1011","severity":1,"message":"1029","line":33,"column":7,"nodeType":"1013","messageId":"1014","endLine":33,"endColumn":43},{"ruleId":"1011","severity":1,"message":"1030","line":27,"column":34,"nodeType":"1013","messageId":"1014","endLine":27,"endColumn":39},{"ruleId":"1011","severity":1,"message":"1031","line":7,"column":10,"nodeType":"1013","messageId":"1014","endLine":7,"endColumn":15},{"ruleId":"1011","severity":1,"message":"1032","line":8,"column":27,"nodeType":"1013","messageId":"1014","endLine":8,"endColumn":41},{"ruleId":"1011","severity":1,"message":"1033","line":8,"column":43,"nodeType":"1013","messageId":"1014","endLine":8,"endColumn":56},{"ruleId":"1011","severity":1,"message":"1034","line":26,"column":9,"nodeType":"1013","messageId":"1014","endLine":26,"endColumn":24},{"ruleId":"1011","severity":1,"message":"1035","line":33,"column":9,"nodeType":"1013","messageId":"1014","endLine":33,"endColumn":22},{"ruleId":"1011","severity":1,"message":"1036","line":49,"column":9,"nodeType":"1013","messageId":"1014","endLine":49,"endColumn":22},{"ruleId":"1025","severity":1,"message":"1026","line":76,"column":9,"nodeType":"1027","messageId":"1028","endLine":76,"endColumn":20},{"ruleId":"1011","severity":1,"message":"1037","line":2,"column":10,"nodeType":"1013","messageId":"1014","endLine":2,"endColumn":14},{"ruleId":"1011","severity":1,"message":"1031","line":7,"column":10,"nodeType":"1013","messageId":"1014","endLine":7,"endColumn":15},{"ruleId":"1011","severity":1,"message":"1038","line":7,"column":17,"nodeType":"1013","messageId":"1014","endLine":7,"endColumn":24},{"ruleId":"1011","severity":1,"message":"1039","line":11,"column":8,"nodeType":"1013","messageId":"1014","endLine":11,"endColumn":31},{"ruleId":"1011","severity":1,"message":"1040","line":12,"column":8,"nodeType":"1013","messageId":"1014","endLine":12,"endColumn":18},{"ruleId":"1011","severity":1,"message":"1041","line":14,"column":19,"nodeType":"1013","messageId":"1014","endLine":14,"endColumn":29},{"ruleId":"1011","severity":1,"message":"1042","line":21,"column":3,"nodeType":"1013","messageId":"1014","endLine":21,"endColumn":21},{"ruleId":"1011","severity":1,"message":"1043","line":22,"column":3,"nodeType":"1013","messageId":"1014","endLine":22,"endColumn":17},{"ruleId":"1011","severity":1,"message":"1044","line":24,"column":34,"nodeType":"1013","messageId":"1014","endLine":24,"endColumn":40},{"ruleId":"1011","severity":1,"message":"1045","line":26,"column":8,"nodeType":"1013","messageId":"1014","endLine":26,"endColumn":20},{"ruleId":"1011","severity":1,"message":"1046","line":28,"column":8,"nodeType":"1013","messageId":"1014","endLine":28,"endColumn":19},{"ruleId":"1011","severity":1,"message":"1047","line":46,"column":43,"nodeType":"1013","messageId":"1014","endLine":46,"endColumn":53},{"ruleId":"1011","severity":1,"message":"1048","line":54,"column":20,"nodeType":"1013","messageId":"1014","endLine":54,"endColumn":28},{"ruleId":"1011","severity":1,"message":"1049","line":56,"column":10,"nodeType":"1013","messageId":"1014","endLine":56,"endColumn":31},{"ruleId":"1011","severity":1,"message":"1050","line":56,"column":33,"nodeType":"1013","messageId":"1014","endLine":56,"endColumn":57},{"ruleId":"1011","severity":1,"message":"1051","line":57,"column":10,"nodeType":"1013","messageId":"1014","endLine":57,"endColumn":14},{"ruleId":"1011","severity":1,"message":"1052","line":57,"column":16,"nodeType":"1013","messageId":"1014","endLine":57,"endColumn":23},{"ruleId":"1011","severity":1,"message":"1053","line":60,"column":10,"nodeType":"1013","messageId":"1014","endLine":60,"endColumn":21},{"ruleId":"1011","severity":1,"message":"1054","line":61,"column":10,"nodeType":"1013","messageId":"1014","endLine":61,"endColumn":25},{"ruleId":"1011","severity":1,"message":"1055","line":65,"column":10,"nodeType":"1013","messageId":"1014","endLine":65,"endColumn":17},{"ruleId":"1011","severity":1,"message":"1056","line":65,"column":19,"nodeType":"1013","messageId":"1014","endLine":65,"endColumn":29},{"ruleId":"1011","severity":1,"message":"1057","line":67,"column":10,"nodeType":"1013","messageId":"1014","endLine":67,"endColumn":19},{"ruleId":"1011","severity":1,"message":"1058","line":67,"column":21,"nodeType":"1013","messageId":"1014","endLine":67,"endColumn":27},{"ruleId":"1011","severity":1,"message":"1059","line":68,"column":10,"nodeType":"1013","messageId":"1014","endLine":68,"endColumn":19},{"ruleId":"1011","severity":1,"message":"1060","line":68,"column":21,"nodeType":"1013","messageId":"1014","endLine":68,"endColumn":32},{"ruleId":"1011","severity":1,"message":"1061","line":73,"column":10,"nodeType":"1013","messageId":"1014","endLine":73,"endColumn":22},{"ruleId":"1011","severity":1,"message":"1062","line":73,"column":24,"nodeType":"1013","messageId":"1014","endLine":73,"endColumn":39},{"ruleId":"1025","severity":1,"message":"1026","line":84,"column":9,"nodeType":"1027","messageId":"1028","endLine":84,"endColumn":20},{"ruleId":"1025","severity":1,"message":"1026","line":93,"column":9,"nodeType":"1027","messageId":"1028","endLine":93,"endColumn":20},{"ruleId":"1011","severity":1,"message":"1063","line":157,"column":9,"nodeType":"1013","messageId":"1014","endLine":157,"endColumn":20},{"ruleId":"1025","severity":1,"message":"1026","line":163,"column":5,"nodeType":"1027","messageId":"1028","endLine":163,"endColumn":16},{"ruleId":"1011","severity":1,"message":"1064","line":176,"column":9,"nodeType":"1013","messageId":"1014","endLine":176,"endColumn":16},{"ruleId":"1011","severity":1,"message":"1065","line":181,"column":9,"nodeType":"1013","messageId":"1014","endLine":181,"endColumn":20},{"ruleId":"1025","severity":1,"message":"1026","line":198,"column":5,"nodeType":"1027","messageId":"1028","endLine":198,"endColumn":16},{"ruleId":"1025","severity":1,"message":"1026","line":199,"column":5,"nodeType":"1027","messageId":"1028","endLine":199,"endColumn":16},{"ruleId":"1025","severity":1,"message":"1026","line":200,"column":5,"nodeType":"1027","messageId":"1028","endLine":200,"endColumn":16},{"ruleId":"1011","severity":1,"message":"1066","line":1,"column":41,"nodeType":"1013","messageId":"1014","endLine":1,"endColumn":49},{"ruleId":"1011","severity":1,"message":"1031","line":7,"column":10,"nodeType":"1013","messageId":"1014","endLine":7,"endColumn":15},{"ruleId":"1011","severity":1,"message":"1032","line":8,"column":27,"nodeType":"1013","messageId":"1014","endLine":8,"endColumn":41},{"ruleId":"1011","severity":1,"message":"1033","line":8,"column":43,"nodeType":"1013","messageId":"1014","endLine":8,"endColumn":56},{"ruleId":"1011","severity":1,"message":"1041","line":16,"column":10,"nodeType":"1013","messageId":"1014","endLine":16,"endColumn":20},{"ruleId":"1011","severity":1,"message":"1067","line":19,"column":8,"nodeType":"1013","messageId":"1014","endLine":19,"endColumn":22},{"ruleId":"1011","severity":1,"message":"1068","line":21,"column":8,"nodeType":"1013","messageId":"1014","endLine":21,"endColumn":21},{"ruleId":"1011","severity":1,"message":"1034","line":30,"column":9,"nodeType":"1013","messageId":"1014","endLine":30,"endColumn":24},{"ruleId":"1011","severity":1,"message":"1069","line":33,"column":9,"nodeType":"1013","messageId":"1014","endLine":33,"endColumn":17},{"ruleId":"1011","severity":1,"message":"1070","line":3,"column":8,"nodeType":"1013","messageId":"1014","endLine":3,"endColumn":15},{"ruleId":"1011","severity":1,"message":"1071","line":6,"column":8,"nodeType":"1013","messageId":"1014","endLine":6,"endColumn":23},{"ruleId":"1011","severity":1,"message":"1072","line":9,"column":8,"nodeType":"1013","messageId":"1014","endLine":9,"endColumn":16},{"ruleId":"1011","severity":1,"message":"1073","line":14,"column":8,"nodeType":"1013","messageId":"1014","endLine":14,"endColumn":18},{"ruleId":"1011","severity":1,"message":"1074","line":17,"column":8,"nodeType":"1013","messageId":"1014","endLine":17,"endColumn":16},{"ruleId":"1011","severity":1,"message":"1075","line":20,"column":8,"nodeType":"1013","messageId":"1014","endLine":20,"endColumn":19},{"ruleId":"1011","severity":1,"message":"1076","line":3,"column":10,"nodeType":"1013","messageId":"1014","endLine":3,"endColumn":14},{"ruleId":"1011","severity":1,"message":"1038","line":3,"column":16,"nodeType":"1013","messageId":"1014","endLine":3,"endColumn":23},{"ruleId":"1011","severity":1,"message":"1077","line":3,"column":37,"nodeType":"1013","messageId":"1014","endLine":3,"endColumn":43},{"ruleId":"1011","severity":1,"message":"1078","line":3,"column":45,"nodeType":"1013","messageId":"1014","endLine":3,"endColumn":57},{"ruleId":"1011","severity":1,"message":"1079","line":3,"column":59,"nodeType":"1013","messageId":"1014","endLine":3,"endColumn":63},{"ruleId":"1011","severity":1,"message":"1031","line":3,"column":65,"nodeType":"1013","messageId":"1014","endLine":3,"endColumn":70},{"ruleId":"1011","severity":1,"message":"1080","line":5,"column":8,"nodeType":"1013","messageId":"1014","endLine":5,"endColumn":22},{"ruleId":"1011","severity":1,"message":"1081","line":8,"column":8,"nodeType":"1013","messageId":"1014","endLine":8,"endColumn":15},{"ruleId":"1011","severity":1,"message":"1082","line":9,"column":8,"nodeType":"1013","messageId":"1014","endLine":9,"endColumn":13},{"ruleId":"1011","severity":1,"message":"1083","line":10,"column":8,"nodeType":"1013","messageId":"1014","endLine":10,"endColumn":16},{"ruleId":"1011","severity":1,"message":"1084","line":13,"column":7,"nodeType":"1013","messageId":"1014","endLine":13,"endColumn":23},{"ruleId":"1011","severity":1,"message":"1085","line":26,"column":7,"nodeType":"1013","messageId":"1014","endLine":26,"endColumn":11},{"ruleId":"1011","severity":1,"message":"1086","line":39,"column":7,"nodeType":"1013","messageId":"1014","endLine":39,"endColumn":16},{"ruleId":"1011","severity":1,"message":"1034","line":42,"column":9,"nodeType":"1013","messageId":"1014","endLine":42,"endColumn":24},{"ruleId":"1011","severity":1,"message":"1087","line":14,"column":3,"nodeType":"1013","messageId":"1014","endLine":14,"endColumn":18},{"ruleId":"1011","severity":1,"message":"1087","line":28,"column":3,"nodeType":"1013","messageId":"1014","endLine":28,"endColumn":18},{"ruleId":"1011","severity":1,"message":"1088","line":39,"column":7,"nodeType":"1013","messageId":"1014","endLine":39,"endColumn":42},{"ruleId":"1011","severity":1,"message":"1089","line":104,"column":3,"nodeType":"1013","messageId":"1014","endLine":104,"endColumn":22},{"ruleId":"1011","severity":1,"message":"1090","line":5,"column":10,"nodeType":"1013","messageId":"1014","endLine":5,"endColumn":24},{"ruleId":"1011","severity":1,"message":"1041","line":10,"column":10,"nodeType":"1013","messageId":"1014","endLine":10,"endColumn":20},{"ruleId":"1011","severity":1,"message":"1091","line":11,"column":8,"nodeType":"1013","messageId":"1014","endLine":11,"endColumn":18},{"ruleId":"1025","severity":1,"message":"1026","line":131,"column":1,"nodeType":"1027","messageId":"1028","endLine":131,"endColumn":12},{"ruleId":"1011","severity":1,"message":"1016","line":1,"column":17,"nodeType":"1013","messageId":"1014","endLine":1,"endColumn":26},{"ruleId":"1011","severity":1,"message":"1092","line":1,"column":28,"nodeType":"1013","messageId":"1014","endLine":1,"endColumn":39},{"ruleId":"1011","severity":1,"message":"1066","line":1,"column":41,"nodeType":"1013","messageId":"1014","endLine":1,"endColumn":49},{"ruleId":"1011","severity":1,"message":"1093","line":3,"column":8,"nodeType":"1013","messageId":"1014","endLine":3,"endColumn":14},{"ruleId":"1011","severity":1,"message":"1047","line":9,"column":43,"nodeType":"1013","messageId":"1014","endLine":9,"endColumn":53},{"ruleId":"1011","severity":1,"message":"1092","line":1,"column":27,"nodeType":"1013","messageId":"1014","endLine":1,"endColumn":38},{"ruleId":"1011","severity":1,"message":"1038","line":3,"column":10,"nodeType":"1013","messageId":"1014","endLine":3,"endColumn":17},{"ruleId":"1011","severity":1,"message":"1094","line":3,"column":25,"nodeType":"1013","messageId":"1014","endLine":3,"endColumn":33},{"ruleId":"1011","severity":1,"message":"1077","line":3,"column":35,"nodeType":"1013","messageId":"1014","endLine":3,"endColumn":41},{"ruleId":"1011","severity":1,"message":"1095","line":7,"column":10,"nodeType":"1013","messageId":"1014","endLine":7,"endColumn":23},{"ruleId":"1011","severity":1,"message":"1045","line":9,"column":8,"nodeType":"1013","messageId":"1014","endLine":9,"endColumn":20},{"ruleId":"1011","severity":1,"message":"1096","line":10,"column":8,"nodeType":"1013","messageId":"1014","endLine":10,"endColumn":26},{"ruleId":"1011","severity":1,"message":"1097","line":11,"column":8,"nodeType":"1013","messageId":"1014","endLine":11,"endColumn":25},{"ruleId":"1011","severity":1,"message":"1098","line":18,"column":7,"nodeType":"1013","messageId":"1014","endLine":18,"endColumn":28},{"ruleId":"1011","severity":1,"message":"1099","line":25,"column":7,"nodeType":"1013","messageId":"1014","endLine":25,"endColumn":12},{"ruleId":"1011","severity":1,"message":"1100","line":29,"column":7,"nodeType":"1013","messageId":"1014","endLine":29,"endColumn":16},{"ruleId":"1011","severity":1,"message":"1101","line":33,"column":7,"nodeType":"1013","messageId":"1014","endLine":33,"endColumn":12},{"ruleId":"1011","severity":1,"message":"1102","line":38,"column":7,"nodeType":"1013","messageId":"1014","endLine":38,"endColumn":14},{"ruleId":"1011","severity":1,"message":"1103","line":43,"column":10,"nodeType":"1013","messageId":"1014","endLine":43,"endColumn":19},{"ruleId":"1011","severity":1,"message":"1104","line":43,"column":21,"nodeType":"1013","messageId":"1014","endLine":43,"endColumn":33},{"ruleId":"1011","severity":1,"message":"1021","line":44,"column":11,"nodeType":"1013","messageId":"1014","endLine":44,"endColumn":18},{"ruleId":"1011","severity":1,"message":"1034","line":45,"column":9,"nodeType":"1013","messageId":"1014","endLine":45,"endColumn":24},{"ruleId":"1011","severity":1,"message":"1105","line":47,"column":9,"nodeType":"1013","messageId":"1014","endLine":47,"endColumn":20},{"ruleId":"1011","severity":1,"message":"1106","line":48,"column":9,"nodeType":"1013","messageId":"1014","endLine":48,"endColumn":17},{"ruleId":"1011","severity":1,"message":"1107","line":50,"column":9,"nodeType":"1013","messageId":"1014","endLine":50,"endColumn":20},{"ruleId":"1011","severity":1,"message":"1108","line":53,"column":9,"nodeType":"1013","messageId":"1014","endLine":53,"endColumn":26},{"ruleId":"1011","severity":1,"message":"1109","line":2,"column":8,"nodeType":"1013","messageId":"1014","endLine":2,"endColumn":14},{"ruleId":"1011","severity":1,"message":"1110","line":5,"column":9,"nodeType":"1013","messageId":"1014","endLine":5,"endColumn":23},{"ruleId":"1011","severity":1,"message":"1111","line":1,"column":17,"nodeType":"1013","messageId":"1014","endLine":1,"endColumn":24},{"ruleId":"1011","severity":1,"message":"1066","line":1,"column":26,"nodeType":"1013","messageId":"1014","endLine":1,"endColumn":34},{"ruleId":"1011","severity":1,"message":"1017","line":2,"column":8,"nodeType":"1013","messageId":"1014","endLine":2,"endColumn":17},{"ruleId":"1011","severity":1,"message":"1112","line":3,"column":10,"nodeType":"1013","messageId":"1014","endLine":3,"endColumn":14},{"ruleId":"1011","severity":1,"message":"1041","line":4,"column":10,"nodeType":"1013","messageId":"1014","endLine":4,"endColumn":20},{"ruleId":"1011","severity":1,"message":"1109","line":5,"column":8,"nodeType":"1013","messageId":"1014","endLine":5,"endColumn":14},{"ruleId":"1011","severity":1,"message":"1113","line":6,"column":10,"nodeType":"1013","messageId":"1014","endLine":6,"endColumn":18},{"ruleId":"1011","severity":1,"message":"1114","line":7,"column":10,"nodeType":"1013","messageId":"1014","endLine":7,"endColumn":18},{"ruleId":"1011","severity":1,"message":"1115","line":7,"column":20,"nodeType":"1013","messageId":"1014","endLine":7,"endColumn":35},{"ruleId":"1011","severity":1,"message":"1037","line":9,"column":10,"nodeType":"1013","messageId":"1014","endLine":9,"endColumn":14},{"ruleId":"1011","severity":1,"message":"1031","line":10,"column":16,"nodeType":"1013","messageId":"1014","endLine":10,"endColumn":21},{"ruleId":"1011","severity":1,"message":"1116","line":11,"column":8,"nodeType":"1013","messageId":"1014","endLine":11,"endColumn":15},{"ruleId":"1011","severity":1,"message":"1117","line":12,"column":10,"nodeType":"1013","messageId":"1014","endLine":12,"endColumn":26},{"ruleId":"1011","severity":1,"message":"1118","line":13,"column":10,"nodeType":"1013","messageId":"1014","endLine":13,"endColumn":26},{"ruleId":"1011","severity":1,"message":"1119","line":13,"column":28,"nodeType":"1013","messageId":"1014","endLine":13,"endColumn":42},{"ruleId":"1011","severity":1,"message":"1120","line":13,"column":44,"nodeType":"1013","messageId":"1014","endLine":13,"endColumn":65},{"ruleId":"1011","severity":1,"message":"1121","line":14,"column":10,"nodeType":"1013","messageId":"1014","endLine":14,"endColumn":24},{"ruleId":"1011","severity":1,"message":"1122","line":2,"column":8,"nodeType":"1013","messageId":"1014","endLine":2,"endColumn":17},{"ruleId":"1011","severity":1,"message":"1076","line":4,"column":10,"nodeType":"1013","messageId":"1014","endLine":4,"endColumn":14},{"ruleId":"1011","severity":1,"message":"1079","line":4,"column":16,"nodeType":"1013","messageId":"1014","endLine":4,"endColumn":20},{"ruleId":"1011","severity":1,"message":"1123","line":15,"column":3,"nodeType":"1013","messageId":"1014","endLine":15,"endColumn":16},{"ruleId":"1011","severity":1,"message":"1124","line":25,"column":7,"nodeType":"1013","messageId":"1014","endLine":25,"endColumn":20},{"ruleId":"1125","severity":1,"message":"1126","line":25,"column":23,"nodeType":"1127","messageId":"1128","endLine":25,"endColumn":32},{"ruleId":"1025","severity":1,"message":"1026","line":41,"column":9,"nodeType":"1027","messageId":"1028","endLine":41,"endColumn":20},{"ruleId":"1011","severity":1,"message":"1129","line":49,"column":9,"nodeType":"1013","messageId":"1014","endLine":49,"endColumn":21},{"ruleId":"1011","severity":1,"message":"1130","line":58,"column":9,"nodeType":"1013","messageId":"1014","endLine":58,"endColumn":19},{"ruleId":"1011","severity":1,"message":"1131","line":60,"column":9,"nodeType":"1013","messageId":"1014","endLine":60,"endColumn":18},{"ruleId":"1011","severity":1,"message":"1132","line":62,"column":9,"nodeType":"1013","messageId":"1014","endLine":62,"endColumn":16},{"ruleId":"1011","severity":1,"message":"1133","line":65,"column":5,"nodeType":"1013","messageId":"1014","endLine":65,"endColumn":16},{"ruleId":"1011","severity":1,"message":"1134","line":94,"column":9,"nodeType":"1013","messageId":"1014","endLine":94,"endColumn":15},{"ruleId":"1125","severity":1,"message":"1126","line":94,"column":27,"nodeType":"1127","messageId":"1128","endLine":94,"endColumn":36},{"ruleId":"1011","severity":1,"message":"1135","line":15,"column":8,"nodeType":"1013","messageId":"1014","endLine":15,"endColumn":14},{"ruleId":"1011","severity":1,"message":"1136","line":110,"column":5,"nodeType":"1013","messageId":"1014","endLine":110,"endColumn":32},{"ruleId":"1011","severity":1,"message":"1137","line":113,"column":9,"nodeType":"1013","messageId":"1014","endLine":113,"endColumn":31},{"ruleId":"1011","severity":1,"message":"1138","line":115,"column":9,"nodeType":"1013","messageId":"1014","endLine":115,"endColumn":18},{"ruleId":"1025","severity":1,"message":"1026","line":174,"column":5,"nodeType":"1027","messageId":"1028","endLine":174,"endColumn":16},{"ruleId":"1011","severity":1,"message":"1139","line":199,"column":9,"nodeType":"1013","messageId":"1014","endLine":199,"endColumn":30},{"ruleId":"1011","severity":1,"message":"1140","line":4,"column":10,"nodeType":"1013","messageId":"1014","endLine":4,"endColumn":31},{"ruleId":"1011","severity":1,"message":"1141","line":101,"column":31,"nodeType":"1013","messageId":"1014","endLine":101,"endColumn":47},{"ruleId":"1011","severity":1,"message":"1066","line":1,"column":26,"nodeType":"1013","messageId":"1014","endLine":1,"endColumn":34},{"ruleId":"1011","severity":1,"message":"1116","line":8,"column":8,"nodeType":"1013","messageId":"1014","endLine":8,"endColumn":15},{"ruleId":"1011","severity":1,"message":"1122","line":9,"column":8,"nodeType":"1013","messageId":"1014","endLine":9,"endColumn":17},{"ruleId":"1011","severity":1,"message":"1142","line":24,"column":55,"nodeType":"1013","messageId":"1014","endLine":24,"endColumn":62},{"ruleId":"1011","severity":1,"message":"1143","line":24,"column":85,"nodeType":"1013","messageId":"1014","endLine":24,"endColumn":93},{"ruleId":"1011","severity":1,"message":"1144","line":24,"column":95,"nodeType":"1013","messageId":"1014","endLine":24,"endColumn":102},{"ruleId":"1011","severity":1,"message":"1145","line":49,"column":9,"nodeType":"1013","messageId":"1014","endLine":49,"endColumn":27},{"ruleId":"1011","severity":1,"message":"1037","line":2,"column":10,"nodeType":"1013","messageId":"1014","endLine":2,"endColumn":14},{"ruleId":"1011","severity":1,"message":"1146","line":6,"column":10,"nodeType":"1013","messageId":"1014","endLine":6,"endColumn":21},{"ruleId":"1011","severity":1,"message":"1147","line":9,"column":10,"nodeType":"1013","messageId":"1014","endLine":9,"endColumn":24},{"ruleId":"1011","severity":1,"message":"1148","line":9,"column":26,"nodeType":"1013","messageId":"1014","endLine":9,"endColumn":43},{"ruleId":"1011","severity":1,"message":"1149","line":9,"column":45,"nodeType":"1013","messageId":"1014","endLine":9,"endColumn":56},{"ruleId":"1011","severity":1,"message":"1091","line":12,"column":8,"nodeType":"1013","messageId":"1014","endLine":12,"endColumn":18},{"ruleId":"1011","severity":1,"message":"1150","line":14,"column":10,"nodeType":"1013","messageId":"1014","endLine":14,"endColumn":20},{"ruleId":"1011","severity":1,"message":"1151","line":15,"column":8,"nodeType":"1013","messageId":"1014","endLine":15,"endColumn":19},{"ruleId":"1011","severity":1,"message":"1152","line":17,"column":71,"nodeType":"1013","messageId":"1014","endLine":17,"endColumn":94},{"ruleId":"1011","severity":1,"message":"1143","line":36,"column":62,"nodeType":"1013","messageId":"1014","endLine":36,"endColumn":70},{"ruleId":"1011","severity":1,"message":"1153","line":39,"column":10,"nodeType":"1013","messageId":"1014","endLine":39,"endColumn":14},{"ruleId":"1011","severity":1,"message":"1154","line":39,"column":15,"nodeType":"1013","messageId":"1014","endLine":39,"endColumn":22},{"ruleId":"1011","severity":1,"message":"1155","line":44,"column":9,"nodeType":"1013","messageId":"1014","endLine":44,"endColumn":16},{"ruleId":"1025","severity":1,"message":"1026","line":67,"column":9,"nodeType":"1027","messageId":"1028","endLine":67,"endColumn":20},{"ruleId":"1025","severity":1,"message":"1026","line":98,"column":7,"nodeType":"1027","messageId":"1028","endLine":98,"endColumn":18},{"ruleId":"1156","severity":1,"message":"1157","line":111,"column":13,"nodeType":"1158","messageId":"1159","endLine":111,"endColumn":37,"fix":"1160"},{"ruleId":"1156","severity":1,"message":"1157","line":112,"column":13,"nodeType":"1158","messageId":"1159","endLine":112,"endColumn":31,"fix":"1161"},{"ruleId":"1011","severity":1,"message":"1162","line":112,"column":13,"nodeType":"1013","messageId":"1014","endLine":112,"endColumn":17},{"ruleId":"1156","severity":1,"message":"1157","line":113,"column":13,"nodeType":"1158","messageId":"1159","endLine":113,"endColumn":37,"fix":"1163"},{"ruleId":"1025","severity":1,"message":"1026","line":117,"column":9,"nodeType":"1027","messageId":"1028","endLine":117,"endColumn":20},{"ruleId":"1156","severity":1,"message":"1157","line":118,"column":15,"nodeType":"1158","messageId":"1159","endLine":118,"endColumn":46,"fix":"1164"},{"ruleId":"1025","severity":1,"message":"1026","line":120,"column":9,"nodeType":"1027","messageId":"1028","endLine":120,"endColumn":20},{"ruleId":"1025","severity":1,"message":"1026","line":122,"column":9,"nodeType":"1027","messageId":"1028","endLine":122,"endColumn":20},{"ruleId":"1025","severity":1,"message":"1026","line":123,"column":9,"nodeType":"1027","messageId":"1028","endLine":123,"endColumn":20},{"ruleId":"1025","severity":1,"message":"1026","line":130,"column":7,"nodeType":"1027","messageId":"1028","endLine":130,"endColumn":18},{"ruleId":"1011","severity":1,"message":"1165","line":146,"column":9,"nodeType":"1013","messageId":"1014","endLine":146,"endColumn":36},{"ruleId":"1011","severity":1,"message":"1166","line":4,"column":10,"nodeType":"1013","messageId":"1014","endLine":4,"endColumn":22},{"ruleId":"1011","severity":1,"message":"1167","line":4,"column":24,"nodeType":"1013","messageId":"1014","endLine":4,"endColumn":31},{"ruleId":"1011","severity":1,"message":"1168","line":4,"column":33,"nodeType":"1013","messageId":"1014","endLine":4,"endColumn":41},{"ruleId":"1011","severity":1,"message":"1169","line":4,"column":43,"nodeType":"1013","messageId":"1014","endLine":4,"endColumn":50},{"ruleId":"1011","severity":1,"message":"1170","line":28,"column":3,"nodeType":"1013","messageId":"1014","endLine":28,"endColumn":7},{"ruleId":"1011","severity":1,"message":"1171","line":31,"column":3,"nodeType":"1013","messageId":"1014","endLine":31,"endColumn":13},{"ruleId":"1025","severity":1,"message":"1026","line":33,"column":3,"nodeType":"1027","messageId":"1028","endLine":33,"endColumn":14},{"ruleId":"1011","severity":1,"message":"1172","line":23,"column":7,"nodeType":"1013","messageId":"1014","endLine":23,"endColumn":25},{"ruleId":"1011","severity":1,"message":"1173","line":39,"column":3,"nodeType":"1013","messageId":"1014","endLine":39,"endColumn":14},{"ruleId":"1011","severity":1,"message":"1174","line":43,"column":3,"nodeType":"1013","messageId":"1014","endLine":43,"endColumn":10},{"ruleId":"1011","severity":1,"message":"1175","line":49,"column":9,"nodeType":"1013","messageId":"1014","endLine":49,"endColumn":30},{"ruleId":"1001","replacedBy":"1176"},{"ruleId":"1003","replacedBy":"1177"},{"ruleId":"1005","replacedBy":"1178"},{"ruleId":"1007","replacedBy":"1179"},{"ruleId":"1009","replacedBy":"1180"},{"ruleId":"1011","severity":1,"message":"1166","line":4,"column":23,"nodeType":"1013","messageId":"1014","endLine":4,"endColumn":35},{"ruleId":"1011","severity":1,"message":"1167","line":4,"column":37,"nodeType":"1013","messageId":"1014","endLine":4,"endColumn":44},{"ruleId":"1011","severity":1,"message":"1169","line":4,"column":56,"nodeType":"1013","messageId":"1014","endLine":4,"endColumn":63},{"ruleId":"1011","severity":1,"message":"1148","line":8,"column":26,"nodeType":"1013","messageId":"1014","endLine":8,"endColumn":43},{"ruleId":"1011","severity":1,"message":"1181","line":41,"column":28,"nodeType":"1013","messageId":"1014","endLine":41,"endColumn":42},{"ruleId":"1011","severity":1,"message":"1182","line":44,"column":47,"nodeType":"1013","messageId":"1014","endLine":44,"endColumn":63},{"ruleId":"1011","severity":1,"message":"1183","line":8,"column":8,"nodeType":"1013","messageId":"1014","endLine":8,"endColumn":17},{"ruleId":"1011","severity":1,"message":"1184","line":53,"column":3,"nodeType":"1013","messageId":"1014","endLine":53,"endColumn":12},{"ruleId":"1011","severity":1,"message":"1185","line":54,"column":3,"nodeType":"1013","messageId":"1014","endLine":54,"endColumn":6},{"ruleId":"1025","severity":1,"message":"1026","line":118,"column":7,"nodeType":"1027","messageId":"1028","endLine":118,"endColumn":18},{"ruleId":"1011","severity":1,"message":"1144","line":80,"column":58,"nodeType":"1013","messageId":"1014","endLine":80,"endColumn":65},{"ruleId":"1025","severity":1,"message":"1026","line":81,"column":3,"nodeType":"1027","messageId":"1028","endLine":81,"endColumn":14},{"ruleId":"1011","severity":1,"message":"1186","line":3,"column":8,"nodeType":"1013","messageId":"1014","endLine":3,"endColumn":15},{"ruleId":"1011","severity":1,"message":"1187","line":4,"column":8,"nodeType":"1013","messageId":"1014","endLine":4,"endColumn":15},{"ruleId":"1011","severity":1,"message":"1043","line":8,"column":10,"nodeType":"1013","messageId":"1014","endLine":8,"endColumn":24},{"ruleId":"1011","severity":1,"message":"1188","line":44,"column":9,"nodeType":"1013","messageId":"1014","endLine":44,"endColumn":16},{"ruleId":"1011","severity":1,"message":"1189","line":3,"column":10,"nodeType":"1013","messageId":"1014","endLine":3,"endColumn":21},{"ruleId":"1011","severity":1,"message":"1190","line":11,"column":33,"nodeType":"1013","messageId":"1014","endLine":11,"endColumn":39},{"ruleId":"1125","severity":1,"message":"1126","line":12,"column":74,"nodeType":"1127","messageId":"1128","endLine":12,"endColumn":82},{"ruleId":"1011","severity":1,"message":"1190","line":19,"column":33,"nodeType":"1013","messageId":"1014","endLine":19,"endColumn":39},{"ruleId":"1125","severity":1,"message":"1126","line":20,"column":58,"nodeType":"1127","messageId":"1128","endLine":20,"endColumn":66},{"ruleId":"1011","severity":1,"message":"1191","line":46,"column":36,"nodeType":"1013","messageId":"1014","endLine":46,"endColumn":40},{"ruleId":"1011","severity":1,"message":"1017","line":2,"column":8,"nodeType":"1013","messageId":"1014","endLine":2,"endColumn":17},{"ruleId":"1011","severity":1,"message":"1117","line":6,"column":10,"nodeType":"1013","messageId":"1014","endLine":6,"endColumn":26},{"ruleId":"1011","severity":1,"message":"1146","line":7,"column":10,"nodeType":"1013","messageId":"1014","endLine":7,"endColumn":21},{"ruleId":"1011","severity":1,"message":"1192","line":7,"column":23,"nodeType":"1013","messageId":"1014","endLine":7,"endColumn":30},{"ruleId":"1011","severity":1,"message":"1193","line":9,"column":8,"nodeType":"1013","messageId":"1014","endLine":9,"endColumn":16},{"ruleId":"1011","severity":1,"message":"1194","line":10,"column":31,"nodeType":"1013","messageId":"1014","endLine":10,"endColumn":38},{"ruleId":"1011","severity":1,"message":"1024","line":26,"column":67,"nodeType":"1013","messageId":"1014","endLine":26,"endColumn":70},{"ruleId":"1011","severity":1,"message":"1144","line":26,"column":72,"nodeType":"1013","messageId":"1014","endLine":26,"endColumn":79},{"ruleId":"1011","severity":1,"message":"1103","line":28,"column":10,"nodeType":"1013","messageId":"1014","endLine":28,"endColumn":19},{"ruleId":"1011","severity":1,"message":"1195","line":29,"column":9,"nodeType":"1013","messageId":"1014","endLine":29,"endColumn":17},{"ruleId":"1025","severity":1,"message":"1026","line":48,"column":3,"nodeType":"1027","messageId":"1028","endLine":48,"endColumn":14},{"ruleId":"1025","severity":1,"message":"1026","line":49,"column":3,"nodeType":"1027","messageId":"1028","endLine":49,"endColumn":14},{"ruleId":"1011","severity":1,"message":"1196","line":14,"column":78,"nodeType":"1013","messageId":"1014","endLine":14,"endColumn":92},{"ruleId":"1025","severity":1,"message":"1026","line":43,"column":5,"nodeType":"1027","messageId":"1028","endLine":43,"endColumn":16},{"ruleId":"1025","severity":1,"message":"1026","line":21,"column":2,"nodeType":"1027","messageId":"1028","endLine":21,"endColumn":13},{"ruleId":"1025","severity":1,"message":"1026","line":22,"column":2,"nodeType":"1027","messageId":"1028","endLine":22,"endColumn":13},{"ruleId":"1011","severity":1,"message":"1197","line":2,"column":10,"nodeType":"1013","messageId":"1014","endLine":2,"endColumn":16},{"ruleId":"1011","severity":1,"message":"1198","line":20,"column":129,"nodeType":"1013","messageId":"1014","endLine":20,"endColumn":139},{"ruleId":"1011","severity":1,"message":"1199","line":10,"column":83,"nodeType":"1013","messageId":"1014","endLine":10,"endColumn":103},{"ruleId":"1011","severity":1,"message":"1200","line":84,"column":9,"nodeType":"1013","messageId":"1014","endLine":84,"endColumn":29},{"ruleId":"1011","severity":1,"message":"1038","line":3,"column":10,"nodeType":"1013","messageId":"1014","endLine":3,"endColumn":17},{"ruleId":"1011","severity":1,"message":"1094","line":3,"column":25,"nodeType":"1013","messageId":"1014","endLine":3,"endColumn":33},{"ruleId":"1011","severity":1,"message":"1098","line":18,"column":7,"nodeType":"1013","messageId":"1014","endLine":18,"endColumn":28},{"ruleId":"1011","severity":1,"message":"1099","line":25,"column":7,"nodeType":"1013","messageId":"1014","endLine":25,"endColumn":12},{"ruleId":"1011","severity":1,"message":"1100","line":29,"column":7,"nodeType":"1013","messageId":"1014","endLine":29,"endColumn":16},{"ruleId":"1011","severity":1,"message":"1102","line":38,"column":7,"nodeType":"1013","messageId":"1014","endLine":38,"endColumn":14},{"ruleId":"1011","severity":1,"message":"1201","line":46,"column":9,"nodeType":"1013","messageId":"1014","endLine":46,"endColumn":25},{"ruleId":"1011","severity":1,"message":"1105","line":47,"column":9,"nodeType":"1013","messageId":"1014","endLine":47,"endColumn":20},{"ruleId":"1011","severity":1,"message":"1106","line":48,"column":9,"nodeType":"1013","messageId":"1014","endLine":48,"endColumn":17},{"ruleId":"1011","severity":1,"message":"1107","line":50,"column":9,"nodeType":"1013","messageId":"1014","endLine":50,"endColumn":20},{"ruleId":"1011","severity":1,"message":"1017","line":4,"column":8,"nodeType":"1013","messageId":"1014","endLine":4,"endColumn":17},{"ruleId":"1011","severity":1,"message":"1202","line":6,"column":8,"nodeType":"1013","messageId":"1014","endLine":6,"endColumn":22},{"ruleId":"1011","severity":1,"message":"1203","line":4,"column":8,"nodeType":"1013","messageId":"1014","endLine":4,"endColumn":23},{"ruleId":"1011","severity":1,"message":"1121","line":6,"column":10,"nodeType":"1013","messageId":"1014","endLine":6,"endColumn":24},{"ruleId":"1011","severity":1,"message":"1117","line":7,"column":10,"nodeType":"1013","messageId":"1014","endLine":7,"endColumn":26},{"ruleId":"1011","severity":1,"message":"1123","line":15,"column":3,"nodeType":"1013","messageId":"1014","endLine":15,"endColumn":16},{"ruleId":"1125","severity":1,"message":"1126","line":24,"column":23,"nodeType":"1127","messageId":"1128","endLine":24,"endColumn":32},{"ruleId":"1025","severity":1,"message":"1026","line":40,"column":9,"nodeType":"1027","messageId":"1028","endLine":40,"endColumn":20},{"ruleId":"1011","severity":1,"message":"1129","line":48,"column":9,"nodeType":"1013","messageId":"1014","endLine":48,"endColumn":21},{"ruleId":"1011","severity":1,"message":"1134","line":93,"column":9,"nodeType":"1013","messageId":"1014","endLine":93,"endColumn":15},{"ruleId":"1125","severity":1,"message":"1126","line":93,"column":27,"nodeType":"1127","messageId":"1128","endLine":93,"endColumn":36},{"ruleId":"1011","severity":1,"message":"1066","line":1,"column":41,"nodeType":"1013","messageId":"1014","endLine":1,"endColumn":49},{"ruleId":"1011","severity":1,"message":"1116","line":11,"column":8,"nodeType":"1013","messageId":"1014","endLine":11,"endColumn":15},{"ruleId":"1011","severity":1,"message":"1204","line":13,"column":8,"nodeType":"1013","messageId":"1014","endLine":13,"endColumn":19},{"ruleId":"1011","severity":1,"message":"1205","line":25,"column":11,"nodeType":"1013","messageId":"1014","endLine":25,"endColumn":20},{"ruleId":"1011","severity":1,"message":"1206","line":35,"column":9,"nodeType":"1013","messageId":"1014","endLine":35,"endColumn":20},{"ruleId":"1011","severity":1,"message":"1207","line":40,"column":9,"nodeType":"1013","messageId":"1014","endLine":40,"endColumn":18},{"ruleId":"1011","severity":1,"message":"1092","line":1,"column":27,"nodeType":"1013","messageId":"1014","endLine":1,"endColumn":38},{"ruleId":"1011","severity":1,"message":"1038","line":3,"column":10,"nodeType":"1013","messageId":"1014","endLine":3,"endColumn":17},{"ruleId":"1011","severity":1,"message":"1094","line":3,"column":25,"nodeType":"1013","messageId":"1014","endLine":3,"endColumn":33},{"ruleId":"1011","severity":1,"message":"1077","line":3,"column":35,"nodeType":"1013","messageId":"1014","endLine":3,"endColumn":41},{"ruleId":"1011","severity":1,"message":"1095","line":7,"column":10,"nodeType":"1013","messageId":"1014","endLine":7,"endColumn":23},{"ruleId":"1011","severity":1,"message":"1045","line":9,"column":8,"nodeType":"1013","messageId":"1014","endLine":9,"endColumn":20},{"ruleId":"1011","severity":1,"message":"1096","line":10,"column":8,"nodeType":"1013","messageId":"1014","endLine":10,"endColumn":26},{"ruleId":"1011","severity":1,"message":"1097","line":11,"column":8,"nodeType":"1013","messageId":"1014","endLine":11,"endColumn":25},{"ruleId":"1011","severity":1,"message":"1098","line":18,"column":7,"nodeType":"1013","messageId":"1014","endLine":18,"endColumn":28},{"ruleId":"1011","severity":1,"message":"1099","line":25,"column":7,"nodeType":"1013","messageId":"1014","endLine":25,"endColumn":12},{"ruleId":"1011","severity":1,"message":"1100","line":29,"column":7,"nodeType":"1013","messageId":"1014","endLine":29,"endColumn":16},{"ruleId":"1011","severity":1,"message":"1101","line":33,"column":7,"nodeType":"1013","messageId":"1014","endLine":33,"endColumn":12},{"ruleId":"1011","severity":1,"message":"1102","line":38,"column":7,"nodeType":"1013","messageId":"1014","endLine":38,"endColumn":14},{"ruleId":"1011","severity":1,"message":"1103","line":43,"column":10,"nodeType":"1013","messageId":"1014","endLine":43,"endColumn":19},{"ruleId":"1011","severity":1,"message":"1104","line":43,"column":21,"nodeType":"1013","messageId":"1014","endLine":43,"endColumn":33},{"ruleId":"1011","severity":1,"message":"1021","line":44,"column":11,"nodeType":"1013","messageId":"1014","endLine":44,"endColumn":18},{"ruleId":"1011","severity":1,"message":"1034","line":45,"column":9,"nodeType":"1013","messageId":"1014","endLine":45,"endColumn":24},{"ruleId":"1011","severity":1,"message":"1105","line":47,"column":9,"nodeType":"1013","messageId":"1014","endLine":47,"endColumn":20},{"ruleId":"1011","severity":1,"message":"1106","line":48,"column":9,"nodeType":"1013","messageId":"1014","endLine":48,"endColumn":17},{"ruleId":"1011","severity":1,"message":"1107","line":50,"column":9,"nodeType":"1013","messageId":"1014","endLine":50,"endColumn":20},{"ruleId":"1011","severity":1,"message":"1108","line":53,"column":9,"nodeType":"1013","messageId":"1014","endLine":53,"endColumn":26},{"ruleId":"1011","severity":1,"message":"1038","line":6,"column":21,"nodeType":"1013","messageId":"1014","endLine":6,"endColumn":28},{"ruleId":"1011","severity":1,"message":"1208","line":26,"column":7,"nodeType":"1013","messageId":"1014","endLine":26,"endColumn":9},{"ruleId":"1025","severity":1,"message":"1026","line":64,"column":3,"nodeType":"1027","messageId":"1028","endLine":64,"endColumn":14},{"ruleId":"1025","severity":1,"message":"1026","line":99,"column":3,"nodeType":"1027","messageId":"1028","endLine":99,"endColumn":14},{"ruleId":"1011","severity":1,"message":"1209","line":106,"column":9,"nodeType":"1013","messageId":"1014","endLine":106,"endColumn":33},{"ruleId":"1025","severity":1,"message":"1026","line":156,"column":3,"nodeType":"1027","messageId":"1028","endLine":156,"endColumn":14},{"ruleId":"1011","severity":1,"message":"1077","line":3,"column":10,"nodeType":"1013","messageId":"1014","endLine":3,"endColumn":16},{"ruleId":"1011","severity":1,"message":"1210","line":4,"column":10,"nodeType":"1013","messageId":"1014","endLine":4,"endColumn":17},{"ruleId":"1011","severity":1,"message":"1078","line":5,"column":23,"nodeType":"1013","messageId":"1014","endLine":5,"endColumn":35},{"ruleId":"1011","severity":1,"message":"1211","line":7,"column":8,"nodeType":"1013","messageId":"1014","endLine":7,"endColumn":32},{"ruleId":"1011","severity":1,"message":"1212","line":8,"column":10,"nodeType":"1013","messageId":"1014","endLine":8,"endColumn":47},{"ruleId":"1011","severity":1,"message":"1213","line":8,"column":49,"nodeType":"1013","messageId":"1014","endLine":8,"endColumn":60},{"ruleId":"1011","severity":1,"message":"1214","line":30,"column":7,"nodeType":"1013","messageId":"1014","endLine":30,"endColumn":15},{"ruleId":"1011","severity":1,"message":"1215","line":34,"column":7,"nodeType":"1013","messageId":"1014","endLine":34,"endColumn":18},{"ruleId":"1011","severity":1,"message":"1034","line":47,"column":9,"nodeType":"1013","messageId":"1014","endLine":47,"endColumn":24},{"ruleId":"1025","severity":1,"message":"1026","line":75,"column":3,"nodeType":"1027","messageId":"1028","endLine":75,"endColumn":14},{"ruleId":"1025","severity":1,"message":"1026","line":104,"column":3,"nodeType":"1027","messageId":"1028","endLine":104,"endColumn":14},{"ruleId":"1025","severity":1,"message":"1026","line":106,"column":3,"nodeType":"1027","messageId":"1028","endLine":106,"endColumn":14},{"ruleId":"1025","severity":1,"message":"1026","line":107,"column":3,"nodeType":"1027","messageId":"1028","endLine":107,"endColumn":14},{"ruleId":"1025","severity":1,"message":"1026","line":109,"column":3,"nodeType":"1027","messageId":"1028","endLine":109,"endColumn":14},{"ruleId":"1011","severity":1,"message":"1216","line":4,"column":44,"nodeType":"1013","messageId":"1014","endLine":4,"endColumn":50},{"ruleId":"1011","severity":1,"message":"1217","line":7,"column":24,"nodeType":"1013","messageId":"1014","endLine":7,"endColumn":35},{"ruleId":"1011","severity":1,"message":"1218","line":7,"column":37,"nodeType":"1013","messageId":"1014","endLine":7,"endColumn":51},{"ruleId":"1011","severity":1,"message":"1219","line":36,"column":7,"nodeType":"1013","messageId":"1014","endLine":36,"endColumn":20},"lines-around-directive",["1220"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'ApplyForIfos' is assigned a value but never used.","'useEffect' is defined but never used.","'BigNumber' is defined but never used.","'rabbitmintingfarm' is defined but never used.","'RABBIT_MINTING_FARM_ADDRESS' is defined but never used.","'multicall' is defined but never used.","'account' is assigned a value but never used.","'showModal' is assigned a value but never used.","'index' is defined but never used.","'pid' is defined but never used.","no-console","Unexpected console statement.","MemberExpression","unexpected","'fetchTranslationsForSelectedLanguage' is assigned a value but never used.","'title' is defined but never used.","'Image' is defined but never used.","'CAKE_PER_BLOCK' is defined but never used.","'CAKE_POOL_PID' is defined but never used.","'TranslateString' is assigned a value but never used.","'rbsbnblpPrice' is assigned a value but never used.","'inactiveFarms' is assigned a value but never used.","'Link' is defined but never used.","'Heading' is defined but never used.","'ExpandableSectionButton' is defined but never used.","'FlexLayout' is defined but never used.","'QuoteToken' is defined but never used.","'getRbsTokenAddress' is defined but never used.","'getWbnbAddress' is defined but never used.","'useRbs' is defined but never used.","'UnlockButton' is defined but never used.","'ClaimButton' is defined but never used.","'farmsProps' is defined but never used.","'ethereum' is assigned a value but never used.","'showExpandableSection' is assigned a value but never used.","'setShowExpandableSection' is assigned a value but never used.","'veri' is assigned a value but never used.","'setVeri' is assigned a value but never used.","'tokenamount' is assigned a value but never used.","'contractbalance' is assigned a value but never used.","'approve' is assigned a value but never used.","'setApprove' is assigned a value but never used.","'buytokken' is assigned a value but never used.","'setBuy' is assigned a value but never used.","'pickasset' is assigned a value but never used.","'setContract' is assigned a value but never used.","'buyTokenWBNB' is assigned a value but never used.","'setBuyTokenWBNB' is assigned a value but never used.","'ClaimExpand' is assigned a value but never used.","'busdbnb' is assigned a value but never used.","'buyWithWBNB' is assigned a value but never used.","'useState' is defined but never used.","'FarmTabButtons' is defined but never used.","'DelegateFarms' is defined but never used.","'bnbPrice' is assigned a value but never used.","'Socials' is defined but never used.","'FarmStakingCard' is defined but never used.","'TopFarms' is defined but never used.","'TokensCard' is defined but never used.","'Sitestat' is defined but never used.","'LaunchPools' is defined but never used.","'Text' is defined but never used.","'Button' is defined but never used.","'LinkExternal' is defined but never used.","'Flex' is defined but never used.","'LeafContainers' is defined but never used.","'IfoCard' is defined but never used.","'Title' is defined but never used.","'IfoCards' is defined but never used.","'LaunchIfoCallout' is assigned a value but never used.","'List' is assigned a value but never used.","'activeIfo' is assigned a value but never used.","'decimalsToRound' is assigned a value but never used.","'MANUAL_POOL_AUTO_COMPOUND_FREQUENCY' is assigned a value but never used.","'tokenTaxRate' is defined but never used.","'communityFarms' is defined but never used.","'TokenInput' is defined but never used.","'useCallback' is defined but never used.","'styled' is defined but never used.","'CardBody' is defined but never used.","'useAllHarvest' is defined but never used.","'CakeHarvestBalance' is defined but never used.","'CakeWalletBalance' is defined but never used.","'StyledFarmStakingCard' is assigned a value but never used.","'Block' is assigned a value but never used.","'CardImage' is assigned a value but never used.","'Label' is assigned a value but never used.","'Actions' is assigned a value but never used.","'pendingTx' is assigned a value but never used.","'setPendingTx' is assigned a value but never used.","'cakeBalance' is assigned a value but never used.","'eggPrice' is assigned a value but never used.","'earningsSum' is assigned a value but never used.","'balancesWithValue' is assigned a value but never used.","'Slider' is defined but never used.","'sliderSettings' is assigned a value but never used.","'useMemo' is defined but never used.","'Farm' is defined but never used.","'provider' is defined but never used.","'useFarms' is defined but never used.","'usePriceBnbBusd' is defined but never used.","'Divider' is defined but never used.","'getBalanceNumber' is defined but never used.","'useBurnedBalance' is defined but never used.","'useTotalSupply' is defined but never used.","'useCustomTokenBalance' is defined but never used.","'getCakeAddress' is defined but never used.","'CardValue' is defined but never used.","'useTotalValue' is defined but never used.","'addToMetamask' is assigned a value but never used.","func-names","Unexpected unnamed function.","FunctionExpression","unnamed","'cakePriceUsd' is assigned a value but never used.","'cakeSupply' is assigned a value but never used.","'marketCap' is assigned a value but never used.","'autoApy' is assigned a value but never used.","'eggPerBlock' is assigned a value but never used.","'topAPY' is assigned a value but never used.","'cardBg' is defined but never used.","'totalPendingWisteriaHarvest' is assigned a value but never used.","'accountHasSharesStaked' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'AutoAprAsPerchantage3' is assigned a value but never used.","'fetchPoolsBlockLimits' is defined but never used.","'address' is defined but never used.","'removed' is defined but never used.","'ethereum' is defined but never used.","'account' is defined but never used.","'totalValueFormated' is assigned a value but never used.","'getContract' is defined but never used.","'useFarmFromPid' is defined but never used.","'useFarmFromSymbol' is defined but never used.","'useFarmUser' is defined but never used.","'useApprove' is defined but never used.","'StakeAction' is defined but never used.","'fetchDelegateUserStaked' is defined but never used.","'sync' is assigned a value but never used.","'setSync' is assigned a value but never used.","'earning' is assigned a value but never used.","prefer-destructuring","Use object destructuring.","VariableDeclarator","preferDestructuring",{"range":"1221","text":"1222"},{"range":"1223","text":"1224"},"'data' is assigned a value but never used.",{"range":"1225","text":"1226"},{"range":"1227","text":"1228"},"'renderApprovalOrStakeButton' is assigned a value but never used.","'CommunityTag' is defined but never used.","'CoreTag' is defined but never used.","'NoFeeTag' is defined but never used.","'RiskTag' is defined but never used.","'risk' is defined but never used.","'depositFee' is defined but never used.","'StyledLinkExternal' is assigned a value but never used.","'isTokenOnly' is defined but never used.","'lpLabel' is defined but never used.","'liquidityUrlPathParts' is assigned a value but never used.",["1220"],[],[],[],[],"'setLastUpdated' is assigned a value but never used.","'autoUsdToDisplay' is assigned a value but never used.","'ApyButton' is defined but never used.","'cakePrice' is defined but never used.","'apy' is defined but never used.","'cakeABI' is defined but never used.","'wbnbABI' is defined but never used.","'bnbPool' is assigned a value but never used.","'createSlice' is defined but never used.","'reject' is defined but never used.","'farm' is defined but never used.","'getWeb3' is defined but never used.","'useStake' is defined but never used.","'harvest' is defined but never used.","'contract' is assigned a value but never used.","'isTableVariant' is defined but never used.","'ethers' is defined but never used.","'userShares' is defined but never used.","'useCakeVaultContract' is defined but never used.","'delegateFarmContract' is assigned a value but never used.","'farmsWithBalance' is assigned a value but never used.","'useAllEarnings' is defined but never used.","'useTokenBalance' is defined but never used.","'TopFarmCard' is defined but never used.","'tokenMode' is assigned a value but never used.","'activeFarms' is assigned a value but never used.","'farmsList' is assigned a value but never used.","'Hr' is assigned a value but never used.","'cakeRewardPerDayAsNumber' is assigned a value but never used.","'Address' is defined but never used.","'getLiquidityUrlPathParts' is defined but never used.","'calculateCakeEarnedPerThousandDollars' is defined but never used.","'apyModalRoi' is defined but never used.","'GridItem' is assigned a value but never used.","'Description' is assigned a value but never used.","'Toggle' is defined but never used.","'claimedOnly' is defined but never used.","'setClaimedOnly' is defined but never used.","'ToggleWrapper' is assigned a value but never used.","padding-line-between-statements",[3400,3424],"{message} = result",[3439,3457],"{data} = result",[3472,3496],"{success} = result",[3609,3640],"{username} = result.data"]